// Code generated by goa v3.2.4, DO NOT EDIT.
//
// common service
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package common

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the common service interface.
type Service interface {
	// HealthCheck implements health_check.
	HealthCheck(context.Context, *HealthCheckPayload) (res *HealthCheckResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// BasicAuth implements the authorization logic for the Basic security scheme.
	BasicAuth(ctx context.Context, user, pass string, schema *security.BasicScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "common"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"health_check"}

// HealthCheckPayload is the payload type of the common service health_check
// method.
type HealthCheckPayload struct {
	Username string
	Password string
}

// HealthCheckResponse is the result type of the common service health_check
// method.
type HealthCheckResponse struct {
	Status string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "conflict",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeTooManyRequests builds a goa.ServiceError from an error.
func MakeTooManyRequests(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "too_many_requests",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeClientClosedRequest builds a goa.ServiceError from an error.
func MakeClientClosedRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "client_closed_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotImplemented builds a goa.ServiceError from an error.
func MakeNotImplemented(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_implemented",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeServiceUnavailable builds a goa.ServiceError from an error.
func MakeServiceUnavailable(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "service_unavailable",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeGatewayTimeout builds a goa.ServiceError from an error.
func MakeGatewayTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "gateway_timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
