// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking HTTP server types
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package server

import (
	booking "github.com/tchssk/reserve-with-google-goa/gen/booking"
	goa "goa.design/goa/v3/pkg"
)

// BatchAvailabilityLookupRequestBody is the type of the "booking" service
// "batch_availability_lookup" endpoint HTTP request body.
type BatchAvailabilityLookupRequestBody struct {
	MerchantID *string                           `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	SlotTime   []*SlotTimeRequestBodyRequestBody `form:"slot_time,omitempty" json:"slot_time,omitempty" xml:"slot_time,omitempty"`
}

// CheckAvailabilityRequestBody is the type of the "booking" service
// "check_availability" endpoint HTTP request body.
type CheckAvailabilityRequestBody struct {
	Slot *SlotRequestBodyRequestBody `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
}

// CreateBookingRequestBody is the type of the "booking" service
// "create_booking" endpoint HTTP request body.
type CreateBookingRequestBody struct {
	Slot                        *SlotRequestBodyRequestBody                        `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	LeaseRef                    *LeaseReferenceRequestBodyRequestBody              `form:"lease_ref,omitempty" json:"lease_ref,omitempty" xml:"lease_ref,omitempty"`
	UserInformation             *UserInformationRequestBodyRequestBody             `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	PaymentInformation          *PaymentInformationRequestBodyRequestBody          `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	PaymentProcessingParameters *PaymentProcessingParametersRequestBodyRequestBody `form:"payment_processing_parameters,omitempty" json:"payment_processing_parameters,omitempty" xml:"payment_processing_parameters,omitempty"`
	IdempotencyToken            *string                                            `form:"idempotency_token,omitempty" json:"idempotency_token,omitempty" xml:"idempotency_token,omitempty"`
	AdditionalRequest           *string                                            `form:"additional_request,omitempty" json:"additional_request,omitempty" xml:"additional_request,omitempty"`
	OfferID                     *string                                            `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
	DealID                      *string                                            `form:"deal_id,omitempty" json:"deal_id,omitempty" xml:"deal_id,omitempty"`
}

// UpdateBookingRequestBody is the type of the "booking" service
// "update_booking" endpoint HTTP request body.
type UpdateBookingRequestBody struct {
	Booking *BookingRequestBodyRequestBody `form:"booking,omitempty" json:"booking,omitempty" xml:"booking,omitempty"`
}

// GetBookingStatusRequestBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP request body.
type GetBookingStatusRequestBody struct {
	BookingID *string `form:"booking_id,omitempty" json:"booking_id,omitempty" xml:"booking_id,omitempty"`
}

// ListBookingsRequestBody is the type of the "booking" service "list_bookings"
// endpoint HTTP request body.
type ListBookingsRequestBody struct {
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// BatchAvailabilityLookupResponseBody is the type of the "booking" service
// "batch_availability_lookup" endpoint HTTP response body.
type BatchAvailabilityLookupResponseBody struct {
	SlotTimeAvailability []*SlotTimeAvailabilityResponseBody `form:"slot_time_availability" json:"slot_time_availability" xml:"slot_time_availability"`
}

// CheckAvailabilityResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body.
type CheckAvailabilityResponseBody struct {
	Slot                     *SlotResponseBody               `form:"slot" json:"slot" xml:"slot"`
	CountAvailable           int32                           `form:"count_available" json:"count_available" xml:"count_available"`
	LastOnlineCancellableSec *int64                          `form:"last_online_cancellable_sec,omitempty" json:"last_online_cancellable_sec,omitempty" xml:"last_online_cancellable_sec,omitempty"`
	DurationRequirement      *string                         `form:"duration_requirement,omitempty" json:"duration_requirement,omitempty" xml:"duration_requirement,omitempty"`
	AvailabilityUpdate       *AvailabilityUpdateResponseBody `form:"availability_update,omitempty" json:"availability_update,omitempty" xml:"availability_update,omitempty"`
}

// CreateBookingResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body.
type CreateBookingResponseBody struct {
	Booking           *BookingResponseBody           `form:"booking" json:"booking" xml:"booking"`
	UserPaymentOption *UserPaymentOptionResponseBody `form:"user_payment_option,omitempty" json:"user_payment_option,omitempty" xml:"user_payment_option,omitempty"`
	BookingFailure    *BookingFailureResponseBody    `form:"booking_failure,omitempty" json:"booking_failure,omitempty" xml:"booking_failure,omitempty"`
}

// UpdateBookingResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body.
type UpdateBookingResponseBody struct {
	Booking           *BookingResponseBody           `form:"booking" json:"booking" xml:"booking"`
	UserPaymentOption *UserPaymentOptionResponseBody `form:"user_payment_option,omitempty" json:"user_payment_option,omitempty" xml:"user_payment_option,omitempty"`
	BookingFailure    *BookingFailureResponseBody    `form:"booking_failure,omitempty" json:"booking_failure,omitempty" xml:"booking_failure,omitempty"`
}

// GetBookingStatusResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body.
type GetBookingStatusResponseBody struct {
	BookingID        string `form:"booking_id" json:"booking_id" xml:"booking_id"`
	BookingStatus    string `form:"booking_status" json:"booking_status" xml:"booking_status"`
	PrepaymentStatus string `form:"prepayment_status" json:"prepayment_status" xml:"prepayment_status"`
}

// ListBookingsResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body.
type ListBookingsResponseBody struct {
	Bookings []*BookingResponseBody `form:"bookings" json:"bookings" xml:"bookings"`
}

// BatchAvailabilityLookupBadRequestResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "bad_request" error.
type BatchAvailabilityLookupBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupUnauthorizedResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "unauthorized" error.
type BatchAvailabilityLookupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupForbiddenResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "forbidden" error.
type BatchAvailabilityLookupForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupNotFoundResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "not_found" error.
type BatchAvailabilityLookupNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupConflictResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "conflict" error.
type BatchAvailabilityLookupConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupTooManyRequestsResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "too_many_requests" error.
type BatchAvailabilityLookupTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupClientClosedRequestResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "client_closed_request" error.
type BatchAvailabilityLookupClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupInternalServerErrorResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "internal_server_error" error.
type BatchAvailabilityLookupInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupNotImplementedResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "not_implemented" error.
type BatchAvailabilityLookupNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupServiceUnavailableResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "service_unavailable" error.
type BatchAvailabilityLookupServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BatchAvailabilityLookupGatewayTimeoutResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "gateway_timeout" error.
type BatchAvailabilityLookupGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityBadRequestResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "bad_request" error.
type CheckAvailabilityBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityUnauthorizedResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "unauthorized" error.
type CheckAvailabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityForbiddenResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "forbidden" error.
type CheckAvailabilityForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityNotFoundResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "not_found" error.
type CheckAvailabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityConflictResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "conflict" error.
type CheckAvailabilityConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityTooManyRequestsResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "too_many_requests" error.
type CheckAvailabilityTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityClientClosedRequestResponseBody is the type of the
// "booking" service "check_availability" endpoint HTTP response body for the
// "client_closed_request" error.
type CheckAvailabilityClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityInternalServerErrorResponseBody is the type of the
// "booking" service "check_availability" endpoint HTTP response body for the
// "internal_server_error" error.
type CheckAvailabilityInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityNotImplementedResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "not_implemented" error.
type CheckAvailabilityNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityServiceUnavailableResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "service_unavailable" error.
type CheckAvailabilityServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckAvailabilityGatewayTimeoutResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "gateway_timeout" error.
type CheckAvailabilityGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingBadRequestResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "bad_request" error.
type CreateBookingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingUnauthorizedResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "unauthorized" error.
type CreateBookingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingForbiddenResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "forbidden" error.
type CreateBookingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingNotFoundResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "not_found" error.
type CreateBookingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingConflictResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "conflict" error.
type CreateBookingConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingTooManyRequestsResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "too_many_requests" error.
type CreateBookingTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingClientClosedRequestResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "client_closed_request" error.
type CreateBookingClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingInternalServerErrorResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "internal_server_error" error.
type CreateBookingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingNotImplementedResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "not_implemented" error.
type CreateBookingNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingServiceUnavailableResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "service_unavailable" error.
type CreateBookingServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookingGatewayTimeoutResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "gateway_timeout" error.
type CreateBookingGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingBadRequestResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "bad_request" error.
type UpdateBookingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingUnauthorizedResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "unauthorized" error.
type UpdateBookingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingForbiddenResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "forbidden" error.
type UpdateBookingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingNotFoundResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "not_found" error.
type UpdateBookingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingConflictResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "conflict" error.
type UpdateBookingConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingTooManyRequestsResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "too_many_requests" error.
type UpdateBookingTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingClientClosedRequestResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "client_closed_request" error.
type UpdateBookingClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingInternalServerErrorResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "internal_server_error" error.
type UpdateBookingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingNotImplementedResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "not_implemented" error.
type UpdateBookingNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingServiceUnavailableResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "service_unavailable" error.
type UpdateBookingServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBookingGatewayTimeoutResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "gateway_timeout" error.
type UpdateBookingGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusBadRequestResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "bad_request" error.
type GetBookingStatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusUnauthorizedResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "unauthorized" error.
type GetBookingStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusForbiddenResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "forbidden" error.
type GetBookingStatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusNotFoundResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "not_found" error.
type GetBookingStatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusConflictResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "conflict" error.
type GetBookingStatusConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusTooManyRequestsResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "too_many_requests" error.
type GetBookingStatusTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusClientClosedRequestResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "client_closed_request" error.
type GetBookingStatusClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusInternalServerErrorResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "internal_server_error" error.
type GetBookingStatusInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusNotImplementedResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "not_implemented" error.
type GetBookingStatusNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusServiceUnavailableResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "service_unavailable" error.
type GetBookingStatusServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookingStatusGatewayTimeoutResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "gateway_timeout" error.
type GetBookingStatusGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsBadRequestResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "bad_request" error.
type ListBookingsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsUnauthorizedResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "unauthorized" error.
type ListBookingsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsForbiddenResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "forbidden" error.
type ListBookingsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsNotFoundResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "not_found" error.
type ListBookingsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsConflictResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "conflict" error.
type ListBookingsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsTooManyRequestsResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "too_many_requests"
// error.
type ListBookingsTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsClientClosedRequestResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "client_closed_request" error.
type ListBookingsClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsInternalServerErrorResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "internal_server_error" error.
type ListBookingsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsNotImplementedResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "not_implemented" error.
type ListBookingsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsServiceUnavailableResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "service_unavailable" error.
type ListBookingsServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBookingsGatewayTimeoutResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "gateway_timeout" error.
type ListBookingsGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SlotTimeAvailabilityResponseBody is used to define fields on response body
// types.
type SlotTimeAvailabilityResponseBody struct {
	SlotTime  *SlotTimeResponseBody `form:"slot_time" json:"slot_time" xml:"slot_time"`
	Available bool                  `form:"available" json:"available" xml:"available"`
}

// SlotTimeResponseBody is used to define fields on response body types.
type SlotTimeResponseBody struct {
	ServiceID        string                   `form:"service_id" json:"service_id" xml:"service_id"`
	StartSec         int64                    `form:"start_sec" json:"start_sec" xml:"start_sec"`
	DurationSec      *int64                   `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                  `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	ResourceIds      *ResourceIdsResponseBody `form:"resource_ids,omitempty" json:"resource_ids,omitempty" xml:"resource_ids,omitempty"`
	ConfirmationMode *string                  `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// ResourceIdsResponseBody is used to define fields on response body types.
type ResourceIdsResponseBody struct {
	StaffID   *string `form:"staff_id,omitempty" json:"staff_id,omitempty" xml:"staff_id,omitempty"`
	RoomID    *string `form:"room_id,omitempty" json:"room_id,omitempty" xml:"room_id,omitempty"`
	PartySize *int32  `form:"party_size,omitempty" json:"party_size,omitempty" xml:"party_size,omitempty"`
}

// SlotResponseBody is used to define fields on response body types.
type SlotResponseBody struct {
	MerchantID       *string                  `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	ServiceID        *string                  `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                   `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                   `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                  `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	Resources        *ResourceIdsResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	ConfirmationMode *string                  `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// AvailabilityUpdateResponseBody is used to define fields on response body
// types.
type AvailabilityUpdateResponseBody struct {
	SlotAvailability []*SlotAvailabilityResponseBody `form:"slot_availability" json:"slot_availability" xml:"slot_availability"`
}

// SlotAvailabilityResponseBody is used to define fields on response body types.
type SlotAvailabilityResponseBody struct {
	Slot           *SlotResponseBody `form:"slot" json:"slot" xml:"slot"`
	CountAvailable int32             `form:"count_available" json:"count_available" xml:"count_available"`
}

// BookingResponseBody is used to define fields on response body types.
type BookingResponseBody struct {
	BookingID          string                          `form:"booking_id" json:"booking_id" xml:"booking_id"`
	Slot               *SlotResponseBody               `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	UserInformation    *UserInformationResponseBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	Status             *string                         `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	PaymentInformation *PaymentInformationResponseBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	VirtualSessionInfo *VirtualSessionInfoResponseBody `form:"virtual_session_info,omitempty" json:"virtual_session_info,omitempty" xml:"virtual_session_info,omitempty"`
	OfferInfo          *OfferInfoResponseBody          `form:"offer_info,omitempty" json:"offer_info,omitempty" xml:"offer_info,omitempty"`
}

// UserInformationResponseBody is used to define fields on response body types.
type UserInformationResponseBody struct {
	UserID       string                     `form:"user_id" json:"user_id" xml:"user_id"`
	GivenName    string                     `form:"given_name" json:"given_name" xml:"given_name"`
	FamilyName   string                     `form:"family_name" json:"family_name" xml:"family_name"`
	Address      *PostalAddressResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    string                     `form:"telephone" json:"telephone" xml:"telephone"`
	Email        string                     `form:"email" json:"email" xml:"email"`
	LanguageCode *string                    `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressResponseBody is used to define fields on response body types.
type PostalAddressResponseBody struct {
	Country       string  `form:"country" json:"country" xml:"country"`
	Locality      string  `form:"locality" json:"locality" xml:"locality"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    string  `form:"postal_code" json:"postal_code" xml:"postal_code"`
	StreetAddress string  `form:"street_address" json:"street_address" xml:"street_address"`
}

// PaymentInformationResponseBody is used to define fields on response body
// types.
type PaymentInformationResponseBody struct {
	PrepaymentStatus     string                 `form:"prepayment_status" json:"prepayment_status" xml:"prepayment_status"`
	PaymentTransactionID *string                `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceResponseBody     `form:"price" json:"price" xml:"price"`
	TaxAmount            *PriceResponseBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceResponseBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceResponseBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositResponseBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeResponseBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   string                 `form:"payment_processed_by" json:"payment_processed_by" xml:"payment_processed_by"`
	PaymentOptionID      *string                `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// PriceResponseBody is used to define fields on response body types.
type PriceResponseBody struct {
	PriceMicros      int64   `form:"price_micros" json:"price_micros" xml:"price_micros"`
	CurrencyCode     string  `form:"currency_code" json:"currency_code" xml:"currency_code"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// DepositResponseBody is used to define fields on response body types.
type DepositResponseBody struct {
	Deposit                   *PriceResponseBody `form:"deposit" json:"deposit" xml:"deposit"`
	MinAdvanceCancellationSec int64              `form:"min_advance_cancellation_sec" json:"min_advance_cancellation_sec" xml:"min_advance_cancellation_sec"`
	DepositType               string             `form:"deposit_type" json:"deposit_type" xml:"deposit_type"`
}

// NoShowFeeResponseBody is used to define fields on response body types.
type NoShowFeeResponseBody struct {
	Fee     *PriceResponseBody `form:"fee" json:"fee" xml:"fee"`
	FeeType string             `form:"fee_type" json:"fee_type" xml:"fee_type"`
}

// VirtualSessionInfoResponseBody is used to define fields on response body
// types.
type VirtualSessionInfoResponseBody struct {
	SessionURL *string `form:"session_url,omitempty" json:"session_url,omitempty" xml:"session_url,omitempty"`
	MeetingID  *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	Password   *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// OfferInfoResponseBody is used to define fields on response body types.
type OfferInfoResponseBody struct {
	OfferID string `form:"offer_id" json:"offer_id" xml:"offer_id"`
}

// UserPaymentOptionResponseBody is used to define fields on response body
// types.
type UserPaymentOptionResponseBody struct {
	UserPaymentOptionID string `form:"user_payment_option_id" json:"user_payment_option_id" xml:"user_payment_option_id"`
	ValidStartTimeSec   *int64 `form:"valid_start_time_sec,omitempty" json:"valid_start_time_sec,omitempty" xml:"valid_start_time_sec,omitempty"`
	ValidEndTimeSec     *int64 `form:"valid_end_time_sec,omitempty" json:"valid_end_time_sec,omitempty" xml:"valid_end_time_sec,omitempty"`
	Type                string `form:"type" json:"type" xml:"type"`
	OriginalCount       int32  `form:"original_count" json:"original_count" xml:"original_count"`
	CurrentCount        int32  `form:"current_count" json:"current_count" xml:"current_count"`
	PaymentOptionID     string `form:"payment_option_id" json:"payment_option_id" xml:"payment_option_id"`
}

// BookingFailureResponseBody is used to define fields on response body types.
type BookingFailureResponseBody struct {
	Cause            string                                 `form:"cause" json:"cause" xml:"cause"`
	RejectedCardType *string                                `form:"rejected_card_type,omitempty" json:"rejected_card_type,omitempty" xml:"rejected_card_type,omitempty"`
	Description      *string                                `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	PaymentFailure   *PaymentFailureInformationResponseBody `form:"payment_failure,omitempty" json:"payment_failure,omitempty" xml:"payment_failure,omitempty"`
}

// PaymentFailureInformationResponseBody is used to define fields on response
// body types.
type PaymentFailureInformationResponseBody struct {
	Threeds1Parameters *ThreeDS1ParametersResponseBody `form:"threeds1_parameters" json:"threeds1_parameters" xml:"threeds1_parameters"`
}

// ThreeDS1ParametersResponseBody is used to define fields on response body
// types.
type ThreeDS1ParametersResponseBody struct {
	AcsURL         string `form:"acs_url" json:"acs_url" xml:"acs_url"`
	PaReq          string `form:"pa_req" json:"pa_req" xml:"pa_req"`
	TransactionID  string `form:"transaction_id" json:"transaction_id" xml:"transaction_id"`
	MdMerchantData string `form:"md_merchant_data" json:"md_merchant_data" xml:"md_merchant_data"`
}

// SlotTimeRequestBodyRequestBody is used to define fields on request body
// types.
type SlotTimeRequestBodyRequestBody struct {
	ServiceID        *string                            `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                             `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                             `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                            `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	ResourceIds      *ResourceIdsRequestBodyRequestBody `form:"resource_ids,omitempty" json:"resource_ids,omitempty" xml:"resource_ids,omitempty"`
	ConfirmationMode *string                            `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// ResourceIdsRequestBodyRequestBody is used to define fields on request body
// types.
type ResourceIdsRequestBodyRequestBody struct {
	StaffID   *string `form:"staff_id,omitempty" json:"staff_id,omitempty" xml:"staff_id,omitempty"`
	RoomID    *string `form:"room_id,omitempty" json:"room_id,omitempty" xml:"room_id,omitempty"`
	PartySize *int32  `form:"party_size,omitempty" json:"party_size,omitempty" xml:"party_size,omitempty"`
}

// SlotRequestBodyRequestBody is used to define fields on request body types.
type SlotRequestBodyRequestBody struct {
	MerchantID       *string                            `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	ServiceID        *string                            `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                             `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                             `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                            `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	Resources        *ResourceIdsRequestBodyRequestBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	ConfirmationMode *string                            `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// LeaseReferenceRequestBodyRequestBody is used to define fields on request
// body types.
type LeaseReferenceRequestBodyRequestBody struct {
	LeaseID *string `form:"lease_id,omitempty" json:"lease_id,omitempty" xml:"lease_id,omitempty"`
}

// UserInformationRequestBodyRequestBody is used to define fields on request
// body types.
type UserInformationRequestBodyRequestBody struct {
	UserID       *string                              `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	GivenName    *string                              `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	FamilyName   *string                              `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	Address      *PostalAddressRequestBodyRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    *string                              `form:"telephone,omitempty" json:"telephone,omitempty" xml:"telephone,omitempty"`
	Email        *string                              `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	LanguageCode *string                              `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressRequestBodyRequestBody is used to define fields on request body
// types.
type PostalAddressRequestBodyRequestBody struct {
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Locality      *string `form:"locality,omitempty" json:"locality,omitempty" xml:"locality,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    *string `form:"postal_code,omitempty" json:"postal_code,omitempty" xml:"postal_code,omitempty"`
	StreetAddress *string `form:"street_address,omitempty" json:"street_address,omitempty" xml:"street_address,omitempty"`
}

// PaymentInformationRequestBodyRequestBody is used to define fields on request
// body types.
type PaymentInformationRequestBodyRequestBody struct {
	PrepaymentStatus     *string                          `form:"prepayment_status,omitempty" json:"prepayment_status,omitempty" xml:"prepayment_status,omitempty"`
	PaymentTransactionID *string                          `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceRequestBodyRequestBody     `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	TaxAmount            *PriceRequestBodyRequestBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceRequestBodyRequestBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceRequestBodyRequestBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositRequestBodyRequestBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeRequestBodyRequestBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   *string                          `form:"payment_processed_by,omitempty" json:"payment_processed_by,omitempty" xml:"payment_processed_by,omitempty"`
	PaymentOptionID      *string                          `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                          `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                          `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                          `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                          `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// PriceRequestBodyRequestBody is used to define fields on request body types.
type PriceRequestBodyRequestBody struct {
	PriceMicros      *int64  `form:"price_micros,omitempty" json:"price_micros,omitempty" xml:"price_micros,omitempty"`
	CurrencyCode     *string `form:"currency_code,omitempty" json:"currency_code,omitempty" xml:"currency_code,omitempty"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// DepositRequestBodyRequestBody is used to define fields on request body types.
type DepositRequestBodyRequestBody struct {
	Deposit                   *PriceRequestBodyRequestBody `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	MinAdvanceCancellationSec *int64                       `form:"min_advance_cancellation_sec,omitempty" json:"min_advance_cancellation_sec,omitempty" xml:"min_advance_cancellation_sec,omitempty"`
	DepositType               *string                      `form:"deposit_type,omitempty" json:"deposit_type,omitempty" xml:"deposit_type,omitempty"`
}

// NoShowFeeRequestBodyRequestBody is used to define fields on request body
// types.
type NoShowFeeRequestBodyRequestBody struct {
	Fee     *PriceRequestBodyRequestBody `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	FeeType *string                      `form:"fee_type,omitempty" json:"fee_type,omitempty" xml:"fee_type,omitempty"`
}

// PaymentProcessingParametersRequestBodyRequestBody is used to define fields
// on request body types.
type PaymentProcessingParametersRequestBodyRequestBody struct {
	Processor                  *string                                   `form:"processor,omitempty" json:"processor,omitempty" xml:"processor,omitempty"`
	PaymentMethodToken         *string                                   `form:"payment_method_token,omitempty" json:"payment_method_token,omitempty" xml:"payment_method_token,omitempty"`
	UnparsedPaymentMethodToken *string                                   `form:"unparsed_payment_method_token,omitempty" json:"unparsed_payment_method_token,omitempty" xml:"unparsed_payment_method_token,omitempty"`
	Version                    *string                                   `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	PaymentProcessor           *string                                   `form:"payment_processor,omitempty" json:"payment_processor,omitempty" xml:"payment_processor,omitempty"`
	TokenizationConfig         *TokenizationConfigRequestBodyRequestBody `form:"tokenization_config,omitempty" json:"tokenization_config,omitempty" xml:"tokenization_config,omitempty"`
}

// TokenizationConfigRequestBodyRequestBody is used to define fields on request
// body types.
type TokenizationConfigRequestBodyRequestBody struct {
	TokenizationParameter    map[string]string                              `form:"tokenization_parameter,omitempty" json:"tokenization_parameter,omitempty" xml:"tokenization_parameter,omitempty"`
	BillingInformationFormat *string                                        `form:"billing_information_format,omitempty" json:"billing_information_format,omitempty" xml:"billing_information_format,omitempty"`
	MerchantOfRecordName     *string                                        `form:"merchant_of_record_name,omitempty" json:"merchant_of_record_name,omitempty" xml:"merchant_of_record_name,omitempty"`
	PaymentCountryCode       *string                                        `form:"payment_country_code,omitempty" json:"payment_country_code,omitempty" xml:"payment_country_code,omitempty"`
	CardNetworkParameters    []*CardNetworkParametersRequestBodyRequestBody `form:"card_network_parameters,omitempty" json:"card_network_parameters,omitempty" xml:"card_network_parameters,omitempty"`
	AllowedAuthMethods       []string                                       `form:"allowed_auth_methods,omitempty" json:"allowed_auth_methods,omitempty" xml:"allowed_auth_methods,omitempty"`
}

// CardNetworkParametersRequestBodyRequestBody is used to define fields on
// request body types.
type CardNetworkParametersRequestBodyRequestBody struct {
	CardNetwork        *string `form:"card_network,omitempty" json:"card_network,omitempty" xml:"card_network,omitempty"`
	AcquirerBin        *string `form:"acquirer_bin,omitempty" json:"acquirer_bin,omitempty" xml:"acquirer_bin,omitempty"`
	AcquirerMerchantID *string `form:"acquirer_merchant_id,omitempty" json:"acquirer_merchant_id,omitempty" xml:"acquirer_merchant_id,omitempty"`
}

// BookingRequestBodyRequestBody is used to define fields on request body types.
type BookingRequestBodyRequestBody struct {
	BookingID          *string                                   `form:"booking_id,omitempty" json:"booking_id,omitempty" xml:"booking_id,omitempty"`
	Slot               *SlotRequestBodyRequestBody               `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	UserInformation    *UserInformationRequestBodyRequestBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	Status             *string                                   `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	PaymentInformation *PaymentInformationRequestBodyRequestBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	VirtualSessionInfo *VirtualSessionInfoRequestBodyRequestBody `form:"virtual_session_info,omitempty" json:"virtual_session_info,omitempty" xml:"virtual_session_info,omitempty"`
	OfferInfo          *OfferInfoRequestBodyRequestBody          `form:"offer_info,omitempty" json:"offer_info,omitempty" xml:"offer_info,omitempty"`
}

// VirtualSessionInfoRequestBodyRequestBody is used to define fields on request
// body types.
type VirtualSessionInfoRequestBodyRequestBody struct {
	SessionURL *string `form:"session_url,omitempty" json:"session_url,omitempty" xml:"session_url,omitempty"`
	MeetingID  *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	Password   *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// OfferInfoRequestBodyRequestBody is used to define fields on request body
// types.
type OfferInfoRequestBodyRequestBody struct {
	OfferID *string `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
}

// NewBatchAvailabilityLookupResponseBody builds the HTTP response body from
// the result of the "batch_availability_lookup" endpoint of the "booking"
// service.
func NewBatchAvailabilityLookupResponseBody(res *booking.BatchAvailabilityLookupResponse) *BatchAvailabilityLookupResponseBody {
	body := &BatchAvailabilityLookupResponseBody{}
	if res.SlotTimeAvailability != nil {
		body.SlotTimeAvailability = make([]*SlotTimeAvailabilityResponseBody, len(res.SlotTimeAvailability))
		for i, val := range res.SlotTimeAvailability {
			body.SlotTimeAvailability[i] = marshalBookingSlotTimeAvailabilityToSlotTimeAvailabilityResponseBody(val)
		}
	}
	return body
}

// NewCheckAvailabilityResponseBody builds the HTTP response body from the
// result of the "check_availability" endpoint of the "booking" service.
func NewCheckAvailabilityResponseBody(res *booking.CheckAvailabilityResponse) *CheckAvailabilityResponseBody {
	body := &CheckAvailabilityResponseBody{
		CountAvailable:           res.CountAvailable,
		LastOnlineCancellableSec: res.LastOnlineCancellableSec,
		DurationRequirement:      res.DurationRequirement,
	}
	if res.Slot != nil {
		body.Slot = marshalBookingSlotToSlotResponseBody(res.Slot)
	}
	if res.AvailabilityUpdate != nil {
		body.AvailabilityUpdate = marshalBookingAvailabilityUpdateToAvailabilityUpdateResponseBody(res.AvailabilityUpdate)
	}
	return body
}

// NewCreateBookingResponseBody builds the HTTP response body from the result
// of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingResponseBody(res *booking.CreateBookingResponse) *CreateBookingResponseBody {
	body := &CreateBookingResponseBody{}
	if res.Booking != nil {
		body.Booking = marshalBookingBookingToBookingResponseBody(res.Booking)
	}
	if res.UserPaymentOption != nil {
		body.UserPaymentOption = marshalBookingUserPaymentOptionToUserPaymentOptionResponseBody(res.UserPaymentOption)
	}
	if res.BookingFailure != nil {
		body.BookingFailure = marshalBookingBookingFailureToBookingFailureResponseBody(res.BookingFailure)
	}
	return body
}

// NewUpdateBookingResponseBody builds the HTTP response body from the result
// of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingResponseBody(res *booking.UpdateBookingResponse) *UpdateBookingResponseBody {
	body := &UpdateBookingResponseBody{}
	if res.Booking != nil {
		body.Booking = marshalBookingBookingToBookingResponseBody(res.Booking)
	}
	if res.UserPaymentOption != nil {
		body.UserPaymentOption = marshalBookingUserPaymentOptionToUserPaymentOptionResponseBody(res.UserPaymentOption)
	}
	if res.BookingFailure != nil {
		body.BookingFailure = marshalBookingBookingFailureToBookingFailureResponseBody(res.BookingFailure)
	}
	return body
}

// NewGetBookingStatusResponseBody builds the HTTP response body from the
// result of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusResponseBody(res *booking.GetBookingStatusResponse) *GetBookingStatusResponseBody {
	body := &GetBookingStatusResponseBody{
		BookingID:        res.BookingID,
		BookingStatus:    res.BookingStatus,
		PrepaymentStatus: res.PrepaymentStatus,
	}
	return body
}

// NewListBookingsResponseBody builds the HTTP response body from the result of
// the "list_bookings" endpoint of the "booking" service.
func NewListBookingsResponseBody(res *booking.ListBookingsResponse) *ListBookingsResponseBody {
	body := &ListBookingsResponseBody{}
	if res.Bookings != nil {
		body.Bookings = make([]*BookingResponseBody, len(res.Bookings))
		for i, val := range res.Bookings {
			body.Bookings[i] = marshalBookingBookingToBookingResponseBody(val)
		}
	}
	return body
}

// NewBatchAvailabilityLookupBadRequestResponseBody builds the HTTP response
// body from the result of the "batch_availability_lookup" endpoint of the
// "booking" service.
func NewBatchAvailabilityLookupBadRequestResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupBadRequestResponseBody {
	body := &BatchAvailabilityLookupBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupUnauthorizedResponseBody builds the HTTP response
// body from the result of the "batch_availability_lookup" endpoint of the
// "booking" service.
func NewBatchAvailabilityLookupUnauthorizedResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupUnauthorizedResponseBody {
	body := &BatchAvailabilityLookupUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupForbiddenResponseBody builds the HTTP response
// body from the result of the "batch_availability_lookup" endpoint of the
// "booking" service.
func NewBatchAvailabilityLookupForbiddenResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupForbiddenResponseBody {
	body := &BatchAvailabilityLookupForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupNotFoundResponseBody builds the HTTP response body
// from the result of the "batch_availability_lookup" endpoint of the "booking"
// service.
func NewBatchAvailabilityLookupNotFoundResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupNotFoundResponseBody {
	body := &BatchAvailabilityLookupNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupConflictResponseBody builds the HTTP response body
// from the result of the "batch_availability_lookup" endpoint of the "booking"
// service.
func NewBatchAvailabilityLookupConflictResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupConflictResponseBody {
	body := &BatchAvailabilityLookupConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupTooManyRequestsResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupTooManyRequestsResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupTooManyRequestsResponseBody {
	body := &BatchAvailabilityLookupTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupClientClosedRequestResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupClientClosedRequestResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupClientClosedRequestResponseBody {
	body := &BatchAvailabilityLookupClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupInternalServerErrorResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupInternalServerErrorResponseBody {
	body := &BatchAvailabilityLookupInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupNotImplementedResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupNotImplementedResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupNotImplementedResponseBody {
	body := &BatchAvailabilityLookupNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupServiceUnavailableResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupServiceUnavailableResponseBody {
	body := &BatchAvailabilityLookupServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupGatewayTimeoutResponseBody builds the HTTP
// response body from the result of the "batch_availability_lookup" endpoint of
// the "booking" service.
func NewBatchAvailabilityLookupGatewayTimeoutResponseBody(res *goa.ServiceError) *BatchAvailabilityLookupGatewayTimeoutResponseBody {
	body := &BatchAvailabilityLookupGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityBadRequestResponseBody builds the HTTP response body
// from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityBadRequestResponseBody(res *goa.ServiceError) *CheckAvailabilityBadRequestResponseBody {
	body := &CheckAvailabilityBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityUnauthorizedResponseBody builds the HTTP response body
// from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityUnauthorizedResponseBody(res *goa.ServiceError) *CheckAvailabilityUnauthorizedResponseBody {
	body := &CheckAvailabilityUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityForbiddenResponseBody builds the HTTP response body from
// the result of the "check_availability" endpoint of the "booking" service.
func NewCheckAvailabilityForbiddenResponseBody(res *goa.ServiceError) *CheckAvailabilityForbiddenResponseBody {
	body := &CheckAvailabilityForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityNotFoundResponseBody builds the HTTP response body from
// the result of the "check_availability" endpoint of the "booking" service.
func NewCheckAvailabilityNotFoundResponseBody(res *goa.ServiceError) *CheckAvailabilityNotFoundResponseBody {
	body := &CheckAvailabilityNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityConflictResponseBody builds the HTTP response body from
// the result of the "check_availability" endpoint of the "booking" service.
func NewCheckAvailabilityConflictResponseBody(res *goa.ServiceError) *CheckAvailabilityConflictResponseBody {
	body := &CheckAvailabilityConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityTooManyRequestsResponseBody builds the HTTP response
// body from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityTooManyRequestsResponseBody(res *goa.ServiceError) *CheckAvailabilityTooManyRequestsResponseBody {
	body := &CheckAvailabilityTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityClientClosedRequestResponseBody builds the HTTP response
// body from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityClientClosedRequestResponseBody(res *goa.ServiceError) *CheckAvailabilityClientClosedRequestResponseBody {
	body := &CheckAvailabilityClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityInternalServerErrorResponseBody(res *goa.ServiceError) *CheckAvailabilityInternalServerErrorResponseBody {
	body := &CheckAvailabilityInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityNotImplementedResponseBody builds the HTTP response body
// from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityNotImplementedResponseBody(res *goa.ServiceError) *CheckAvailabilityNotImplementedResponseBody {
	body := &CheckAvailabilityNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityServiceUnavailableResponseBody(res *goa.ServiceError) *CheckAvailabilityServiceUnavailableResponseBody {
	body := &CheckAvailabilityServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckAvailabilityGatewayTimeoutResponseBody builds the HTTP response body
// from the result of the "check_availability" endpoint of the "booking"
// service.
func NewCheckAvailabilityGatewayTimeoutResponseBody(res *goa.ServiceError) *CheckAvailabilityGatewayTimeoutResponseBody {
	body := &CheckAvailabilityGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingBadRequestResponseBody builds the HTTP response body from
// the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingBadRequestResponseBody(res *goa.ServiceError) *CreateBookingBadRequestResponseBody {
	body := &CreateBookingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingUnauthorizedResponseBody(res *goa.ServiceError) *CreateBookingUnauthorizedResponseBody {
	body := &CreateBookingUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingForbiddenResponseBody builds the HTTP response body from the
// result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingForbiddenResponseBody(res *goa.ServiceError) *CreateBookingForbiddenResponseBody {
	body := &CreateBookingForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingNotFoundResponseBody builds the HTTP response body from the
// result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingNotFoundResponseBody(res *goa.ServiceError) *CreateBookingNotFoundResponseBody {
	body := &CreateBookingNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingConflictResponseBody builds the HTTP response body from the
// result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingConflictResponseBody(res *goa.ServiceError) *CreateBookingConflictResponseBody {
	body := &CreateBookingConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingTooManyRequestsResponseBody builds the HTTP response body
// from the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingTooManyRequestsResponseBody(res *goa.ServiceError) *CreateBookingTooManyRequestsResponseBody {
	body := &CreateBookingTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingClientClosedRequestResponseBody builds the HTTP response
// body from the result of the "create_booking" endpoint of the "booking"
// service.
func NewCreateBookingClientClosedRequestResponseBody(res *goa.ServiceError) *CreateBookingClientClosedRequestResponseBody {
	body := &CreateBookingClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "create_booking" endpoint of the "booking"
// service.
func NewCreateBookingInternalServerErrorResponseBody(res *goa.ServiceError) *CreateBookingInternalServerErrorResponseBody {
	body := &CreateBookingInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingNotImplementedResponseBody builds the HTTP response body
// from the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingNotImplementedResponseBody(res *goa.ServiceError) *CreateBookingNotImplementedResponseBody {
	body := &CreateBookingNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingServiceUnavailableResponseBody(res *goa.ServiceError) *CreateBookingServiceUnavailableResponseBody {
	body := &CreateBookingServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookingGatewayTimeoutResponseBody builds the HTTP response body
// from the result of the "create_booking" endpoint of the "booking" service.
func NewCreateBookingGatewayTimeoutResponseBody(res *goa.ServiceError) *CreateBookingGatewayTimeoutResponseBody {
	body := &CreateBookingGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingBadRequestResponseBody builds the HTTP response body from
// the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingBadRequestResponseBody(res *goa.ServiceError) *UpdateBookingBadRequestResponseBody {
	body := &UpdateBookingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingUnauthorizedResponseBody(res *goa.ServiceError) *UpdateBookingUnauthorizedResponseBody {
	body := &UpdateBookingUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingForbiddenResponseBody builds the HTTP response body from the
// result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingForbiddenResponseBody(res *goa.ServiceError) *UpdateBookingForbiddenResponseBody {
	body := &UpdateBookingForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingNotFoundResponseBody builds the HTTP response body from the
// result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingNotFoundResponseBody(res *goa.ServiceError) *UpdateBookingNotFoundResponseBody {
	body := &UpdateBookingNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingConflictResponseBody builds the HTTP response body from the
// result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingConflictResponseBody(res *goa.ServiceError) *UpdateBookingConflictResponseBody {
	body := &UpdateBookingConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingTooManyRequestsResponseBody builds the HTTP response body
// from the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingTooManyRequestsResponseBody(res *goa.ServiceError) *UpdateBookingTooManyRequestsResponseBody {
	body := &UpdateBookingTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingClientClosedRequestResponseBody builds the HTTP response
// body from the result of the "update_booking" endpoint of the "booking"
// service.
func NewUpdateBookingClientClosedRequestResponseBody(res *goa.ServiceError) *UpdateBookingClientClosedRequestResponseBody {
	body := &UpdateBookingClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "update_booking" endpoint of the "booking"
// service.
func NewUpdateBookingInternalServerErrorResponseBody(res *goa.ServiceError) *UpdateBookingInternalServerErrorResponseBody {
	body := &UpdateBookingInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingNotImplementedResponseBody builds the HTTP response body
// from the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingNotImplementedResponseBody(res *goa.ServiceError) *UpdateBookingNotImplementedResponseBody {
	body := &UpdateBookingNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingServiceUnavailableResponseBody(res *goa.ServiceError) *UpdateBookingServiceUnavailableResponseBody {
	body := &UpdateBookingServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBookingGatewayTimeoutResponseBody builds the HTTP response body
// from the result of the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingGatewayTimeoutResponseBody(res *goa.ServiceError) *UpdateBookingGatewayTimeoutResponseBody {
	body := &UpdateBookingGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusBadRequestResponseBody builds the HTTP response body from
// the result of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusBadRequestResponseBody(res *goa.ServiceError) *GetBookingStatusBadRequestResponseBody {
	body := &GetBookingStatusBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusUnauthorizedResponseBody(res *goa.ServiceError) *GetBookingStatusUnauthorizedResponseBody {
	body := &GetBookingStatusUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusForbiddenResponseBody builds the HTTP response body from
// the result of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusForbiddenResponseBody(res *goa.ServiceError) *GetBookingStatusForbiddenResponseBody {
	body := &GetBookingStatusForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusNotFoundResponseBody builds the HTTP response body from
// the result of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusNotFoundResponseBody(res *goa.ServiceError) *GetBookingStatusNotFoundResponseBody {
	body := &GetBookingStatusNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusConflictResponseBody builds the HTTP response body from
// the result of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusConflictResponseBody(res *goa.ServiceError) *GetBookingStatusConflictResponseBody {
	body := &GetBookingStatusConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusTooManyRequestsResponseBody builds the HTTP response body
// from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusTooManyRequestsResponseBody(res *goa.ServiceError) *GetBookingStatusTooManyRequestsResponseBody {
	body := &GetBookingStatusTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusClientClosedRequestResponseBody builds the HTTP response
// body from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusClientClosedRequestResponseBody(res *goa.ServiceError) *GetBookingStatusClientClosedRequestResponseBody {
	body := &GetBookingStatusClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusInternalServerErrorResponseBody(res *goa.ServiceError) *GetBookingStatusInternalServerErrorResponseBody {
	body := &GetBookingStatusInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusNotImplementedResponseBody builds the HTTP response body
// from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusNotImplementedResponseBody(res *goa.ServiceError) *GetBookingStatusNotImplementedResponseBody {
	body := &GetBookingStatusNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusServiceUnavailableResponseBody(res *goa.ServiceError) *GetBookingStatusServiceUnavailableResponseBody {
	body := &GetBookingStatusServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookingStatusGatewayTimeoutResponseBody builds the HTTP response body
// from the result of the "get_booking_status" endpoint of the "booking"
// service.
func NewGetBookingStatusGatewayTimeoutResponseBody(res *goa.ServiceError) *GetBookingStatusGatewayTimeoutResponseBody {
	body := &GetBookingStatusGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsBadRequestResponseBody builds the HTTP response body from the
// result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsBadRequestResponseBody(res *goa.ServiceError) *ListBookingsBadRequestResponseBody {
	body := &ListBookingsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsUnauthorizedResponseBody(res *goa.ServiceError) *ListBookingsUnauthorizedResponseBody {
	body := &ListBookingsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsForbiddenResponseBody builds the HTTP response body from the
// result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsForbiddenResponseBody(res *goa.ServiceError) *ListBookingsForbiddenResponseBody {
	body := &ListBookingsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsNotFoundResponseBody builds the HTTP response body from the
// result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsNotFoundResponseBody(res *goa.ServiceError) *ListBookingsNotFoundResponseBody {
	body := &ListBookingsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsConflictResponseBody builds the HTTP response body from the
// result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsConflictResponseBody(res *goa.ServiceError) *ListBookingsConflictResponseBody {
	body := &ListBookingsConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsTooManyRequestsResponseBody builds the HTTP response body
// from the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsTooManyRequestsResponseBody(res *goa.ServiceError) *ListBookingsTooManyRequestsResponseBody {
	body := &ListBookingsTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsClientClosedRequestResponseBody builds the HTTP response body
// from the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsClientClosedRequestResponseBody(res *goa.ServiceError) *ListBookingsClientClosedRequestResponseBody {
	body := &ListBookingsClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsInternalServerErrorResponseBody(res *goa.ServiceError) *ListBookingsInternalServerErrorResponseBody {
	body := &ListBookingsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsNotImplementedResponseBody builds the HTTP response body from
// the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsNotImplementedResponseBody(res *goa.ServiceError) *ListBookingsNotImplementedResponseBody {
	body := &ListBookingsNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsServiceUnavailableResponseBody(res *goa.ServiceError) *ListBookingsServiceUnavailableResponseBody {
	body := &ListBookingsServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBookingsGatewayTimeoutResponseBody builds the HTTP response body from
// the result of the "list_bookings" endpoint of the "booking" service.
func NewListBookingsGatewayTimeoutResponseBody(res *goa.ServiceError) *ListBookingsGatewayTimeoutResponseBody {
	body := &ListBookingsGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBatchAvailabilityLookupPayload builds a booking service
// batch_availability_lookup endpoint payload.
func NewBatchAvailabilityLookupPayload(body *BatchAvailabilityLookupRequestBody) *booking.BatchAvailabilityLookupPayload {
	v := &booking.BatchAvailabilityLookupRequest{
		MerchantID: *body.MerchantID,
	}
	v.SlotTime = make([]*booking.SlotTime, len(body.SlotTime))
	for i, val := range body.SlotTime {
		v.SlotTime[i] = unmarshalSlotTimeRequestBodyRequestBodyToBookingSlotTime(val)
	}
	res := &booking.BatchAvailabilityLookupPayload{
		Body: v,
	}

	return res
}

// NewCheckAvailabilityPayload builds a booking service check_availability
// endpoint payload.
func NewCheckAvailabilityPayload(body *CheckAvailabilityRequestBody) *booking.CheckAvailabilityPayload {
	v := &booking.CheckAvailabilityRequest{}
	v.Slot = unmarshalSlotRequestBodyRequestBodyToBookingSlot(body.Slot)
	res := &booking.CheckAvailabilityPayload{
		Body: v,
	}

	return res
}

// NewCreateBookingPayload builds a booking service create_booking endpoint
// payload.
func NewCreateBookingPayload(body *CreateBookingRequestBody) *booking.CreateBookingPayload {
	v := &booking.CreateBookingRequest{
		IdempotencyToken:  *body.IdempotencyToken,
		AdditionalRequest: body.AdditionalRequest,
		OfferID:           body.OfferID,
		DealID:            body.DealID,
	}
	v.Slot = unmarshalSlotRequestBodyRequestBodyToBookingSlot(body.Slot)
	if body.LeaseRef != nil {
		v.LeaseRef = unmarshalLeaseReferenceRequestBodyRequestBodyToBookingLeaseReference(body.LeaseRef)
	}
	v.UserInformation = unmarshalUserInformationRequestBodyRequestBodyToBookingUserInformation(body.UserInformation)
	if body.PaymentInformation != nil {
		v.PaymentInformation = unmarshalPaymentInformationRequestBodyRequestBodyToBookingPaymentInformation(body.PaymentInformation)
	}
	if body.PaymentProcessingParameters != nil {
		v.PaymentProcessingParameters = unmarshalPaymentProcessingParametersRequestBodyRequestBodyToBookingPaymentProcessingParameters(body.PaymentProcessingParameters)
	}
	res := &booking.CreateBookingPayload{
		Body: v,
	}

	return res
}

// NewUpdateBookingPayload builds a booking service update_booking endpoint
// payload.
func NewUpdateBookingPayload(body *UpdateBookingRequestBody) *booking.UpdateBookingPayload {
	v := &booking.UpdateBookingRequest{}
	v.Booking = unmarshalBookingRequestBodyRequestBodyToBookingBooking(body.Booking)
	res := &booking.UpdateBookingPayload{
		Body: v,
	}

	return res
}

// NewGetBookingStatusPayload builds a booking service get_booking_status
// endpoint payload.
func NewGetBookingStatusPayload(body *GetBookingStatusRequestBody) *booking.GetBookingStatusPayload {
	v := &booking.GetBookingStatusRequest{
		BookingID: *body.BookingID,
	}
	res := &booking.GetBookingStatusPayload{
		Body: v,
	}

	return res
}

// NewListBookingsPayload builds a booking service list_bookings endpoint
// payload.
func NewListBookingsPayload(body *ListBookingsRequestBody) *booking.ListBookingsPayload {
	v := &booking.ListBookingsRequest{
		UserID: *body.UserID,
	}
	res := &booking.ListBookingsPayload{
		Body: v,
	}

	return res
}

// ValidateBatchAvailabilityLookupRequestBody runs the validations defined on
// batch_availability_lookup_request_body
func ValidateBatchAvailabilityLookupRequestBody(body *BatchAvailabilityLookupRequestBody) (err error) {
	if body.MerchantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("merchant_id", "body"))
	}
	if body.SlotTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot_time", "body"))
	}
	for _, e := range body.SlotTime {
		if e != nil {
			if err2 := ValidateSlotTimeRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCheckAvailabilityRequestBody runs the validations defined on
// check_availability_request_body
func ValidateCheckAvailabilityRequestBody(body *CheckAvailabilityRequestBody) (err error) {
	if body.Slot == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateBookingRequestBody runs the validations defined on
// create_booking_request_body
func ValidateCreateBookingRequestBody(body *CreateBookingRequestBody) (err error) {
	if body.Slot == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
	}
	if body.UserInformation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
	}
	if body.IdempotencyToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("idempotency_token", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.LeaseRef != nil {
		if err2 := ValidateLeaseReferenceRequestBodyRequestBody(body.LeaseRef); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UserInformation != nil {
		if err2 := ValidateUserInformationRequestBodyRequestBody(body.UserInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessingParameters != nil {
		if err2 := ValidatePaymentProcessingParametersRequestBodyRequestBody(body.PaymentProcessingParameters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateBookingRequestBody runs the validations defined on
// update_booking_request_body
func ValidateUpdateBookingRequestBody(body *UpdateBookingRequestBody) (err error) {
	if body.Booking == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking", "body"))
	}
	if body.Booking != nil {
		if err2 := ValidateBookingRequestBodyRequestBody(body.Booking); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetBookingStatusRequestBody runs the validations defined on
// get_booking_status_request_body
func ValidateGetBookingStatusRequestBody(body *GetBookingStatusRequestBody) (err error) {
	if body.BookingID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking_id", "body"))
	}
	return
}

// ValidateListBookingsRequestBody runs the validations defined on
// list_bookings_request_body
func ValidateListBookingsRequestBody(body *ListBookingsRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	return
}

// ValidateSlotTimeRequestBodyRequestBody runs the validations defined on
// SlotTimeRequestBodyRequestBody
func ValidateSlotTimeRequestBodyRequestBody(body *SlotTimeRequestBodyRequestBody) (err error) {
	if body.ServiceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_id", "body"))
	}
	if body.StartSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_sec", "body"))
	}
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateSlotRequestBodyRequestBody runs the validations defined on
// SlotRequestBodyRequestBody
func ValidateSlotRequestBodyRequestBody(body *SlotRequestBodyRequestBody) (err error) {
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateLeaseReferenceRequestBodyRequestBody runs the validations defined on
// LeaseReferenceRequestBodyRequestBody
func ValidateLeaseReferenceRequestBodyRequestBody(body *LeaseReferenceRequestBodyRequestBody) (err error) {
	if body.LeaseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lease_id", "body"))
	}
	return
}

// ValidateUserInformationRequestBodyRequestBody runs the validations defined
// on UserInformationRequestBodyRequestBody
func ValidateUserInformationRequestBodyRequestBody(body *UserInformationRequestBodyRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.GivenName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("given_name", "body"))
	}
	if body.FamilyName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("family_name", "body"))
	}
	if body.Telephone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("telephone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Address != nil {
		if err2 := ValidatePostalAddressRequestBodyRequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePostalAddressRequestBodyRequestBody runs the validations defined on
// PostalAddressRequestBodyRequestBody
func ValidatePostalAddressRequestBodyRequestBody(body *PostalAddressRequestBodyRequestBody) (err error) {
	if body.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country", "body"))
	}
	if body.Locality == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locality", "body"))
	}
	if body.PostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postal_code", "body"))
	}
	if body.StreetAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("street_address", "body"))
	}
	return
}

// ValidatePaymentInformationRequestBodyRequestBody runs the validations
// defined on PaymentInformationRequestBodyRequestBody
func ValidatePaymentInformationRequestBodyRequestBody(body *PaymentInformationRequestBodyRequestBody) (err error) {
	if body.PrepaymentStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prepayment_status", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.PaymentProcessedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processed_by", "body"))
	}
	if body.PrepaymentStatus != nil {
		if !(*body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || *body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || *body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", *body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.TaxAmount != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.TaxAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Fees != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Fees); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeesAndTaxes != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.FeesAndTaxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeRequestBodyRequestBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessedBy != nil {
		if !(*body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || *body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || *body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", *body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
		}
	}
	return
}

// ValidatePriceRequestBodyRequestBody runs the validations defined on
// PriceRequestBodyRequestBody
func ValidatePriceRequestBodyRequestBody(body *PriceRequestBodyRequestBody) (err error) {
	if body.PriceMicros == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price_micros", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_code", "body"))
	}
	return
}

// ValidateDepositRequestBodyRequestBody runs the validations defined on
// DepositRequestBodyRequestBody
func ValidateDepositRequestBodyRequestBody(body *DepositRequestBodyRequestBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if body.MinAdvanceCancellationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_advance_cancellation_sec", "body"))
	}
	if body.DepositType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit_type", "body"))
	}
	if body.Deposit != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DepositType != nil {
		if !(*body.DepositType == "FIXED_RATE_DEFAULT" || *body.DepositType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", *body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateNoShowFeeRequestBodyRequestBody runs the validations defined on
// NoShowFeeRequestBodyRequestBody
func ValidateNoShowFeeRequestBodyRequestBody(body *NoShowFeeRequestBodyRequestBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if body.FeeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_type", "body"))
	}
	if body.Fee != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Fee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeeType != nil {
		if !(*body.FeeType == "FIXED_RATE_DEFAULT" || *body.FeeType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", *body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidatePaymentProcessingParametersRequestBodyRequestBody runs the
// validations defined on PaymentProcessingParametersRequestBodyRequestBody
func ValidatePaymentProcessingParametersRequestBodyRequestBody(body *PaymentProcessingParametersRequestBodyRequestBody) (err error) {
	if body.Processor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("processor", "body"))
	}
	if body.PaymentProcessor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processor", "body"))
	}
	if body.Processor != nil {
		if !(*body.Processor == "PAYMENT_PROCESSOR_UNSPECIFIED" || *body.Processor == "PROCESSOR_STRIPE" || *body.Processor == "PROCESSOR_BRAINTREE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.processor", *body.Processor, []interface{}{"PAYMENT_PROCESSOR_UNSPECIFIED", "PROCESSOR_STRIPE", "PROCESSOR_BRAINTREE"}))
		}
	}
	if body.TokenizationConfig != nil {
		if err2 := ValidateTokenizationConfigRequestBodyRequestBody(body.TokenizationConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenizationConfigRequestBodyRequestBody runs the validations
// defined on TokenizationConfigRequestBodyRequestBody
func ValidateTokenizationConfigRequestBodyRequestBody(body *TokenizationConfigRequestBodyRequestBody) (err error) {
	if body.TokenizationParameter == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tokenization_parameter", "body"))
	}
	if body.BillingInformationFormat == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("billing_information_format", "body"))
	}
	if body.MerchantOfRecordName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("merchant_of_record_name", "body"))
	}
	if body.PaymentCountryCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_country_code", "body"))
	}
	if body.CardNetworkParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network_parameters", "body"))
	}
	if body.AllowedAuthMethods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_auth_methods", "body"))
	}
	if body.BillingInformationFormat != nil {
		if !(*body.BillingInformationFormat == "BILLING_INFORMATION_FORMAT_UNSPECIFIED" || *body.BillingInformationFormat == "MIN" || *body.BillingInformationFormat == "FULL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.billing_information_format", *body.BillingInformationFormat, []interface{}{"BILLING_INFORMATION_FORMAT_UNSPECIFIED", "MIN", "FULL"}))
		}
	}
	for _, e := range body.CardNetworkParameters {
		if e != nil {
			if err2 := ValidateCardNetworkParametersRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.AllowedAuthMethods {
		if !(e == "AUTH_METHOD_UNSPECIFIED" || e == "PAN_ONLY" || e == "CRYPTOGRAM_3DS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.allowed_auth_methods[*]", e, []interface{}{"AUTH_METHOD_UNSPECIFIED", "PAN_ONLY", "CRYPTOGRAM_3DS"}))
		}
	}
	return
}

// ValidateCardNetworkParametersRequestBodyRequestBody runs the validations
// defined on CardNetworkParametersRequestBodyRequestBody
func ValidateCardNetworkParametersRequestBodyRequestBody(body *CardNetworkParametersRequestBodyRequestBody) (err error) {
	if body.CardNetwork == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network", "body"))
	}
	if body.AcquirerBin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acquirer_bin", "body"))
	}
	if body.AcquirerMerchantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acquirer_merchant_id", "body"))
	}
	if body.CardNetwork != nil {
		if !(*body.CardNetwork == "CREDIT_CARD_TYPE_UNSPECIFIED" || *body.CardNetwork == "VISA" || *body.CardNetwork == "MASTERCARD" || *body.CardNetwork == "AMERICAN_EXPRESS" || *body.CardNetwork == "DISCOVER" || *body.CardNetwork == "JCB") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.card_network", *body.CardNetwork, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
		}
	}
	return
}

// ValidateBookingRequestBodyRequestBody runs the validations defined on
// BookingRequestBodyRequestBody
func ValidateBookingRequestBodyRequestBody(body *BookingRequestBodyRequestBody) (err error) {
	if body.BookingID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking_id", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UserInformation != nil {
		if err2 := ValidateUserInformationRequestBodyRequestBody(body.UserInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.OfferInfo != nil {
		if err2 := ValidateOfferInfoRequestBodyRequestBody(body.OfferInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOfferInfoRequestBodyRequestBody runs the validations defined on
// OfferInfoRequestBodyRequestBody
func ValidateOfferInfoRequestBodyRequestBody(body *OfferInfoRequestBodyRequestBody) (err error) {
	if body.OfferID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offer_id", "body"))
	}
	return
}
