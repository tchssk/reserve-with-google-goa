// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	booking "github.com/tchssk/reserve-with-google-goa/gen/booking"
	goahttp "goa.design/goa/v3/http"
)

// BuildBatchAvailabilityLookupRequest instantiates a HTTP request object with
// method and path set to call the "booking" service
// "batch_availability_lookup" endpoint
func (c *Client) BuildBatchAvailabilityLookupRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchAvailabilityLookupBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "batch_availability_lookup", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchAvailabilityLookupRequest returns an encoder for requests sent to
// the booking batch_availability_lookup server.
func EncodeBatchAvailabilityLookupRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.BatchAvailabilityLookupPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "batch_availability_lookup", "*booking.BatchAvailabilityLookupPayload", v)
		}
		body := NewBatchAvailabilityLookupRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "batch_availability_lookup", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeBatchAvailabilityLookupResponse returns a decoder for responses
// returned by the booking batch_availability_lookup endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeBatchAvailabilityLookupResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeBatchAvailabilityLookupResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchAvailabilityLookupResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			res := NewBatchAvailabilityLookupResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body BatchAvailabilityLookupBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body BatchAvailabilityLookupUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body BatchAvailabilityLookupForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupForbidden(&body)
		case http.StatusNotFound:
			var (
				body BatchAvailabilityLookupNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupNotFound(&body)
		case http.StatusConflict:
			var (
				body BatchAvailabilityLookupConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body BatchAvailabilityLookupTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupTooManyRequests(&body)
		case 499:
			var (
				body BatchAvailabilityLookupClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body BatchAvailabilityLookupInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body BatchAvailabilityLookupNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body BatchAvailabilityLookupServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body BatchAvailabilityLookupGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "batch_availability_lookup", err)
			}
			err = ValidateBatchAvailabilityLookupGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "batch_availability_lookup", err)
			}
			return nil, NewBatchAvailabilityLookupGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "batch_availability_lookup", resp.StatusCode, string(body))
		}
	}
}

// BuildCheckAvailabilityRequest instantiates a HTTP request object with method
// and path set to call the "booking" service "check_availability" endpoint
func (c *Client) BuildCheckAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckAvailabilityBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "check_availability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCheckAvailabilityRequest returns an encoder for requests sent to the
// booking check_availability server.
func EncodeCheckAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.CheckAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "check_availability", "*booking.CheckAvailabilityPayload", v)
		}
		body := NewCheckAvailabilityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "check_availability", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeCheckAvailabilityResponse returns a decoder for responses returned by
// the booking check_availability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCheckAvailabilityResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeCheckAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CheckAvailabilityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			res := NewCheckAvailabilityResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CheckAvailabilityBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CheckAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CheckAvailabilityForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityForbidden(&body)
		case http.StatusNotFound:
			var (
				body CheckAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityNotFound(&body)
		case http.StatusConflict:
			var (
				body CheckAvailabilityConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body CheckAvailabilityTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityTooManyRequests(&body)
		case 499:
			var (
				body CheckAvailabilityClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CheckAvailabilityInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body CheckAvailabilityNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body CheckAvailabilityServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body CheckAvailabilityGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "check_availability", err)
			}
			err = ValidateCheckAvailabilityGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "check_availability", err)
			}
			return nil, NewCheckAvailabilityGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "check_availability", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookingRequest instantiates a HTTP request object with method and
// path set to call the "booking" service "create_booking" endpoint
func (c *Client) BuildCreateBookingRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookingBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "create_booking", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookingRequest returns an encoder for requests sent to the
// booking create_booking server.
func EncodeCreateBookingRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.CreateBookingPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "create_booking", "*booking.CreateBookingPayload", v)
		}
		body := NewCreateBookingRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "create_booking", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeCreateBookingResponse returns a decoder for responses returned by the
// booking create_booking endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateBookingResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeCreateBookingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateBookingResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			res := NewCreateBookingResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBookingBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CreateBookingUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateBookingForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingForbidden(&body)
		case http.StatusNotFound:
			var (
				body CreateBookingNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateBookingConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body CreateBookingTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingTooManyRequests(&body)
		case 499:
			var (
				body CreateBookingClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateBookingInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body CreateBookingNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateBookingServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body CreateBookingGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "create_booking", err)
			}
			err = ValidateCreateBookingGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "create_booking", err)
			}
			return nil, NewCreateBookingGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "create_booking", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBookingRequest instantiates a HTTP request object with method and
// path set to call the "booking" service "update_booking" endpoint
func (c *Client) BuildUpdateBookingRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBookingBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "update_booking", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBookingRequest returns an encoder for requests sent to the
// booking update_booking server.
func EncodeUpdateBookingRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.UpdateBookingPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "update_booking", "*booking.UpdateBookingPayload", v)
		}
		body := NewUpdateBookingRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "update_booking", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeUpdateBookingResponse returns a decoder for responses returned by the
// booking update_booking endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateBookingResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeUpdateBookingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBookingResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			res := NewUpdateBookingResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBookingBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateBookingUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateBookingForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingForbidden(&body)
		case http.StatusNotFound:
			var (
				body UpdateBookingNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingNotFound(&body)
		case http.StatusConflict:
			var (
				body UpdateBookingConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body UpdateBookingTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingTooManyRequests(&body)
		case 499:
			var (
				body UpdateBookingClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateBookingInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body UpdateBookingNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateBookingServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body UpdateBookingGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "update_booking", err)
			}
			err = ValidateUpdateBookingGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "update_booking", err)
			}
			return nil, NewUpdateBookingGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "update_booking", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBookingStatusRequest instantiates a HTTP request object with method
// and path set to call the "booking" service "get_booking_status" endpoint
func (c *Client) BuildGetBookingStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBookingStatusBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "get_booking_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBookingStatusRequest returns an encoder for requests sent to the
// booking get_booking_status server.
func EncodeGetBookingStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.GetBookingStatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "get_booking_status", "*booking.GetBookingStatusPayload", v)
		}
		body := NewGetBookingStatusRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "get_booking_status", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeGetBookingStatusResponse returns a decoder for responses returned by
// the booking get_booking_status endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetBookingStatusResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeGetBookingStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBookingStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			res := NewGetBookingStatusResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBookingStatusBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body GetBookingStatusUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetBookingStatusForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusForbidden(&body)
		case http.StatusNotFound:
			var (
				body GetBookingStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusNotFound(&body)
		case http.StatusConflict:
			var (
				body GetBookingStatusConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body GetBookingStatusTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusTooManyRequests(&body)
		case 499:
			var (
				body GetBookingStatusClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetBookingStatusInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body GetBookingStatusNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetBookingStatusServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body GetBookingStatusGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "get_booking_status", err)
			}
			err = ValidateGetBookingStatusGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "get_booking_status", err)
			}
			return nil, NewGetBookingStatusGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "get_booking_status", resp.StatusCode, string(body))
		}
	}
}

// BuildListBookingsRequest instantiates a HTTP request object with method and
// path set to call the "booking" service "list_bookings" endpoint
func (c *Client) BuildListBookingsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListBookingsBookingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("booking", "list_bookings", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListBookingsRequest returns an encoder for requests sent to the
// booking list_bookings server.
func EncodeListBookingsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*booking.ListBookingsPayload)
		if !ok {
			return goahttp.ErrInvalidType("booking", "list_bookings", "*booking.ListBookingsPayload", v)
		}
		body := NewListBookingsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("booking", "list_bookings", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeListBookingsResponse returns a decoder for responses returned by the
// booking list_bookings endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListBookingsResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeListBookingsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListBookingsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			res := NewListBookingsResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBookingsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body ListBookingsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListBookingsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListBookingsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsNotFound(&body)
		case http.StatusConflict:
			var (
				body ListBookingsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body ListBookingsTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsTooManyRequests(&body)
		case 499:
			var (
				body ListBookingsClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ListBookingsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body ListBookingsNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body ListBookingsServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body ListBookingsGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("booking", "list_bookings", err)
			}
			err = ValidateListBookingsGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("booking", "list_bookings", err)
			}
			return nil, NewListBookingsGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("booking", "list_bookings", resp.StatusCode, string(body))
		}
	}
}

// marshalBookingSlotTimeToSlotTimeRequestBodyRequestBody builds a value of
// type *SlotTimeRequestBodyRequestBody from a value of type *booking.SlotTime.
func marshalBookingSlotTimeToSlotTimeRequestBodyRequestBody(v *booking.SlotTime) *SlotTimeRequestBodyRequestBody {
	res := &SlotTimeRequestBodyRequestBody{
		ServiceID:        v.ServiceID,
		StartSec:         v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.ResourceIds != nil {
		res.ResourceIds = marshalBookingResourceIdsToResourceIdsRequestBodyRequestBody(v.ResourceIds)
	}

	return res
}

// marshalBookingResourceIdsToResourceIdsRequestBodyRequestBody builds a value
// of type *ResourceIdsRequestBodyRequestBody from a value of type
// *booking.ResourceIds.
func marshalBookingResourceIdsToResourceIdsRequestBodyRequestBody(v *booking.ResourceIds) *ResourceIdsRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &ResourceIdsRequestBodyRequestBody{
		StaffID:   v.StaffID,
		RoomID:    v.RoomID,
		PartySize: v.PartySize,
	}

	return res
}

// marshalSlotTimeRequestBodyRequestBodyToBookingSlotTime builds a value of
// type *booking.SlotTime from a value of type *SlotTimeRequestBodyRequestBody.
func marshalSlotTimeRequestBodyRequestBodyToBookingSlotTime(v *SlotTimeRequestBodyRequestBody) *booking.SlotTime {
	res := &booking.SlotTime{
		ServiceID:        v.ServiceID,
		StartSec:         v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.ResourceIds != nil {
		res.ResourceIds = marshalResourceIdsRequestBodyRequestBodyToBookingResourceIds(v.ResourceIds)
	}

	return res
}

// marshalResourceIdsRequestBodyRequestBodyToBookingResourceIds builds a value
// of type *booking.ResourceIds from a value of type
// *ResourceIdsRequestBodyRequestBody.
func marshalResourceIdsRequestBodyRequestBodyToBookingResourceIds(v *ResourceIdsRequestBodyRequestBody) *booking.ResourceIds {
	if v == nil {
		return nil
	}
	res := &booking.ResourceIds{
		StaffID:   v.StaffID,
		RoomID:    v.RoomID,
		PartySize: v.PartySize,
	}

	return res
}

// unmarshalSlotTimeAvailabilityResponseBodyToBookingSlotTimeAvailability
// builds a value of type *booking.SlotTimeAvailability from a value of type
// *SlotTimeAvailabilityResponseBody.
func unmarshalSlotTimeAvailabilityResponseBodyToBookingSlotTimeAvailability(v *SlotTimeAvailabilityResponseBody) *booking.SlotTimeAvailability {
	res := &booking.SlotTimeAvailability{
		Available: *v.Available,
	}
	res.SlotTime = unmarshalSlotTimeResponseBodyToBookingSlotTime(v.SlotTime)

	return res
}

// unmarshalSlotTimeResponseBodyToBookingSlotTime builds a value of type
// *booking.SlotTime from a value of type *SlotTimeResponseBody.
func unmarshalSlotTimeResponseBodyToBookingSlotTime(v *SlotTimeResponseBody) *booking.SlotTime {
	res := &booking.SlotTime{
		ServiceID:        *v.ServiceID,
		StartSec:         *v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.ResourceIds != nil {
		res.ResourceIds = unmarshalResourceIdsResponseBodyToBookingResourceIds(v.ResourceIds)
	}

	return res
}

// unmarshalResourceIdsResponseBodyToBookingResourceIds builds a value of type
// *booking.ResourceIds from a value of type *ResourceIdsResponseBody.
func unmarshalResourceIdsResponseBodyToBookingResourceIds(v *ResourceIdsResponseBody) *booking.ResourceIds {
	if v == nil {
		return nil
	}
	res := &booking.ResourceIds{
		StaffID:   v.StaffID,
		RoomID:    v.RoomID,
		PartySize: v.PartySize,
	}

	return res
}

// marshalBookingSlotToSlotRequestBodyRequestBody builds a value of type
// *SlotRequestBodyRequestBody from a value of type *booking.Slot.
func marshalBookingSlotToSlotRequestBodyRequestBody(v *booking.Slot) *SlotRequestBodyRequestBody {
	res := &SlotRequestBodyRequestBody{
		MerchantID:       v.MerchantID,
		ServiceID:        v.ServiceID,
		StartSec:         v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.Resources != nil {
		res.Resources = marshalBookingResourceIdsToResourceIdsRequestBodyRequestBody(v.Resources)
	}

	return res
}

// marshalSlotRequestBodyRequestBodyToBookingSlot builds a value of type
// *booking.Slot from a value of type *SlotRequestBodyRequestBody.
func marshalSlotRequestBodyRequestBodyToBookingSlot(v *SlotRequestBodyRequestBody) *booking.Slot {
	res := &booking.Slot{
		MerchantID:       v.MerchantID,
		ServiceID:        v.ServiceID,
		StartSec:         v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.Resources != nil {
		res.Resources = marshalResourceIdsRequestBodyRequestBodyToBookingResourceIds(v.Resources)
	}

	return res
}

// unmarshalSlotResponseBodyToBookingSlot builds a value of type *booking.Slot
// from a value of type *SlotResponseBody.
func unmarshalSlotResponseBodyToBookingSlot(v *SlotResponseBody) *booking.Slot {
	res := &booking.Slot{
		MerchantID:       v.MerchantID,
		ServiceID:        v.ServiceID,
		StartSec:         v.StartSec,
		DurationSec:      v.DurationSec,
		AvailabilityTag:  v.AvailabilityTag,
		ConfirmationMode: v.ConfirmationMode,
	}
	if v.Resources != nil {
		res.Resources = unmarshalResourceIdsResponseBodyToBookingResourceIds(v.Resources)
	}

	return res
}

// unmarshalAvailabilityUpdateResponseBodyToBookingAvailabilityUpdate builds a
// value of type *booking.AvailabilityUpdate from a value of type
// *AvailabilityUpdateResponseBody.
func unmarshalAvailabilityUpdateResponseBodyToBookingAvailabilityUpdate(v *AvailabilityUpdateResponseBody) *booking.AvailabilityUpdate {
	if v == nil {
		return nil
	}
	res := &booking.AvailabilityUpdate{}
	res.SlotAvailability = make([]*booking.SlotAvailability, len(v.SlotAvailability))
	for i, val := range v.SlotAvailability {
		res.SlotAvailability[i] = unmarshalSlotAvailabilityResponseBodyToBookingSlotAvailability(val)
	}

	return res
}

// unmarshalSlotAvailabilityResponseBodyToBookingSlotAvailability builds a
// value of type *booking.SlotAvailability from a value of type
// *SlotAvailabilityResponseBody.
func unmarshalSlotAvailabilityResponseBodyToBookingSlotAvailability(v *SlotAvailabilityResponseBody) *booking.SlotAvailability {
	res := &booking.SlotAvailability{
		CountAvailable: *v.CountAvailable,
	}
	res.Slot = unmarshalSlotResponseBodyToBookingSlot(v.Slot)

	return res
}

// marshalBookingLeaseReferenceToLeaseReferenceRequestBodyRequestBody builds a
// value of type *LeaseReferenceRequestBodyRequestBody from a value of type
// *booking.LeaseReference.
func marshalBookingLeaseReferenceToLeaseReferenceRequestBodyRequestBody(v *booking.LeaseReference) *LeaseReferenceRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &LeaseReferenceRequestBodyRequestBody{
		LeaseID: v.LeaseID,
	}

	return res
}

// marshalBookingUserInformationToUserInformationRequestBodyRequestBody builds
// a value of type *UserInformationRequestBodyRequestBody from a value of type
// *booking.UserInformation.
func marshalBookingUserInformationToUserInformationRequestBodyRequestBody(v *booking.UserInformation) *UserInformationRequestBodyRequestBody {
	res := &UserInformationRequestBodyRequestBody{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalBookingPostalAddressToPostalAddressRequestBodyRequestBody(v.Address)
	}

	return res
}

// marshalBookingPostalAddressToPostalAddressRequestBodyRequestBody builds a
// value of type *PostalAddressRequestBodyRequestBody from a value of type
// *booking.PostalAddress.
func marshalBookingPostalAddressToPostalAddressRequestBodyRequestBody(v *booking.PostalAddress) *PostalAddressRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PostalAddressRequestBodyRequestBody{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalBookingPaymentInformationToPaymentInformationRequestBodyRequestBody
// builds a value of type *PaymentInformationRequestBodyRequestBody from a
// value of type *booking.PaymentInformation.
func marshalBookingPaymentInformationToPaymentInformationRequestBodyRequestBody(v *booking.PaymentInformation) *PaymentInformationRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PaymentInformationRequestBodyRequestBody{
		PrepaymentStatus:     v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	if v.Price != nil {
		res.Price = marshalBookingPriceToPriceRequestBodyRequestBody(v.Price)
	}
	if v.TaxAmount != nil {
		res.TaxAmount = marshalBookingPriceToPriceRequestBodyRequestBody(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = marshalBookingPriceToPriceRequestBodyRequestBody(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = marshalBookingPriceToPriceRequestBodyRequestBody(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = marshalBookingDepositToDepositRequestBodyRequestBody(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = marshalBookingNoShowFeeToNoShowFeeRequestBodyRequestBody(v.NoShowFee)
	}

	return res
}

// marshalBookingPriceToPriceRequestBodyRequestBody builds a value of type
// *PriceRequestBodyRequestBody from a value of type *booking.Price.
func marshalBookingPriceToPriceRequestBodyRequestBody(v *booking.Price) *PriceRequestBodyRequestBody {
	res := &PriceRequestBodyRequestBody{
		PriceMicros:      v.PriceMicros,
		CurrencyCode:     v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// marshalBookingDepositToDepositRequestBodyRequestBody builds a value of type
// *DepositRequestBodyRequestBody from a value of type *booking.Deposit.
func marshalBookingDepositToDepositRequestBodyRequestBody(v *booking.Deposit) *DepositRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &DepositRequestBodyRequestBody{
		MinAdvanceCancellationSec: v.MinAdvanceCancellationSec,
		DepositType:               v.DepositType,
	}
	if v.Deposit != nil {
		res.Deposit = marshalBookingPriceToPriceRequestBodyRequestBody(v.Deposit)
	}

	return res
}

// marshalBookingNoShowFeeToNoShowFeeRequestBodyRequestBody builds a value of
// type *NoShowFeeRequestBodyRequestBody from a value of type
// *booking.NoShowFee.
func marshalBookingNoShowFeeToNoShowFeeRequestBodyRequestBody(v *booking.NoShowFee) *NoShowFeeRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &NoShowFeeRequestBodyRequestBody{
		FeeType: v.FeeType,
	}
	if v.Fee != nil {
		res.Fee = marshalBookingPriceToPriceRequestBodyRequestBody(v.Fee)
	}

	return res
}

// marshalBookingPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody
// builds a value of type *PaymentProcessingParametersRequestBodyRequestBody
// from a value of type *booking.PaymentProcessingParameters.
func marshalBookingPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody(v *booking.PaymentProcessingParameters) *PaymentProcessingParametersRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PaymentProcessingParametersRequestBodyRequestBody{
		Processor:                  v.Processor,
		PaymentMethodToken:         v.PaymentMethodToken,
		UnparsedPaymentMethodToken: v.UnparsedPaymentMethodToken,
		Version:                    v.Version,
		PaymentProcessor:           v.PaymentProcessor,
	}
	if v.TokenizationConfig != nil {
		res.TokenizationConfig = marshalBookingTokenizationConfigToTokenizationConfigRequestBodyRequestBody(v.TokenizationConfig)
	}

	return res
}

// marshalBookingTokenizationConfigToTokenizationConfigRequestBodyRequestBody
// builds a value of type *TokenizationConfigRequestBodyRequestBody from a
// value of type *booking.TokenizationConfig.
func marshalBookingTokenizationConfigToTokenizationConfigRequestBodyRequestBody(v *booking.TokenizationConfig) *TokenizationConfigRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &TokenizationConfigRequestBodyRequestBody{
		BillingInformationFormat: v.BillingInformationFormat,
		MerchantOfRecordName:     v.MerchantOfRecordName,
		PaymentCountryCode:       v.PaymentCountryCode,
	}
	if v.TokenizationParameter != nil {
		res.TokenizationParameter = make(map[string]string, len(v.TokenizationParameter))
		for key, val := range v.TokenizationParameter {
			tk := key
			tv := val
			res.TokenizationParameter[tk] = tv
		}
	}
	if v.CardNetworkParameters != nil {
		res.CardNetworkParameters = make([]*CardNetworkParametersRequestBodyRequestBody, len(v.CardNetworkParameters))
		for i, val := range v.CardNetworkParameters {
			res.CardNetworkParameters[i] = marshalBookingCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody(val)
		}
	}
	if v.AllowedAuthMethods != nil {
		res.AllowedAuthMethods = make([]string, len(v.AllowedAuthMethods))
		for i, val := range v.AllowedAuthMethods {
			res.AllowedAuthMethods[i] = val
		}
	}

	return res
}

// marshalBookingCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody
// builds a value of type *CardNetworkParametersRequestBodyRequestBody from a
// value of type *booking.CardNetworkParameters.
func marshalBookingCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody(v *booking.CardNetworkParameters) *CardNetworkParametersRequestBodyRequestBody {
	res := &CardNetworkParametersRequestBodyRequestBody{
		CardNetwork:        v.CardNetwork,
		AcquirerBin:        v.AcquirerBin,
		AcquirerMerchantID: v.AcquirerMerchantID,
	}

	return res
}

// marshalLeaseReferenceRequestBodyRequestBodyToBookingLeaseReference builds a
// value of type *booking.LeaseReference from a value of type
// *LeaseReferenceRequestBodyRequestBody.
func marshalLeaseReferenceRequestBodyRequestBodyToBookingLeaseReference(v *LeaseReferenceRequestBodyRequestBody) *booking.LeaseReference {
	if v == nil {
		return nil
	}
	res := &booking.LeaseReference{
		LeaseID: v.LeaseID,
	}

	return res
}

// marshalUserInformationRequestBodyRequestBodyToBookingUserInformation builds
// a value of type *booking.UserInformation from a value of type
// *UserInformationRequestBodyRequestBody.
func marshalUserInformationRequestBodyRequestBodyToBookingUserInformation(v *UserInformationRequestBodyRequestBody) *booking.UserInformation {
	res := &booking.UserInformation{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalPostalAddressRequestBodyRequestBodyToBookingPostalAddress(v.Address)
	}

	return res
}

// marshalPostalAddressRequestBodyRequestBodyToBookingPostalAddress builds a
// value of type *booking.PostalAddress from a value of type
// *PostalAddressRequestBodyRequestBody.
func marshalPostalAddressRequestBodyRequestBodyToBookingPostalAddress(v *PostalAddressRequestBodyRequestBody) *booking.PostalAddress {
	if v == nil {
		return nil
	}
	res := &booking.PostalAddress{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalPaymentInformationRequestBodyRequestBodyToBookingPaymentInformation
// builds a value of type *booking.PaymentInformation from a value of type
// *PaymentInformationRequestBodyRequestBody.
func marshalPaymentInformationRequestBodyRequestBodyToBookingPaymentInformation(v *PaymentInformationRequestBodyRequestBody) *booking.PaymentInformation {
	if v == nil {
		return nil
	}
	res := &booking.PaymentInformation{
		PrepaymentStatus:     v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	if v.Price != nil {
		res.Price = marshalPriceRequestBodyRequestBodyToBookingPrice(v.Price)
	}
	if v.TaxAmount != nil {
		res.TaxAmount = marshalPriceRequestBodyRequestBodyToBookingPrice(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = marshalPriceRequestBodyRequestBodyToBookingPrice(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = marshalPriceRequestBodyRequestBodyToBookingPrice(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = marshalDepositRequestBodyRequestBodyToBookingDeposit(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = marshalNoShowFeeRequestBodyRequestBodyToBookingNoShowFee(v.NoShowFee)
	}

	return res
}

// marshalPriceRequestBodyRequestBodyToBookingPrice builds a value of type
// *booking.Price from a value of type *PriceRequestBodyRequestBody.
func marshalPriceRequestBodyRequestBodyToBookingPrice(v *PriceRequestBodyRequestBody) *booking.Price {
	res := &booking.Price{
		PriceMicros:      v.PriceMicros,
		CurrencyCode:     v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// marshalDepositRequestBodyRequestBodyToBookingDeposit builds a value of type
// *booking.Deposit from a value of type *DepositRequestBodyRequestBody.
func marshalDepositRequestBodyRequestBodyToBookingDeposit(v *DepositRequestBodyRequestBody) *booking.Deposit {
	if v == nil {
		return nil
	}
	res := &booking.Deposit{
		MinAdvanceCancellationSec: v.MinAdvanceCancellationSec,
		DepositType:               v.DepositType,
	}
	if v.Deposit != nil {
		res.Deposit = marshalPriceRequestBodyRequestBodyToBookingPrice(v.Deposit)
	}

	return res
}

// marshalNoShowFeeRequestBodyRequestBodyToBookingNoShowFee builds a value of
// type *booking.NoShowFee from a value of type
// *NoShowFeeRequestBodyRequestBody.
func marshalNoShowFeeRequestBodyRequestBodyToBookingNoShowFee(v *NoShowFeeRequestBodyRequestBody) *booking.NoShowFee {
	if v == nil {
		return nil
	}
	res := &booking.NoShowFee{
		FeeType: v.FeeType,
	}
	if v.Fee != nil {
		res.Fee = marshalPriceRequestBodyRequestBodyToBookingPrice(v.Fee)
	}

	return res
}

// marshalPaymentProcessingParametersRequestBodyRequestBodyToBookingPaymentProcessingParameters
// builds a value of type *booking.PaymentProcessingParameters from a value of
// type *PaymentProcessingParametersRequestBodyRequestBody.
func marshalPaymentProcessingParametersRequestBodyRequestBodyToBookingPaymentProcessingParameters(v *PaymentProcessingParametersRequestBodyRequestBody) *booking.PaymentProcessingParameters {
	if v == nil {
		return nil
	}
	res := &booking.PaymentProcessingParameters{
		Processor:                  v.Processor,
		PaymentMethodToken:         v.PaymentMethodToken,
		UnparsedPaymentMethodToken: v.UnparsedPaymentMethodToken,
		Version:                    v.Version,
		PaymentProcessor:           v.PaymentProcessor,
	}
	if v.TokenizationConfig != nil {
		res.TokenizationConfig = marshalTokenizationConfigRequestBodyRequestBodyToBookingTokenizationConfig(v.TokenizationConfig)
	}

	return res
}

// marshalTokenizationConfigRequestBodyRequestBodyToBookingTokenizationConfig
// builds a value of type *booking.TokenizationConfig from a value of type
// *TokenizationConfigRequestBodyRequestBody.
func marshalTokenizationConfigRequestBodyRequestBodyToBookingTokenizationConfig(v *TokenizationConfigRequestBodyRequestBody) *booking.TokenizationConfig {
	if v == nil {
		return nil
	}
	res := &booking.TokenizationConfig{
		BillingInformationFormat: v.BillingInformationFormat,
		MerchantOfRecordName:     v.MerchantOfRecordName,
		PaymentCountryCode:       v.PaymentCountryCode,
	}
	if v.TokenizationParameter != nil {
		res.TokenizationParameter = make(map[string]string, len(v.TokenizationParameter))
		for key, val := range v.TokenizationParameter {
			tk := key
			tv := val
			res.TokenizationParameter[tk] = tv
		}
	}
	if v.CardNetworkParameters != nil {
		res.CardNetworkParameters = make([]*booking.CardNetworkParameters, len(v.CardNetworkParameters))
		for i, val := range v.CardNetworkParameters {
			res.CardNetworkParameters[i] = marshalCardNetworkParametersRequestBodyRequestBodyToBookingCardNetworkParameters(val)
		}
	}
	if v.AllowedAuthMethods != nil {
		res.AllowedAuthMethods = make([]string, len(v.AllowedAuthMethods))
		for i, val := range v.AllowedAuthMethods {
			res.AllowedAuthMethods[i] = val
		}
	}

	return res
}

// marshalCardNetworkParametersRequestBodyRequestBodyToBookingCardNetworkParameters
// builds a value of type *booking.CardNetworkParameters from a value of type
// *CardNetworkParametersRequestBodyRequestBody.
func marshalCardNetworkParametersRequestBodyRequestBodyToBookingCardNetworkParameters(v *CardNetworkParametersRequestBodyRequestBody) *booking.CardNetworkParameters {
	res := &booking.CardNetworkParameters{
		CardNetwork:        v.CardNetwork,
		AcquirerBin:        v.AcquirerBin,
		AcquirerMerchantID: v.AcquirerMerchantID,
	}

	return res
}

// unmarshalBookingResponseBodyToBookingBooking builds a value of type
// *booking.Booking from a value of type *BookingResponseBody.
func unmarshalBookingResponseBodyToBookingBooking(v *BookingResponseBody) *booking.Booking {
	res := &booking.Booking{
		BookingID: *v.BookingID,
		Status:    v.Status,
	}
	if v.Slot != nil {
		res.Slot = unmarshalSlotResponseBodyToBookingSlot(v.Slot)
	}
	if v.UserInformation != nil {
		res.UserInformation = unmarshalUserInformationResponseBodyToBookingUserInformation(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = unmarshalPaymentInformationResponseBodyToBookingPaymentInformation(v.PaymentInformation)
	}
	if v.VirtualSessionInfo != nil {
		res.VirtualSessionInfo = unmarshalVirtualSessionInfoResponseBodyToBookingVirtualSessionInfo(v.VirtualSessionInfo)
	}
	if v.OfferInfo != nil {
		res.OfferInfo = unmarshalOfferInfoResponseBodyToBookingOfferInfo(v.OfferInfo)
	}

	return res
}

// unmarshalUserInformationResponseBodyToBookingUserInformation builds a value
// of type *booking.UserInformation from a value of type
// *UserInformationResponseBody.
func unmarshalUserInformationResponseBodyToBookingUserInformation(v *UserInformationResponseBody) *booking.UserInformation {
	if v == nil {
		return nil
	}
	res := &booking.UserInformation{
		UserID:       *v.UserID,
		GivenName:    *v.GivenName,
		FamilyName:   *v.FamilyName,
		Telephone:    *v.Telephone,
		Email:        *v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = unmarshalPostalAddressResponseBodyToBookingPostalAddress(v.Address)
	}

	return res
}

// unmarshalPostalAddressResponseBodyToBookingPostalAddress builds a value of
// type *booking.PostalAddress from a value of type *PostalAddressResponseBody.
func unmarshalPostalAddressResponseBodyToBookingPostalAddress(v *PostalAddressResponseBody) *booking.PostalAddress {
	if v == nil {
		return nil
	}
	res := &booking.PostalAddress{
		Country:       *v.Country,
		Locality:      *v.Locality,
		Region:        v.Region,
		PostalCode:    *v.PostalCode,
		StreetAddress: *v.StreetAddress,
	}

	return res
}

// unmarshalPaymentInformationResponseBodyToBookingPaymentInformation builds a
// value of type *booking.PaymentInformation from a value of type
// *PaymentInformationResponseBody.
func unmarshalPaymentInformationResponseBodyToBookingPaymentInformation(v *PaymentInformationResponseBody) *booking.PaymentInformation {
	if v == nil {
		return nil
	}
	res := &booking.PaymentInformation{
		PrepaymentStatus:     *v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   *v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	res.Price = unmarshalPriceResponseBodyToBookingPrice(v.Price)
	if v.TaxAmount != nil {
		res.TaxAmount = unmarshalPriceResponseBodyToBookingPrice(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = unmarshalPriceResponseBodyToBookingPrice(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = unmarshalPriceResponseBodyToBookingPrice(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = unmarshalDepositResponseBodyToBookingDeposit(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = unmarshalNoShowFeeResponseBodyToBookingNoShowFee(v.NoShowFee)
	}

	return res
}

// unmarshalPriceResponseBodyToBookingPrice builds a value of type
// *booking.Price from a value of type *PriceResponseBody.
func unmarshalPriceResponseBodyToBookingPrice(v *PriceResponseBody) *booking.Price {
	res := &booking.Price{
		PriceMicros:      *v.PriceMicros,
		CurrencyCode:     *v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// unmarshalDepositResponseBodyToBookingDeposit builds a value of type
// *booking.Deposit from a value of type *DepositResponseBody.
func unmarshalDepositResponseBodyToBookingDeposit(v *DepositResponseBody) *booking.Deposit {
	if v == nil {
		return nil
	}
	res := &booking.Deposit{
		MinAdvanceCancellationSec: *v.MinAdvanceCancellationSec,
		DepositType:               *v.DepositType,
	}
	res.Deposit = unmarshalPriceResponseBodyToBookingPrice(v.Deposit)

	return res
}

// unmarshalNoShowFeeResponseBodyToBookingNoShowFee builds a value of type
// *booking.NoShowFee from a value of type *NoShowFeeResponseBody.
func unmarshalNoShowFeeResponseBodyToBookingNoShowFee(v *NoShowFeeResponseBody) *booking.NoShowFee {
	if v == nil {
		return nil
	}
	res := &booking.NoShowFee{
		FeeType: *v.FeeType,
	}
	res.Fee = unmarshalPriceResponseBodyToBookingPrice(v.Fee)

	return res
}

// unmarshalVirtualSessionInfoResponseBodyToBookingVirtualSessionInfo builds a
// value of type *booking.VirtualSessionInfo from a value of type
// *VirtualSessionInfoResponseBody.
func unmarshalVirtualSessionInfoResponseBodyToBookingVirtualSessionInfo(v *VirtualSessionInfoResponseBody) *booking.VirtualSessionInfo {
	if v == nil {
		return nil
	}
	res := &booking.VirtualSessionInfo{
		SessionURL: v.SessionURL,
		MeetingID:  v.MeetingID,
		Password:   v.Password,
	}

	return res
}

// unmarshalOfferInfoResponseBodyToBookingOfferInfo builds a value of type
// *booking.OfferInfo from a value of type *OfferInfoResponseBody.
func unmarshalOfferInfoResponseBodyToBookingOfferInfo(v *OfferInfoResponseBody) *booking.OfferInfo {
	if v == nil {
		return nil
	}
	res := &booking.OfferInfo{
		OfferID: *v.OfferID,
	}

	return res
}

// unmarshalUserPaymentOptionResponseBodyToBookingUserPaymentOption builds a
// value of type *booking.UserPaymentOption from a value of type
// *UserPaymentOptionResponseBody.
func unmarshalUserPaymentOptionResponseBodyToBookingUserPaymentOption(v *UserPaymentOptionResponseBody) *booking.UserPaymentOption {
	if v == nil {
		return nil
	}
	res := &booking.UserPaymentOption{
		UserPaymentOptionID: *v.UserPaymentOptionID,
		ValidStartTimeSec:   v.ValidStartTimeSec,
		ValidEndTimeSec:     v.ValidEndTimeSec,
		Type:                *v.Type,
		OriginalCount:       *v.OriginalCount,
		CurrentCount:        *v.CurrentCount,
		PaymentOptionID:     *v.PaymentOptionID,
	}

	return res
}

// unmarshalBookingFailureResponseBodyToBookingBookingFailure builds a value of
// type *booking.BookingFailure from a value of type
// *BookingFailureResponseBody.
func unmarshalBookingFailureResponseBodyToBookingBookingFailure(v *BookingFailureResponseBody) *booking.BookingFailure {
	if v == nil {
		return nil
	}
	res := &booking.BookingFailure{
		Cause:            *v.Cause,
		RejectedCardType: v.RejectedCardType,
		Description:      v.Description,
	}
	if v.PaymentFailure != nil {
		res.PaymentFailure = unmarshalPaymentFailureInformationResponseBodyToBookingPaymentFailureInformation(v.PaymentFailure)
	}

	return res
}

// unmarshalPaymentFailureInformationResponseBodyToBookingPaymentFailureInformation
// builds a value of type *booking.PaymentFailureInformation from a value of
// type *PaymentFailureInformationResponseBody.
func unmarshalPaymentFailureInformationResponseBodyToBookingPaymentFailureInformation(v *PaymentFailureInformationResponseBody) *booking.PaymentFailureInformation {
	if v == nil {
		return nil
	}
	res := &booking.PaymentFailureInformation{}
	res.Threeds1Parameters = unmarshalThreeDS1ParametersResponseBodyToBookingThreeDS1Parameters(v.Threeds1Parameters)

	return res
}

// unmarshalThreeDS1ParametersResponseBodyToBookingThreeDS1Parameters builds a
// value of type *booking.ThreeDS1Parameters from a value of type
// *ThreeDS1ParametersResponseBody.
func unmarshalThreeDS1ParametersResponseBodyToBookingThreeDS1Parameters(v *ThreeDS1ParametersResponseBody) *booking.ThreeDS1Parameters {
	res := &booking.ThreeDS1Parameters{
		AcsURL:         *v.AcsURL,
		PaReq:          *v.PaReq,
		TransactionID:  *v.TransactionID,
		MdMerchantData: *v.MdMerchantData,
	}

	return res
}

// marshalBookingBookingToBookingRequestBodyRequestBody builds a value of type
// *BookingRequestBodyRequestBody from a value of type *booking.Booking.
func marshalBookingBookingToBookingRequestBodyRequestBody(v *booking.Booking) *BookingRequestBodyRequestBody {
	res := &BookingRequestBodyRequestBody{
		BookingID: v.BookingID,
		Status:    v.Status,
	}
	if v.Slot != nil {
		res.Slot = marshalBookingSlotToSlotRequestBodyRequestBody(v.Slot)
	}
	if v.UserInformation != nil {
		res.UserInformation = marshalBookingUserInformationToUserInformationRequestBodyRequestBody(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = marshalBookingPaymentInformationToPaymentInformationRequestBodyRequestBody(v.PaymentInformation)
	}
	if v.VirtualSessionInfo != nil {
		res.VirtualSessionInfo = marshalBookingVirtualSessionInfoToVirtualSessionInfoRequestBodyRequestBody(v.VirtualSessionInfo)
	}
	if v.OfferInfo != nil {
		res.OfferInfo = marshalBookingOfferInfoToOfferInfoRequestBodyRequestBody(v.OfferInfo)
	}

	return res
}

// marshalBookingVirtualSessionInfoToVirtualSessionInfoRequestBodyRequestBody
// builds a value of type *VirtualSessionInfoRequestBodyRequestBody from a
// value of type *booking.VirtualSessionInfo.
func marshalBookingVirtualSessionInfoToVirtualSessionInfoRequestBodyRequestBody(v *booking.VirtualSessionInfo) *VirtualSessionInfoRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &VirtualSessionInfoRequestBodyRequestBody{
		SessionURL: v.SessionURL,
		MeetingID:  v.MeetingID,
		Password:   v.Password,
	}

	return res
}

// marshalBookingOfferInfoToOfferInfoRequestBodyRequestBody builds a value of
// type *OfferInfoRequestBodyRequestBody from a value of type
// *booking.OfferInfo.
func marshalBookingOfferInfoToOfferInfoRequestBodyRequestBody(v *booking.OfferInfo) *OfferInfoRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &OfferInfoRequestBodyRequestBody{
		OfferID: v.OfferID,
	}

	return res
}

// marshalBookingRequestBodyRequestBodyToBookingBooking builds a value of type
// *booking.Booking from a value of type *BookingRequestBodyRequestBody.
func marshalBookingRequestBodyRequestBodyToBookingBooking(v *BookingRequestBodyRequestBody) *booking.Booking {
	res := &booking.Booking{
		BookingID: v.BookingID,
		Status:    v.Status,
	}
	if v.Slot != nil {
		res.Slot = marshalSlotRequestBodyRequestBodyToBookingSlot(v.Slot)
	}
	if v.UserInformation != nil {
		res.UserInformation = marshalUserInformationRequestBodyRequestBodyToBookingUserInformation(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = marshalPaymentInformationRequestBodyRequestBodyToBookingPaymentInformation(v.PaymentInformation)
	}
	if v.VirtualSessionInfo != nil {
		res.VirtualSessionInfo = marshalVirtualSessionInfoRequestBodyRequestBodyToBookingVirtualSessionInfo(v.VirtualSessionInfo)
	}
	if v.OfferInfo != nil {
		res.OfferInfo = marshalOfferInfoRequestBodyRequestBodyToBookingOfferInfo(v.OfferInfo)
	}

	return res
}

// marshalVirtualSessionInfoRequestBodyRequestBodyToBookingVirtualSessionInfo
// builds a value of type *booking.VirtualSessionInfo from a value of type
// *VirtualSessionInfoRequestBodyRequestBody.
func marshalVirtualSessionInfoRequestBodyRequestBodyToBookingVirtualSessionInfo(v *VirtualSessionInfoRequestBodyRequestBody) *booking.VirtualSessionInfo {
	if v == nil {
		return nil
	}
	res := &booking.VirtualSessionInfo{
		SessionURL: v.SessionURL,
		MeetingID:  v.MeetingID,
		Password:   v.Password,
	}

	return res
}

// marshalOfferInfoRequestBodyRequestBodyToBookingOfferInfo builds a value of
// type *booking.OfferInfo from a value of type
// *OfferInfoRequestBodyRequestBody.
func marshalOfferInfoRequestBodyRequestBodyToBookingOfferInfo(v *OfferInfoRequestBodyRequestBody) *booking.OfferInfo {
	if v == nil {
		return nil
	}
	res := &booking.OfferInfo{
		OfferID: v.OfferID,
	}

	return res
}
