// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking client HTTP transport
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the booking service endpoint HTTP clients.
type Client struct {
	// BatchAvailabilityLookup Doer is the HTTP client used to make requests to the
	// batch_availability_lookup endpoint.
	BatchAvailabilityLookupDoer goahttp.Doer

	// CheckAvailability Doer is the HTTP client used to make requests to the
	// check_availability endpoint.
	CheckAvailabilityDoer goahttp.Doer

	// CreateBooking Doer is the HTTP client used to make requests to the
	// create_booking endpoint.
	CreateBookingDoer goahttp.Doer

	// UpdateBooking Doer is the HTTP client used to make requests to the
	// update_booking endpoint.
	UpdateBookingDoer goahttp.Doer

	// GetBookingStatus Doer is the HTTP client used to make requests to the
	// get_booking_status endpoint.
	GetBookingStatusDoer goahttp.Doer

	// ListBookings Doer is the HTTP client used to make requests to the
	// list_bookings endpoint.
	ListBookingsDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the booking service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		BatchAvailabilityLookupDoer: doer,
		CheckAvailabilityDoer:       doer,
		CreateBookingDoer:           doer,
		UpdateBookingDoer:           doer,
		GetBookingStatusDoer:        doer,
		ListBookingsDoer:            doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// BatchAvailabilityLookup returns an endpoint that makes HTTP requests to the
// booking service batch_availability_lookup server.
func (c *Client) BatchAvailabilityLookup() goa.Endpoint {
	var (
		encodeRequest  = EncodeBatchAvailabilityLookupRequest(c.encoder)
		decodeResponse = DecodeBatchAvailabilityLookupResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBatchAvailabilityLookupRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BatchAvailabilityLookupDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "batch_availability_lookup", err)
		}
		return decodeResponse(resp)
	}
}

// CheckAvailability returns an endpoint that makes HTTP requests to the
// booking service check_availability server.
func (c *Client) CheckAvailability() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckAvailabilityRequest(c.encoder)
		decodeResponse = DecodeCheckAvailabilityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCheckAvailabilityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckAvailabilityDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "check_availability", err)
		}
		return decodeResponse(resp)
	}
}

// CreateBooking returns an endpoint that makes HTTP requests to the booking
// service create_booking server.
func (c *Client) CreateBooking() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateBookingRequest(c.encoder)
		decodeResponse = DecodeCreateBookingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateBookingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateBookingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "create_booking", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateBooking returns an endpoint that makes HTTP requests to the booking
// service update_booking server.
func (c *Client) UpdateBooking() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateBookingRequest(c.encoder)
		decodeResponse = DecodeUpdateBookingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateBookingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateBookingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "update_booking", err)
		}
		return decodeResponse(resp)
	}
}

// GetBookingStatus returns an endpoint that makes HTTP requests to the booking
// service get_booking_status server.
func (c *Client) GetBookingStatus() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetBookingStatusRequest(c.encoder)
		decodeResponse = DecodeGetBookingStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetBookingStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetBookingStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "get_booking_status", err)
		}
		return decodeResponse(resp)
	}
}

// ListBookings returns an endpoint that makes HTTP requests to the booking
// service list_bookings server.
func (c *Client) ListBookings() goa.Endpoint {
	var (
		encodeRequest  = EncodeListBookingsRequest(c.encoder)
		decodeResponse = DecodeListBookingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListBookingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListBookingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("booking", "list_bookings", err)
		}
		return decodeResponse(resp)
	}
}
