// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"encoding/json"
	"fmt"

	booking "github.com/tchssk/reserve-with-google-goa/gen/booking"
	goa "goa.design/goa/v3/pkg"
)

// BuildBatchAvailabilityLookupPayload builds the payload for the booking
// batch_availability_lookup endpoint from CLI flags.
func BuildBatchAvailabilityLookupPayload(bookingBatchAvailabilityLookupBody string, bookingBatchAvailabilityLookupUsername string, bookingBatchAvailabilityLookupPassword string) (*booking.BatchAvailabilityLookupPayload, error) {
	var err error
	var body BatchAvailabilityLookupRequestBody
	{
		err = json.Unmarshal([]byte(bookingBatchAvailabilityLookupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"merchant_id\": \"Ipsa incidunt non tempora deleniti ipsa et.\",\n      \"slot_time\": [\n         {\n            \"availability_tag\": \"Accusamus aspernatur labore at quo.\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_UNSPECIFIED\",\n            \"duration_sec\": 8435747200459079087,\n            \"resource_ids\": {\n               \"party_size\": 1294063121,\n               \"room_id\": \"Quia et ea rerum est expedita.\",\n               \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n            },\n            \"service_id\": \"Ex soluta aut veritatis soluta quod.\",\n            \"start_sec\": 5917608252949059848\n         },\n         {\n            \"availability_tag\": \"Accusamus aspernatur labore at quo.\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_UNSPECIFIED\",\n            \"duration_sec\": 8435747200459079087,\n            \"resource_ids\": {\n               \"party_size\": 1294063121,\n               \"room_id\": \"Quia et ea rerum est expedita.\",\n               \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n            },\n            \"service_id\": \"Ex soluta aut veritatis soluta quod.\",\n            \"start_sec\": 5917608252949059848\n         },\n         {\n            \"availability_tag\": \"Accusamus aspernatur labore at quo.\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_UNSPECIFIED\",\n            \"duration_sec\": 8435747200459079087,\n            \"resource_ids\": {\n               \"party_size\": 1294063121,\n               \"room_id\": \"Quia et ea rerum est expedita.\",\n               \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n            },\n            \"service_id\": \"Ex soluta aut veritatis soluta quod.\",\n            \"start_sec\": 5917608252949059848\n         },\n         {\n            \"availability_tag\": \"Accusamus aspernatur labore at quo.\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_UNSPECIFIED\",\n            \"duration_sec\": 8435747200459079087,\n            \"resource_ids\": {\n               \"party_size\": 1294063121,\n               \"room_id\": \"Quia et ea rerum est expedita.\",\n               \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n            },\n            \"service_id\": \"Ex soluta aut veritatis soluta quod.\",\n            \"start_sec\": 5917608252949059848\n         }\n      ]\n   }'")
		}
		if body.SlotTime == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("slot_time", "body"))
		}
		for _, e := range body.SlotTime {
			if e != nil {
				if err2 := ValidateSlotTimeRequestBodyRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = bookingBatchAvailabilityLookupUsername
	}
	var password string
	{
		password = bookingBatchAvailabilityLookupPassword
	}
	v := &booking.BatchAvailabilityLookupRequest{
		MerchantID: body.MerchantID,
	}
	if body.SlotTime != nil {
		v.SlotTime = make([]*booking.SlotTime, len(body.SlotTime))
		for i, val := range body.SlotTime {
			v.SlotTime[i] = marshalSlotTimeRequestBodyRequestBodyToBookingSlotTime(val)
		}
	}
	res := &booking.BatchAvailabilityLookupPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildCheckAvailabilityPayload builds the payload for the booking
// check_availability endpoint from CLI flags.
func BuildCheckAvailabilityPayload(bookingCheckAvailabilityBody string, bookingCheckAvailabilityUsername string, bookingCheckAvailabilityPassword string) (*booking.CheckAvailabilityPayload, error) {
	var err error
	var body CheckAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(bookingCheckAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"slot\": {\n         \"availability_tag\": \"Ratione fugiat.\",\n         \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n         \"duration_sec\": 8817681372972889417,\n         \"merchant_id\": \"Et quia voluptates.\",\n         \"resources\": {\n            \"party_size\": 1294063121,\n            \"room_id\": \"Quia et ea rerum est expedita.\",\n            \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n         },\n         \"service_id\": \"Nulla praesentium et non omnis modi.\",\n         \"start_sec\": 2392541444029039475\n      }\n   }'")
		}
		if body.Slot == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
		}
		if body.Slot != nil {
			if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = bookingCheckAvailabilityUsername
	}
	var password string
	{
		password = bookingCheckAvailabilityPassword
	}
	v := &booking.CheckAvailabilityRequest{}
	if body.Slot != nil {
		v.Slot = marshalSlotRequestBodyRequestBodyToBookingSlot(body.Slot)
	}
	res := &booking.CheckAvailabilityPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildCreateBookingPayload builds the payload for the booking create_booking
// endpoint from CLI flags.
func BuildCreateBookingPayload(bookingCreateBookingBody string, bookingCreateBookingUsername string, bookingCreateBookingPassword string) (*booking.CreateBookingPayload, error) {
	var err error
	var body CreateBookingRequestBody
	{
		err = json.Unmarshal([]byte(bookingCreateBookingBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"additional_request\": \"Est officiis sunt praesentium molestias excepturi.\",\n      \"deal_id\": \"Atque adipisci quibusdam.\",\n      \"idempotency_token\": \"Suscipit recusandae quasi porro maiores laborum.\",\n      \"lease_ref\": {\n         \"lease_id\": \"Sit dolores.\"\n      },\n      \"offer_id\": \"Voluptatem consectetur at repellat quo.\",\n      \"payment_information\": {\n         \"deposit\": {\n            \"deposit\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"deposit_type\": \"FIXED_RATE_DEFAULT\",\n            \"min_advance_cancellation_sec\": 2682111425714885120\n         },\n         \"fees\": {\n            \"currency_code\": \"Sit quae.\",\n            \"price_micros\": 6250006249689697416,\n            \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n         },\n         \"fees_and_taxes\": {\n            \"currency_code\": \"Sit quae.\",\n            \"price_micros\": 6250006249689697416,\n            \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n         },\n         \"fraud_signals\": \"Iusto amet pariatur.\",\n         \"md_merchant_data\": \"Saepe quia.\",\n         \"no_show_fee\": {\n            \"fee\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"fee_type\": \"PER_PERSON\"\n         },\n         \"pa_response\": \"Pariatur quia et.\",\n         \"payment_option_id\": \"Facere tempore provident impedit veniam incidunt suscipit.\",\n         \"payment_processed_by\": \"PROCESSED_BY_GOOGLE\",\n         \"payment_transaction_id\": \"Tenetur exercitationem non.\",\n         \"prepayment_status\": \"PREPAYMENT_PROVIDED\",\n         \"price\": {\n            \"currency_code\": \"Sit quae.\",\n            \"price_micros\": 6250006249689697416,\n            \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n         },\n         \"tax_amount\": {\n            \"currency_code\": \"Sit quae.\",\n            \"price_micros\": 6250006249689697416,\n            \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n         },\n         \"user_payment_option_id\": \"Sapiente saepe libero quaerat velit quam.\"\n      },\n      \"payment_processing_parameters\": {\n         \"payment_method_token\": \"Sunt quod quos architecto iure quia quibusdam.\",\n         \"payment_processor\": \"Laboriosam est delectus quo quo.\",\n         \"processor\": \"PAYMENT_PROCESSOR_UNSPECIFIED\",\n         \"tokenization_config\": {\n            \"allowed_auth_methods\": [\n               \"PAN_ONLY\",\n               \"AUTH_METHOD_UNSPECIFIED\",\n               \"AUTH_METHOD_UNSPECIFIED\"\n            ],\n            \"billing_information_format\": \"BILLING_INFORMATION_FORMAT_UNSPECIFIED\",\n            \"card_network_parameters\": [\n               {\n                  \"acquirer_bin\": \"Sit molestiae sed quasi.\",\n                  \"acquirer_merchant_id\": \"Sed eum officia.\",\n                  \"card_network\": \"DISCOVER\"\n               },\n               {\n                  \"acquirer_bin\": \"Sit molestiae sed quasi.\",\n                  \"acquirer_merchant_id\": \"Sed eum officia.\",\n                  \"card_network\": \"DISCOVER\"\n               },\n               {\n                  \"acquirer_bin\": \"Sit molestiae sed quasi.\",\n                  \"acquirer_merchant_id\": \"Sed eum officia.\",\n                  \"card_network\": \"DISCOVER\"\n               },\n               {\n                  \"acquirer_bin\": \"Sit molestiae sed quasi.\",\n                  \"acquirer_merchant_id\": \"Sed eum officia.\",\n                  \"card_network\": \"DISCOVER\"\n               }\n            ],\n            \"merchant_of_record_name\": \"Blanditiis molestias.\",\n            \"payment_country_code\": \"Qui eius expedita quo nihil.\",\n            \"tokenization_parameter\": {\n               \"Eaque aut.\": \"Excepturi quisquam necessitatibus dolorem.\",\n               \"Error perspiciatis.\": \"Inventore dolor ab omnis.\",\n               \"Sed exercitationem rem similique aut necessitatibus ullam.\": \"Eius sequi autem unde laudantium aspernatur.\"\n            }\n         },\n         \"unparsed_payment_method_token\": \"Possimus consequatur sequi asperiores quasi.\",\n         \"version\": \"Animi quidem veniam molestiae.\"\n      },\n      \"slot\": {\n         \"availability_tag\": \"Ratione fugiat.\",\n         \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n         \"duration_sec\": 8817681372972889417,\n         \"merchant_id\": \"Et quia voluptates.\",\n         \"resources\": {\n            \"party_size\": 1294063121,\n            \"room_id\": \"Quia et ea rerum est expedita.\",\n            \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n         },\n         \"service_id\": \"Nulla praesentium et non omnis modi.\",\n         \"start_sec\": 2392541444029039475\n      },\n      \"user_information\": {\n         \"address\": {\n            \"country\": \"Vel et vel.\",\n            \"locality\": \"Illum optio.\",\n            \"postal_code\": \"Porro molestiae quam dignissimos illum quia praesentium.\",\n            \"region\": \"Praesentium nemo quia molestias.\",\n            \"street_address\": \"Esse necessitatibus officia nihil at mollitia nobis.\"\n         },\n         \"email\": \"Rerum excepturi ea accusamus illo.\",\n         \"family_name\": \"Repudiandae enim voluptas quia sed tenetur possimus.\",\n         \"given_name\": \"Debitis hic id qui.\",\n         \"language_code\": \"Reiciendis expedita consectetur at nulla.\",\n         \"telephone\": \"In nostrum quae sint.\",\n         \"user_id\": \"Et voluptatibus eius soluta.\"\n      }\n   }'")
		}
		if body.Slot == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
		}
		if body.UserInformation == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
		}
		if body.Slot != nil {
			if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.PaymentInformation != nil {
			if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.PaymentProcessingParameters != nil {
			if err2 := ValidatePaymentProcessingParametersRequestBodyRequestBody(body.PaymentProcessingParameters); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = bookingCreateBookingUsername
	}
	var password string
	{
		password = bookingCreateBookingPassword
	}
	v := &booking.CreateBookingRequest{
		IdempotencyToken:  body.IdempotencyToken,
		AdditionalRequest: body.AdditionalRequest,
		OfferID:           body.OfferID,
		DealID:            body.DealID,
	}
	if body.Slot != nil {
		v.Slot = marshalSlotRequestBodyRequestBodyToBookingSlot(body.Slot)
	}
	if body.LeaseRef != nil {
		v.LeaseRef = marshalLeaseReferenceRequestBodyRequestBodyToBookingLeaseReference(body.LeaseRef)
	}
	if body.UserInformation != nil {
		v.UserInformation = marshalUserInformationRequestBodyRequestBodyToBookingUserInformation(body.UserInformation)
	}
	if body.PaymentInformation != nil {
		v.PaymentInformation = marshalPaymentInformationRequestBodyRequestBodyToBookingPaymentInformation(body.PaymentInformation)
	}
	if body.PaymentProcessingParameters != nil {
		v.PaymentProcessingParameters = marshalPaymentProcessingParametersRequestBodyRequestBodyToBookingPaymentProcessingParameters(body.PaymentProcessingParameters)
	}
	res := &booking.CreateBookingPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildUpdateBookingPayload builds the payload for the booking update_booking
// endpoint from CLI flags.
func BuildUpdateBookingPayload(bookingUpdateBookingBody string, bookingUpdateBookingUsername string, bookingUpdateBookingPassword string) (*booking.UpdateBookingPayload, error) {
	var err error
	var body UpdateBookingRequestBody
	{
		err = json.Unmarshal([]byte(bookingUpdateBookingBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"booking\": {\n         \"booking_id\": \"Id dolorem nobis.\",\n         \"offer_info\": {\n            \"offer_id\": \"Quaerat dolor et et et voluptatem inventore.\"\n         },\n         \"payment_information\": {\n            \"deposit\": {\n               \"deposit\": {\n                  \"currency_code\": \"Sit quae.\",\n                  \"price_micros\": 6250006249689697416,\n                  \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n               },\n               \"deposit_type\": \"FIXED_RATE_DEFAULT\",\n               \"min_advance_cancellation_sec\": 2682111425714885120\n            },\n            \"fees\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"fees_and_taxes\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"fraud_signals\": \"Iusto amet pariatur.\",\n            \"md_merchant_data\": \"Saepe quia.\",\n            \"no_show_fee\": {\n               \"fee\": {\n                  \"currency_code\": \"Sit quae.\",\n                  \"price_micros\": 6250006249689697416,\n                  \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n               },\n               \"fee_type\": \"PER_PERSON\"\n            },\n            \"pa_response\": \"Pariatur quia et.\",\n            \"payment_option_id\": \"Facere tempore provident impedit veniam incidunt suscipit.\",\n            \"payment_processed_by\": \"PROCESSED_BY_GOOGLE\",\n            \"payment_transaction_id\": \"Tenetur exercitationem non.\",\n            \"prepayment_status\": \"PREPAYMENT_PROVIDED\",\n            \"price\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"tax_amount\": {\n               \"currency_code\": \"Sit quae.\",\n               \"price_micros\": 6250006249689697416,\n               \"pricing_option_tag\": \"Perferendis iusto ea quae est quam.\"\n            },\n            \"user_payment_option_id\": \"Sapiente saepe libero quaerat velit quam.\"\n         },\n         \"slot\": {\n            \"availability_tag\": \"Ratione fugiat.\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"duration_sec\": 8817681372972889417,\n            \"merchant_id\": \"Et quia voluptates.\",\n            \"resources\": {\n               \"party_size\": 1294063121,\n               \"room_id\": \"Quia et ea rerum est expedita.\",\n               \"staff_id\": \"Adipisci et impedit velit dignissimos autem fuga.\"\n            },\n            \"service_id\": \"Nulla praesentium et non omnis modi.\",\n            \"start_sec\": 2392541444029039475\n         },\n         \"status\": \"PENDING_MERCHANT_CONFIRMATION\",\n         \"user_information\": {\n            \"address\": {\n               \"country\": \"Vel et vel.\",\n               \"locality\": \"Illum optio.\",\n               \"postal_code\": \"Porro molestiae quam dignissimos illum quia praesentium.\",\n               \"region\": \"Praesentium nemo quia molestias.\",\n               \"street_address\": \"Esse necessitatibus officia nihil at mollitia nobis.\"\n            },\n            \"email\": \"Rerum excepturi ea accusamus illo.\",\n            \"family_name\": \"Repudiandae enim voluptas quia sed tenetur possimus.\",\n            \"given_name\": \"Debitis hic id qui.\",\n            \"language_code\": \"Reiciendis expedita consectetur at nulla.\",\n            \"telephone\": \"In nostrum quae sint.\",\n            \"user_id\": \"Et voluptatibus eius soluta.\"\n         },\n         \"virtual_session_info\": {\n            \"meeting_id\": \"Iure sunt quo dicta ducimus sunt.\",\n            \"password\": \"Repudiandae sunt soluta praesentium laborum soluta.\",\n            \"session_url\": \"Id qui inventore rerum.\"\n         }\n      }\n   }'")
		}
		if body.Booking == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("booking", "body"))
		}
		if body.Booking != nil {
			if err2 := ValidateBookingRequestBodyRequestBody(body.Booking); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = bookingUpdateBookingUsername
	}
	var password string
	{
		password = bookingUpdateBookingPassword
	}
	v := &booking.UpdateBookingRequest{}
	if body.Booking != nil {
		v.Booking = marshalBookingRequestBodyRequestBodyToBookingBooking(body.Booking)
	}
	res := &booking.UpdateBookingPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildGetBookingStatusPayload builds the payload for the booking
// get_booking_status endpoint from CLI flags.
func BuildGetBookingStatusPayload(bookingGetBookingStatusBody string, bookingGetBookingStatusUsername string, bookingGetBookingStatusPassword string) (*booking.GetBookingStatusPayload, error) {
	var err error
	var body GetBookingStatusRequestBody
	{
		err = json.Unmarshal([]byte(bookingGetBookingStatusBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"booking_id\": \"Omnis distinctio.\"\n   }'")
		}
	}
	var username string
	{
		username = bookingGetBookingStatusUsername
	}
	var password string
	{
		password = bookingGetBookingStatusPassword
	}
	v := &booking.GetBookingStatusRequest{
		BookingID: body.BookingID,
	}
	res := &booking.GetBookingStatusPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildListBookingsPayload builds the payload for the booking list_bookings
// endpoint from CLI flags.
func BuildListBookingsPayload(bookingListBookingsBody string, bookingListBookingsUsername string, bookingListBookingsPassword string) (*booking.ListBookingsPayload, error) {
	var err error
	var body ListBookingsRequestBody
	{
		err = json.Unmarshal([]byte(bookingListBookingsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user_id\": \"Quia voluptatem sit qui iusto.\"\n   }'")
		}
	}
	var username string
	{
		username = bookingListBookingsUsername
	}
	var password string
	{
		password = bookingListBookingsPassword
	}
	v := &booking.ListBookingsRequest{
		UserID: body.UserID,
	}
	res := &booking.ListBookingsPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}
