// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking HTTP client types
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	booking "github.com/tchssk/reserve-with-google-goa/gen/booking"
	goa "goa.design/goa/v3/pkg"
)

// BatchAvailabilityLookupRequestBody is the type of the "booking" service
// "batch_availability_lookup" endpoint HTTP request body.
type BatchAvailabilityLookupRequestBody struct {
	MerchantID string                            `form:"merchant_id" json:"merchant_id" xml:"merchant_id"`
	SlotTime   []*SlotTimeRequestBodyRequestBody `form:"slot_time" json:"slot_time" xml:"slot_time"`
}

// CheckAvailabilityRequestBody is the type of the "booking" service
// "check_availability" endpoint HTTP request body.
type CheckAvailabilityRequestBody struct {
	Slot *SlotRequestBodyRequestBody `form:"slot" json:"slot" xml:"slot"`
}

// CreateBookingRequestBody is the type of the "booking" service
// "create_booking" endpoint HTTP request body.
type CreateBookingRequestBody struct {
	Slot                        *SlotRequestBodyRequestBody                        `form:"slot" json:"slot" xml:"slot"`
	LeaseRef                    *LeaseReferenceRequestBodyRequestBody              `form:"lease_ref,omitempty" json:"lease_ref,omitempty" xml:"lease_ref,omitempty"`
	UserInformation             *UserInformationRequestBodyRequestBody             `form:"user_information" json:"user_information" xml:"user_information"`
	PaymentInformation          *PaymentInformationRequestBodyRequestBody          `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	PaymentProcessingParameters *PaymentProcessingParametersRequestBodyRequestBody `form:"payment_processing_parameters,omitempty" json:"payment_processing_parameters,omitempty" xml:"payment_processing_parameters,omitempty"`
	IdempotencyToken            string                                             `form:"idempotency_token" json:"idempotency_token" xml:"idempotency_token"`
	AdditionalRequest           *string                                            `form:"additional_request,omitempty" json:"additional_request,omitempty" xml:"additional_request,omitempty"`
	OfferID                     *string                                            `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
	DealID                      *string                                            `form:"deal_id,omitempty" json:"deal_id,omitempty" xml:"deal_id,omitempty"`
}

// UpdateBookingRequestBody is the type of the "booking" service
// "update_booking" endpoint HTTP request body.
type UpdateBookingRequestBody struct {
	Booking *BookingRequestBodyRequestBody `form:"booking" json:"booking" xml:"booking"`
}

// GetBookingStatusRequestBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP request body.
type GetBookingStatusRequestBody struct {
	BookingID string `form:"booking_id" json:"booking_id" xml:"booking_id"`
}

// ListBookingsRequestBody is the type of the "booking" service "list_bookings"
// endpoint HTTP request body.
type ListBookingsRequestBody struct {
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
}

// BatchAvailabilityLookupResponseBody is the type of the "booking" service
// "batch_availability_lookup" endpoint HTTP response body.
type BatchAvailabilityLookupResponseBody struct {
	SlotTimeAvailability []*SlotTimeAvailabilityResponseBody `form:"slot_time_availability,omitempty" json:"slot_time_availability,omitempty" xml:"slot_time_availability,omitempty"`
}

// CheckAvailabilityResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body.
type CheckAvailabilityResponseBody struct {
	Slot                     *SlotResponseBody               `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	CountAvailable           *int32                          `form:"count_available,omitempty" json:"count_available,omitempty" xml:"count_available,omitempty"`
	LastOnlineCancellableSec *int64                          `form:"last_online_cancellable_sec,omitempty" json:"last_online_cancellable_sec,omitempty" xml:"last_online_cancellable_sec,omitempty"`
	DurationRequirement      *string                         `form:"duration_requirement,omitempty" json:"duration_requirement,omitempty" xml:"duration_requirement,omitempty"`
	AvailabilityUpdate       *AvailabilityUpdateResponseBody `form:"availability_update,omitempty" json:"availability_update,omitempty" xml:"availability_update,omitempty"`
}

// CreateBookingResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body.
type CreateBookingResponseBody struct {
	Booking           *BookingResponseBody           `form:"booking,omitempty" json:"booking,omitempty" xml:"booking,omitempty"`
	UserPaymentOption *UserPaymentOptionResponseBody `form:"user_payment_option,omitempty" json:"user_payment_option,omitempty" xml:"user_payment_option,omitempty"`
	BookingFailure    *BookingFailureResponseBody    `form:"booking_failure,omitempty" json:"booking_failure,omitempty" xml:"booking_failure,omitempty"`
}

// UpdateBookingResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body.
type UpdateBookingResponseBody struct {
	Booking           *BookingResponseBody           `form:"booking,omitempty" json:"booking,omitempty" xml:"booking,omitempty"`
	UserPaymentOption *UserPaymentOptionResponseBody `form:"user_payment_option,omitempty" json:"user_payment_option,omitempty" xml:"user_payment_option,omitempty"`
	BookingFailure    *BookingFailureResponseBody    `form:"booking_failure,omitempty" json:"booking_failure,omitempty" xml:"booking_failure,omitempty"`
}

// GetBookingStatusResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body.
type GetBookingStatusResponseBody struct {
	BookingID        *string `form:"booking_id,omitempty" json:"booking_id,omitempty" xml:"booking_id,omitempty"`
	BookingStatus    *string `form:"booking_status,omitempty" json:"booking_status,omitempty" xml:"booking_status,omitempty"`
	PrepaymentStatus *string `form:"prepayment_status,omitempty" json:"prepayment_status,omitempty" xml:"prepayment_status,omitempty"`
}

// ListBookingsResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body.
type ListBookingsResponseBody struct {
	Bookings []*BookingResponseBody `form:"bookings,omitempty" json:"bookings,omitempty" xml:"bookings,omitempty"`
}

// BatchAvailabilityLookupBadRequestResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "bad_request" error.
type BatchAvailabilityLookupBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupUnauthorizedResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "unauthorized" error.
type BatchAvailabilityLookupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupForbiddenResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "forbidden" error.
type BatchAvailabilityLookupForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupNotFoundResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "not_found" error.
type BatchAvailabilityLookupNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupConflictResponseBody is the type of the "booking"
// service "batch_availability_lookup" endpoint HTTP response body for the
// "conflict" error.
type BatchAvailabilityLookupConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupTooManyRequestsResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "too_many_requests" error.
type BatchAvailabilityLookupTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupClientClosedRequestResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "client_closed_request" error.
type BatchAvailabilityLookupClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupInternalServerErrorResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "internal_server_error" error.
type BatchAvailabilityLookupInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupNotImplementedResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "not_implemented" error.
type BatchAvailabilityLookupNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupServiceUnavailableResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "service_unavailable" error.
type BatchAvailabilityLookupServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchAvailabilityLookupGatewayTimeoutResponseBody is the type of the
// "booking" service "batch_availability_lookup" endpoint HTTP response body
// for the "gateway_timeout" error.
type BatchAvailabilityLookupGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityBadRequestResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "bad_request" error.
type CheckAvailabilityBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityUnauthorizedResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "unauthorized" error.
type CheckAvailabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityForbiddenResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "forbidden" error.
type CheckAvailabilityForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityNotFoundResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "not_found" error.
type CheckAvailabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityConflictResponseBody is the type of the "booking" service
// "check_availability" endpoint HTTP response body for the "conflict" error.
type CheckAvailabilityConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityTooManyRequestsResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "too_many_requests" error.
type CheckAvailabilityTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityClientClosedRequestResponseBody is the type of the
// "booking" service "check_availability" endpoint HTTP response body for the
// "client_closed_request" error.
type CheckAvailabilityClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityInternalServerErrorResponseBody is the type of the
// "booking" service "check_availability" endpoint HTTP response body for the
// "internal_server_error" error.
type CheckAvailabilityInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityNotImplementedResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "not_implemented" error.
type CheckAvailabilityNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityServiceUnavailableResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "service_unavailable" error.
type CheckAvailabilityServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckAvailabilityGatewayTimeoutResponseBody is the type of the "booking"
// service "check_availability" endpoint HTTP response body for the
// "gateway_timeout" error.
type CheckAvailabilityGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingBadRequestResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "bad_request" error.
type CreateBookingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingUnauthorizedResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "unauthorized" error.
type CreateBookingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingForbiddenResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "forbidden" error.
type CreateBookingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingNotFoundResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "not_found" error.
type CreateBookingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingConflictResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "conflict" error.
type CreateBookingConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingTooManyRequestsResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "too_many_requests" error.
type CreateBookingTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingClientClosedRequestResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "client_closed_request" error.
type CreateBookingClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingInternalServerErrorResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "internal_server_error" error.
type CreateBookingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingNotImplementedResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "not_implemented" error.
type CreateBookingNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingServiceUnavailableResponseBody is the type of the "booking"
// service "create_booking" endpoint HTTP response body for the
// "service_unavailable" error.
type CreateBookingServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookingGatewayTimeoutResponseBody is the type of the "booking" service
// "create_booking" endpoint HTTP response body for the "gateway_timeout" error.
type CreateBookingGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingBadRequestResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "bad_request" error.
type UpdateBookingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingUnauthorizedResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "unauthorized" error.
type UpdateBookingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingForbiddenResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "forbidden" error.
type UpdateBookingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingNotFoundResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "not_found" error.
type UpdateBookingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingConflictResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "conflict" error.
type UpdateBookingConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingTooManyRequestsResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "too_many_requests" error.
type UpdateBookingTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingClientClosedRequestResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "client_closed_request" error.
type UpdateBookingClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingInternalServerErrorResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "internal_server_error" error.
type UpdateBookingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingNotImplementedResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "not_implemented" error.
type UpdateBookingNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingServiceUnavailableResponseBody is the type of the "booking"
// service "update_booking" endpoint HTTP response body for the
// "service_unavailable" error.
type UpdateBookingServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBookingGatewayTimeoutResponseBody is the type of the "booking" service
// "update_booking" endpoint HTTP response body for the "gateway_timeout" error.
type UpdateBookingGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusBadRequestResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "bad_request" error.
type GetBookingStatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusUnauthorizedResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "unauthorized" error.
type GetBookingStatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusForbiddenResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "forbidden" error.
type GetBookingStatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusNotFoundResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "not_found" error.
type GetBookingStatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusConflictResponseBody is the type of the "booking" service
// "get_booking_status" endpoint HTTP response body for the "conflict" error.
type GetBookingStatusConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusTooManyRequestsResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "too_many_requests" error.
type GetBookingStatusTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusClientClosedRequestResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "client_closed_request" error.
type GetBookingStatusClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusInternalServerErrorResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "internal_server_error" error.
type GetBookingStatusInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusNotImplementedResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "not_implemented" error.
type GetBookingStatusNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusServiceUnavailableResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "service_unavailable" error.
type GetBookingStatusServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBookingStatusGatewayTimeoutResponseBody is the type of the "booking"
// service "get_booking_status" endpoint HTTP response body for the
// "gateway_timeout" error.
type GetBookingStatusGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsBadRequestResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "bad_request" error.
type ListBookingsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsUnauthorizedResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "unauthorized" error.
type ListBookingsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsForbiddenResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "forbidden" error.
type ListBookingsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsNotFoundResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "not_found" error.
type ListBookingsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsConflictResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "conflict" error.
type ListBookingsConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsTooManyRequestsResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "too_many_requests"
// error.
type ListBookingsTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsClientClosedRequestResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "client_closed_request" error.
type ListBookingsClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsInternalServerErrorResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "internal_server_error" error.
type ListBookingsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsNotImplementedResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "not_implemented" error.
type ListBookingsNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsServiceUnavailableResponseBody is the type of the "booking"
// service "list_bookings" endpoint HTTP response body for the
// "service_unavailable" error.
type ListBookingsServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBookingsGatewayTimeoutResponseBody is the type of the "booking" service
// "list_bookings" endpoint HTTP response body for the "gateway_timeout" error.
type ListBookingsGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SlotTimeRequestBodyRequestBody is used to define fields on request body
// types.
type SlotTimeRequestBodyRequestBody struct {
	ServiceID        string                             `form:"service_id" json:"service_id" xml:"service_id"`
	StartSec         int64                              `form:"start_sec" json:"start_sec" xml:"start_sec"`
	DurationSec      *int64                             `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                            `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	ResourceIds      *ResourceIdsRequestBodyRequestBody `form:"resource_ids,omitempty" json:"resource_ids,omitempty" xml:"resource_ids,omitempty"`
	ConfirmationMode *string                            `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// ResourceIdsRequestBodyRequestBody is used to define fields on request body
// types.
type ResourceIdsRequestBodyRequestBody struct {
	StaffID   *string `form:"staff_id,omitempty" json:"staff_id,omitempty" xml:"staff_id,omitempty"`
	RoomID    *string `form:"room_id,omitempty" json:"room_id,omitempty" xml:"room_id,omitempty"`
	PartySize *int32  `form:"party_size,omitempty" json:"party_size,omitempty" xml:"party_size,omitempty"`
}

// SlotTimeAvailabilityResponseBody is used to define fields on response body
// types.
type SlotTimeAvailabilityResponseBody struct {
	SlotTime  *SlotTimeResponseBody `form:"slot_time,omitempty" json:"slot_time,omitempty" xml:"slot_time,omitempty"`
	Available *bool                 `form:"available,omitempty" json:"available,omitempty" xml:"available,omitempty"`
}

// SlotTimeResponseBody is used to define fields on response body types.
type SlotTimeResponseBody struct {
	ServiceID        *string                  `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                   `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                   `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                  `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	ResourceIds      *ResourceIdsResponseBody `form:"resource_ids,omitempty" json:"resource_ids,omitempty" xml:"resource_ids,omitempty"`
	ConfirmationMode *string                  `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// ResourceIdsResponseBody is used to define fields on response body types.
type ResourceIdsResponseBody struct {
	StaffID   *string `form:"staff_id,omitempty" json:"staff_id,omitempty" xml:"staff_id,omitempty"`
	RoomID    *string `form:"room_id,omitempty" json:"room_id,omitempty" xml:"room_id,omitempty"`
	PartySize *int32  `form:"party_size,omitempty" json:"party_size,omitempty" xml:"party_size,omitempty"`
}

// SlotRequestBodyRequestBody is used to define fields on request body types.
type SlotRequestBodyRequestBody struct {
	MerchantID       *string                            `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	ServiceID        *string                            `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                             `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                             `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                            `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	Resources        *ResourceIdsRequestBodyRequestBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	ConfirmationMode *string                            `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// SlotResponseBody is used to define fields on response body types.
type SlotResponseBody struct {
	MerchantID       *string                  `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	ServiceID        *string                  `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec         *int64                   `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec      *int64                   `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	AvailabilityTag  *string                  `form:"availability_tag,omitempty" json:"availability_tag,omitempty" xml:"availability_tag,omitempty"`
	Resources        *ResourceIdsResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
	ConfirmationMode *string                  `form:"confirmation_mode,omitempty" json:"confirmation_mode,omitempty" xml:"confirmation_mode,omitempty"`
}

// AvailabilityUpdateResponseBody is used to define fields on response body
// types.
type AvailabilityUpdateResponseBody struct {
	SlotAvailability []*SlotAvailabilityResponseBody `form:"slot_availability,omitempty" json:"slot_availability,omitempty" xml:"slot_availability,omitempty"`
}

// SlotAvailabilityResponseBody is used to define fields on response body types.
type SlotAvailabilityResponseBody struct {
	Slot           *SlotResponseBody `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	CountAvailable *int32            `form:"count_available,omitempty" json:"count_available,omitempty" xml:"count_available,omitempty"`
}

// LeaseReferenceRequestBodyRequestBody is used to define fields on request
// body types.
type LeaseReferenceRequestBodyRequestBody struct {
	LeaseID string `form:"lease_id" json:"lease_id" xml:"lease_id"`
}

// UserInformationRequestBodyRequestBody is used to define fields on request
// body types.
type UserInformationRequestBodyRequestBody struct {
	UserID       string                               `form:"user_id" json:"user_id" xml:"user_id"`
	GivenName    string                               `form:"given_name" json:"given_name" xml:"given_name"`
	FamilyName   string                               `form:"family_name" json:"family_name" xml:"family_name"`
	Address      *PostalAddressRequestBodyRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    string                               `form:"telephone" json:"telephone" xml:"telephone"`
	Email        string                               `form:"email" json:"email" xml:"email"`
	LanguageCode *string                              `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressRequestBodyRequestBody is used to define fields on request body
// types.
type PostalAddressRequestBodyRequestBody struct {
	Country       string  `form:"country" json:"country" xml:"country"`
	Locality      string  `form:"locality" json:"locality" xml:"locality"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    string  `form:"postal_code" json:"postal_code" xml:"postal_code"`
	StreetAddress string  `form:"street_address" json:"street_address" xml:"street_address"`
}

// PaymentInformationRequestBodyRequestBody is used to define fields on request
// body types.
type PaymentInformationRequestBodyRequestBody struct {
	PrepaymentStatus     string                           `form:"prepayment_status" json:"prepayment_status" xml:"prepayment_status"`
	PaymentTransactionID *string                          `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceRequestBodyRequestBody     `form:"price" json:"price" xml:"price"`
	TaxAmount            *PriceRequestBodyRequestBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceRequestBodyRequestBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceRequestBodyRequestBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositRequestBodyRequestBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeRequestBodyRequestBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   string                           `form:"payment_processed_by" json:"payment_processed_by" xml:"payment_processed_by"`
	PaymentOptionID      *string                          `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                          `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                          `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                          `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                          `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// PriceRequestBodyRequestBody is used to define fields on request body types.
type PriceRequestBodyRequestBody struct {
	PriceMicros      int64   `form:"price_micros" json:"price_micros" xml:"price_micros"`
	CurrencyCode     string  `form:"currency_code" json:"currency_code" xml:"currency_code"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// DepositRequestBodyRequestBody is used to define fields on request body types.
type DepositRequestBodyRequestBody struct {
	Deposit                   *PriceRequestBodyRequestBody `form:"deposit" json:"deposit" xml:"deposit"`
	MinAdvanceCancellationSec int64                        `form:"min_advance_cancellation_sec" json:"min_advance_cancellation_sec" xml:"min_advance_cancellation_sec"`
	DepositType               string                       `form:"deposit_type" json:"deposit_type" xml:"deposit_type"`
}

// NoShowFeeRequestBodyRequestBody is used to define fields on request body
// types.
type NoShowFeeRequestBodyRequestBody struct {
	Fee     *PriceRequestBodyRequestBody `form:"fee" json:"fee" xml:"fee"`
	FeeType string                       `form:"fee_type" json:"fee_type" xml:"fee_type"`
}

// PaymentProcessingParametersRequestBodyRequestBody is used to define fields
// on request body types.
type PaymentProcessingParametersRequestBodyRequestBody struct {
	Processor                  string                                    `form:"processor" json:"processor" xml:"processor"`
	PaymentMethodToken         *string                                   `form:"payment_method_token,omitempty" json:"payment_method_token,omitempty" xml:"payment_method_token,omitempty"`
	UnparsedPaymentMethodToken *string                                   `form:"unparsed_payment_method_token,omitempty" json:"unparsed_payment_method_token,omitempty" xml:"unparsed_payment_method_token,omitempty"`
	Version                    *string                                   `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	PaymentProcessor           string                                    `form:"payment_processor" json:"payment_processor" xml:"payment_processor"`
	TokenizationConfig         *TokenizationConfigRequestBodyRequestBody `form:"tokenization_config,omitempty" json:"tokenization_config,omitempty" xml:"tokenization_config,omitempty"`
}

// TokenizationConfigRequestBodyRequestBody is used to define fields on request
// body types.
type TokenizationConfigRequestBodyRequestBody struct {
	TokenizationParameter    map[string]string                              `form:"tokenization_parameter" json:"tokenization_parameter" xml:"tokenization_parameter"`
	BillingInformationFormat string                                         `form:"billing_information_format" json:"billing_information_format" xml:"billing_information_format"`
	MerchantOfRecordName     string                                         `form:"merchant_of_record_name" json:"merchant_of_record_name" xml:"merchant_of_record_name"`
	PaymentCountryCode       string                                         `form:"payment_country_code" json:"payment_country_code" xml:"payment_country_code"`
	CardNetworkParameters    []*CardNetworkParametersRequestBodyRequestBody `form:"card_network_parameters" json:"card_network_parameters" xml:"card_network_parameters"`
	AllowedAuthMethods       []string                                       `form:"allowed_auth_methods" json:"allowed_auth_methods" xml:"allowed_auth_methods"`
}

// CardNetworkParametersRequestBodyRequestBody is used to define fields on
// request body types.
type CardNetworkParametersRequestBodyRequestBody struct {
	CardNetwork        string `form:"card_network" json:"card_network" xml:"card_network"`
	AcquirerBin        string `form:"acquirer_bin" json:"acquirer_bin" xml:"acquirer_bin"`
	AcquirerMerchantID string `form:"acquirer_merchant_id" json:"acquirer_merchant_id" xml:"acquirer_merchant_id"`
}

// BookingResponseBody is used to define fields on response body types.
type BookingResponseBody struct {
	BookingID          *string                         `form:"booking_id,omitempty" json:"booking_id,omitempty" xml:"booking_id,omitempty"`
	Slot               *SlotResponseBody               `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	UserInformation    *UserInformationResponseBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	Status             *string                         `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	PaymentInformation *PaymentInformationResponseBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	VirtualSessionInfo *VirtualSessionInfoResponseBody `form:"virtual_session_info,omitempty" json:"virtual_session_info,omitempty" xml:"virtual_session_info,omitempty"`
	OfferInfo          *OfferInfoResponseBody          `form:"offer_info,omitempty" json:"offer_info,omitempty" xml:"offer_info,omitempty"`
}

// UserInformationResponseBody is used to define fields on response body types.
type UserInformationResponseBody struct {
	UserID       *string                    `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	GivenName    *string                    `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	FamilyName   *string                    `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	Address      *PostalAddressResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    *string                    `form:"telephone,omitempty" json:"telephone,omitempty" xml:"telephone,omitempty"`
	Email        *string                    `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	LanguageCode *string                    `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressResponseBody is used to define fields on response body types.
type PostalAddressResponseBody struct {
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Locality      *string `form:"locality,omitempty" json:"locality,omitempty" xml:"locality,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    *string `form:"postal_code,omitempty" json:"postal_code,omitempty" xml:"postal_code,omitempty"`
	StreetAddress *string `form:"street_address,omitempty" json:"street_address,omitempty" xml:"street_address,omitempty"`
}

// PaymentInformationResponseBody is used to define fields on response body
// types.
type PaymentInformationResponseBody struct {
	PrepaymentStatus     *string                `form:"prepayment_status,omitempty" json:"prepayment_status,omitempty" xml:"prepayment_status,omitempty"`
	PaymentTransactionID *string                `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceResponseBody     `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	TaxAmount            *PriceResponseBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceResponseBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceResponseBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositResponseBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeResponseBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   *string                `form:"payment_processed_by,omitempty" json:"payment_processed_by,omitempty" xml:"payment_processed_by,omitempty"`
	PaymentOptionID      *string                `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// PriceResponseBody is used to define fields on response body types.
type PriceResponseBody struct {
	PriceMicros      *int64  `form:"price_micros,omitempty" json:"price_micros,omitempty" xml:"price_micros,omitempty"`
	CurrencyCode     *string `form:"currency_code,omitempty" json:"currency_code,omitempty" xml:"currency_code,omitempty"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// DepositResponseBody is used to define fields on response body types.
type DepositResponseBody struct {
	Deposit                   *PriceResponseBody `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	MinAdvanceCancellationSec *int64             `form:"min_advance_cancellation_sec,omitempty" json:"min_advance_cancellation_sec,omitempty" xml:"min_advance_cancellation_sec,omitempty"`
	DepositType               *string            `form:"deposit_type,omitempty" json:"deposit_type,omitempty" xml:"deposit_type,omitempty"`
}

// NoShowFeeResponseBody is used to define fields on response body types.
type NoShowFeeResponseBody struct {
	Fee     *PriceResponseBody `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	FeeType *string            `form:"fee_type,omitempty" json:"fee_type,omitempty" xml:"fee_type,omitempty"`
}

// VirtualSessionInfoResponseBody is used to define fields on response body
// types.
type VirtualSessionInfoResponseBody struct {
	SessionURL *string `form:"session_url,omitempty" json:"session_url,omitempty" xml:"session_url,omitempty"`
	MeetingID  *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	Password   *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// OfferInfoResponseBody is used to define fields on response body types.
type OfferInfoResponseBody struct {
	OfferID *string `form:"offer_id,omitempty" json:"offer_id,omitempty" xml:"offer_id,omitempty"`
}

// UserPaymentOptionResponseBody is used to define fields on response body
// types.
type UserPaymentOptionResponseBody struct {
	UserPaymentOptionID *string `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	ValidStartTimeSec   *int64  `form:"valid_start_time_sec,omitempty" json:"valid_start_time_sec,omitempty" xml:"valid_start_time_sec,omitempty"`
	ValidEndTimeSec     *int64  `form:"valid_end_time_sec,omitempty" json:"valid_end_time_sec,omitempty" xml:"valid_end_time_sec,omitempty"`
	Type                *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	OriginalCount       *int32  `form:"original_count,omitempty" json:"original_count,omitempty" xml:"original_count,omitempty"`
	CurrentCount        *int32  `form:"current_count,omitempty" json:"current_count,omitempty" xml:"current_count,omitempty"`
	PaymentOptionID     *string `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
}

// BookingFailureResponseBody is used to define fields on response body types.
type BookingFailureResponseBody struct {
	Cause            *string                                `form:"cause,omitempty" json:"cause,omitempty" xml:"cause,omitempty"`
	RejectedCardType *string                                `form:"rejected_card_type,omitempty" json:"rejected_card_type,omitempty" xml:"rejected_card_type,omitempty"`
	Description      *string                                `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	PaymentFailure   *PaymentFailureInformationResponseBody `form:"payment_failure,omitempty" json:"payment_failure,omitempty" xml:"payment_failure,omitempty"`
}

// PaymentFailureInformationResponseBody is used to define fields on response
// body types.
type PaymentFailureInformationResponseBody struct {
	Threeds1Parameters *ThreeDS1ParametersResponseBody `form:"threeds1_parameters,omitempty" json:"threeds1_parameters,omitempty" xml:"threeds1_parameters,omitempty"`
}

// ThreeDS1ParametersResponseBody is used to define fields on response body
// types.
type ThreeDS1ParametersResponseBody struct {
	AcsURL         *string `form:"acs_url,omitempty" json:"acs_url,omitempty" xml:"acs_url,omitempty"`
	PaReq          *string `form:"pa_req,omitempty" json:"pa_req,omitempty" xml:"pa_req,omitempty"`
	TransactionID  *string `form:"transaction_id,omitempty" json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	MdMerchantData *string `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// BookingRequestBodyRequestBody is used to define fields on request body types.
type BookingRequestBodyRequestBody struct {
	BookingID          string                                    `form:"booking_id" json:"booking_id" xml:"booking_id"`
	Slot               *SlotRequestBodyRequestBody               `form:"slot,omitempty" json:"slot,omitempty" xml:"slot,omitempty"`
	UserInformation    *UserInformationRequestBodyRequestBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	Status             *string                                   `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	PaymentInformation *PaymentInformationRequestBodyRequestBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	VirtualSessionInfo *VirtualSessionInfoRequestBodyRequestBody `form:"virtual_session_info,omitempty" json:"virtual_session_info,omitempty" xml:"virtual_session_info,omitempty"`
	OfferInfo          *OfferInfoRequestBodyRequestBody          `form:"offer_info,omitempty" json:"offer_info,omitempty" xml:"offer_info,omitempty"`
}

// VirtualSessionInfoRequestBodyRequestBody is used to define fields on request
// body types.
type VirtualSessionInfoRequestBodyRequestBody struct {
	SessionURL *string `form:"session_url,omitempty" json:"session_url,omitempty" xml:"session_url,omitempty"`
	MeetingID  *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	Password   *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// OfferInfoRequestBodyRequestBody is used to define fields on request body
// types.
type OfferInfoRequestBodyRequestBody struct {
	OfferID string `form:"offer_id" json:"offer_id" xml:"offer_id"`
}

// NewBatchAvailabilityLookupRequestBody builds the HTTP request body from the
// payload of the "batch_availability_lookup" endpoint of the "booking" service.
func NewBatchAvailabilityLookupRequestBody(p *booking.BatchAvailabilityLookupPayload) *BatchAvailabilityLookupRequestBody {
	body := &BatchAvailabilityLookupRequestBody{
		MerchantID: p.Body.MerchantID,
	}
	if p.Body.SlotTime != nil {
		body.SlotTime = make([]*SlotTimeRequestBodyRequestBody, len(p.Body.SlotTime))
		for i, val := range p.Body.SlotTime {
			body.SlotTime[i] = marshalBookingSlotTimeToSlotTimeRequestBodyRequestBody(val)
		}
	}
	return body
}

// NewCheckAvailabilityRequestBody builds the HTTP request body from the
// payload of the "check_availability" endpoint of the "booking" service.
func NewCheckAvailabilityRequestBody(p *booking.CheckAvailabilityPayload) *CheckAvailabilityRequestBody {
	body := &CheckAvailabilityRequestBody{}
	if p.Body.Slot != nil {
		body.Slot = marshalBookingSlotToSlotRequestBodyRequestBody(p.Body.Slot)
	}
	return body
}

// NewCreateBookingRequestBody builds the HTTP request body from the payload of
// the "create_booking" endpoint of the "booking" service.
func NewCreateBookingRequestBody(p *booking.CreateBookingPayload) *CreateBookingRequestBody {
	body := &CreateBookingRequestBody{
		IdempotencyToken:  p.Body.IdempotencyToken,
		AdditionalRequest: p.Body.AdditionalRequest,
		OfferID:           p.Body.OfferID,
		DealID:            p.Body.DealID,
	}
	if p.Body.Slot != nil {
		body.Slot = marshalBookingSlotToSlotRequestBodyRequestBody(p.Body.Slot)
	}
	if p.Body.LeaseRef != nil {
		body.LeaseRef = marshalBookingLeaseReferenceToLeaseReferenceRequestBodyRequestBody(p.Body.LeaseRef)
	}
	if p.Body.UserInformation != nil {
		body.UserInformation = marshalBookingUserInformationToUserInformationRequestBodyRequestBody(p.Body.UserInformation)
	}
	if p.Body.PaymentInformation != nil {
		body.PaymentInformation = marshalBookingPaymentInformationToPaymentInformationRequestBodyRequestBody(p.Body.PaymentInformation)
	}
	if p.Body.PaymentProcessingParameters != nil {
		body.PaymentProcessingParameters = marshalBookingPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody(p.Body.PaymentProcessingParameters)
	}
	return body
}

// NewUpdateBookingRequestBody builds the HTTP request body from the payload of
// the "update_booking" endpoint of the "booking" service.
func NewUpdateBookingRequestBody(p *booking.UpdateBookingPayload) *UpdateBookingRequestBody {
	body := &UpdateBookingRequestBody{}
	if p.Body.Booking != nil {
		body.Booking = marshalBookingBookingToBookingRequestBodyRequestBody(p.Body.Booking)
	}
	return body
}

// NewGetBookingStatusRequestBody builds the HTTP request body from the payload
// of the "get_booking_status" endpoint of the "booking" service.
func NewGetBookingStatusRequestBody(p *booking.GetBookingStatusPayload) *GetBookingStatusRequestBody {
	body := &GetBookingStatusRequestBody{
		BookingID: p.Body.BookingID,
	}
	return body
}

// NewListBookingsRequestBody builds the HTTP request body from the payload of
// the "list_bookings" endpoint of the "booking" service.
func NewListBookingsRequestBody(p *booking.ListBookingsPayload) *ListBookingsRequestBody {
	body := &ListBookingsRequestBody{
		UserID: p.Body.UserID,
	}
	return body
}

// NewBatchAvailabilityLookupResponseOK builds a "booking" service
// "batch_availability_lookup" endpoint result from a HTTP "OK" response.
func NewBatchAvailabilityLookupResponseOK(body *BatchAvailabilityLookupResponseBody) *booking.BatchAvailabilityLookupResponse {
	v := &booking.BatchAvailabilityLookupResponse{}
	v.SlotTimeAvailability = make([]*booking.SlotTimeAvailability, len(body.SlotTimeAvailability))
	for i, val := range body.SlotTimeAvailability {
		v.SlotTimeAvailability[i] = unmarshalSlotTimeAvailabilityResponseBodyToBookingSlotTimeAvailability(val)
	}

	return v
}

// NewBatchAvailabilityLookupBadRequest builds a booking service
// batch_availability_lookup endpoint bad_request error.
func NewBatchAvailabilityLookupBadRequest(body *BatchAvailabilityLookupBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupUnauthorized builds a booking service
// batch_availability_lookup endpoint unauthorized error.
func NewBatchAvailabilityLookupUnauthorized(body *BatchAvailabilityLookupUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupForbidden builds a booking service
// batch_availability_lookup endpoint forbidden error.
func NewBatchAvailabilityLookupForbidden(body *BatchAvailabilityLookupForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupNotFound builds a booking service
// batch_availability_lookup endpoint not_found error.
func NewBatchAvailabilityLookupNotFound(body *BatchAvailabilityLookupNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupConflict builds a booking service
// batch_availability_lookup endpoint conflict error.
func NewBatchAvailabilityLookupConflict(body *BatchAvailabilityLookupConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupTooManyRequests builds a booking service
// batch_availability_lookup endpoint too_many_requests error.
func NewBatchAvailabilityLookupTooManyRequests(body *BatchAvailabilityLookupTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupClientClosedRequest builds a booking service
// batch_availability_lookup endpoint client_closed_request error.
func NewBatchAvailabilityLookupClientClosedRequest(body *BatchAvailabilityLookupClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupInternalServerError builds a booking service
// batch_availability_lookup endpoint internal_server_error error.
func NewBatchAvailabilityLookupInternalServerError(body *BatchAvailabilityLookupInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupNotImplemented builds a booking service
// batch_availability_lookup endpoint not_implemented error.
func NewBatchAvailabilityLookupNotImplemented(body *BatchAvailabilityLookupNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupServiceUnavailable builds a booking service
// batch_availability_lookup endpoint service_unavailable error.
func NewBatchAvailabilityLookupServiceUnavailable(body *BatchAvailabilityLookupServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchAvailabilityLookupGatewayTimeout builds a booking service
// batch_availability_lookup endpoint gateway_timeout error.
func NewBatchAvailabilityLookupGatewayTimeout(body *BatchAvailabilityLookupGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityResponseOK builds a "booking" service
// "check_availability" endpoint result from a HTTP "OK" response.
func NewCheckAvailabilityResponseOK(body *CheckAvailabilityResponseBody) *booking.CheckAvailabilityResponse {
	v := &booking.CheckAvailabilityResponse{
		CountAvailable:           *body.CountAvailable,
		LastOnlineCancellableSec: body.LastOnlineCancellableSec,
		DurationRequirement:      body.DurationRequirement,
	}
	v.Slot = unmarshalSlotResponseBodyToBookingSlot(body.Slot)
	if body.AvailabilityUpdate != nil {
		v.AvailabilityUpdate = unmarshalAvailabilityUpdateResponseBodyToBookingAvailabilityUpdate(body.AvailabilityUpdate)
	}

	return v
}

// NewCheckAvailabilityBadRequest builds a booking service check_availability
// endpoint bad_request error.
func NewCheckAvailabilityBadRequest(body *CheckAvailabilityBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityUnauthorized builds a booking service check_availability
// endpoint unauthorized error.
func NewCheckAvailabilityUnauthorized(body *CheckAvailabilityUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityForbidden builds a booking service check_availability
// endpoint forbidden error.
func NewCheckAvailabilityForbidden(body *CheckAvailabilityForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityNotFound builds a booking service check_availability
// endpoint not_found error.
func NewCheckAvailabilityNotFound(body *CheckAvailabilityNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityConflict builds a booking service check_availability
// endpoint conflict error.
func NewCheckAvailabilityConflict(body *CheckAvailabilityConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityTooManyRequests builds a booking service
// check_availability endpoint too_many_requests error.
func NewCheckAvailabilityTooManyRequests(body *CheckAvailabilityTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityClientClosedRequest builds a booking service
// check_availability endpoint client_closed_request error.
func NewCheckAvailabilityClientClosedRequest(body *CheckAvailabilityClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityInternalServerError builds a booking service
// check_availability endpoint internal_server_error error.
func NewCheckAvailabilityInternalServerError(body *CheckAvailabilityInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityNotImplemented builds a booking service
// check_availability endpoint not_implemented error.
func NewCheckAvailabilityNotImplemented(body *CheckAvailabilityNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityServiceUnavailable builds a booking service
// check_availability endpoint service_unavailable error.
func NewCheckAvailabilityServiceUnavailable(body *CheckAvailabilityServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckAvailabilityGatewayTimeout builds a booking service
// check_availability endpoint gateway_timeout error.
func NewCheckAvailabilityGatewayTimeout(body *CheckAvailabilityGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingResponseOK builds a "booking" service "create_booking"
// endpoint result from a HTTP "OK" response.
func NewCreateBookingResponseOK(body *CreateBookingResponseBody) *booking.CreateBookingResponse {
	v := &booking.CreateBookingResponse{}
	v.Booking = unmarshalBookingResponseBodyToBookingBooking(body.Booking)
	if body.UserPaymentOption != nil {
		v.UserPaymentOption = unmarshalUserPaymentOptionResponseBodyToBookingUserPaymentOption(body.UserPaymentOption)
	}
	if body.BookingFailure != nil {
		v.BookingFailure = unmarshalBookingFailureResponseBodyToBookingBookingFailure(body.BookingFailure)
	}

	return v
}

// NewCreateBookingBadRequest builds a booking service create_booking endpoint
// bad_request error.
func NewCreateBookingBadRequest(body *CreateBookingBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingUnauthorized builds a booking service create_booking
// endpoint unauthorized error.
func NewCreateBookingUnauthorized(body *CreateBookingUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingForbidden builds a booking service create_booking endpoint
// forbidden error.
func NewCreateBookingForbidden(body *CreateBookingForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingNotFound builds a booking service create_booking endpoint
// not_found error.
func NewCreateBookingNotFound(body *CreateBookingNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingConflict builds a booking service create_booking endpoint
// conflict error.
func NewCreateBookingConflict(body *CreateBookingConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingTooManyRequests builds a booking service create_booking
// endpoint too_many_requests error.
func NewCreateBookingTooManyRequests(body *CreateBookingTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingClientClosedRequest builds a booking service create_booking
// endpoint client_closed_request error.
func NewCreateBookingClientClosedRequest(body *CreateBookingClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingInternalServerError builds a booking service create_booking
// endpoint internal_server_error error.
func NewCreateBookingInternalServerError(body *CreateBookingInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingNotImplemented builds a booking service create_booking
// endpoint not_implemented error.
func NewCreateBookingNotImplemented(body *CreateBookingNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingServiceUnavailable builds a booking service create_booking
// endpoint service_unavailable error.
func NewCreateBookingServiceUnavailable(body *CreateBookingServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookingGatewayTimeout builds a booking service create_booking
// endpoint gateway_timeout error.
func NewCreateBookingGatewayTimeout(body *CreateBookingGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingResponseOK builds a "booking" service "update_booking"
// endpoint result from a HTTP "OK" response.
func NewUpdateBookingResponseOK(body *UpdateBookingResponseBody) *booking.UpdateBookingResponse {
	v := &booking.UpdateBookingResponse{}
	v.Booking = unmarshalBookingResponseBodyToBookingBooking(body.Booking)
	if body.UserPaymentOption != nil {
		v.UserPaymentOption = unmarshalUserPaymentOptionResponseBodyToBookingUserPaymentOption(body.UserPaymentOption)
	}
	if body.BookingFailure != nil {
		v.BookingFailure = unmarshalBookingFailureResponseBodyToBookingBookingFailure(body.BookingFailure)
	}

	return v
}

// NewUpdateBookingBadRequest builds a booking service update_booking endpoint
// bad_request error.
func NewUpdateBookingBadRequest(body *UpdateBookingBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingUnauthorized builds a booking service update_booking
// endpoint unauthorized error.
func NewUpdateBookingUnauthorized(body *UpdateBookingUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingForbidden builds a booking service update_booking endpoint
// forbidden error.
func NewUpdateBookingForbidden(body *UpdateBookingForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingNotFound builds a booking service update_booking endpoint
// not_found error.
func NewUpdateBookingNotFound(body *UpdateBookingNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingConflict builds a booking service update_booking endpoint
// conflict error.
func NewUpdateBookingConflict(body *UpdateBookingConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingTooManyRequests builds a booking service update_booking
// endpoint too_many_requests error.
func NewUpdateBookingTooManyRequests(body *UpdateBookingTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingClientClosedRequest builds a booking service update_booking
// endpoint client_closed_request error.
func NewUpdateBookingClientClosedRequest(body *UpdateBookingClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingInternalServerError builds a booking service update_booking
// endpoint internal_server_error error.
func NewUpdateBookingInternalServerError(body *UpdateBookingInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingNotImplemented builds a booking service update_booking
// endpoint not_implemented error.
func NewUpdateBookingNotImplemented(body *UpdateBookingNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingServiceUnavailable builds a booking service update_booking
// endpoint service_unavailable error.
func NewUpdateBookingServiceUnavailable(body *UpdateBookingServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBookingGatewayTimeout builds a booking service update_booking
// endpoint gateway_timeout error.
func NewUpdateBookingGatewayTimeout(body *UpdateBookingGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusResponseOK builds a "booking" service
// "get_booking_status" endpoint result from a HTTP "OK" response.
func NewGetBookingStatusResponseOK(body *GetBookingStatusResponseBody) *booking.GetBookingStatusResponse {
	v := &booking.GetBookingStatusResponse{
		BookingID:        *body.BookingID,
		BookingStatus:    *body.BookingStatus,
		PrepaymentStatus: *body.PrepaymentStatus,
	}

	return v
}

// NewGetBookingStatusBadRequest builds a booking service get_booking_status
// endpoint bad_request error.
func NewGetBookingStatusBadRequest(body *GetBookingStatusBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusUnauthorized builds a booking service get_booking_status
// endpoint unauthorized error.
func NewGetBookingStatusUnauthorized(body *GetBookingStatusUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusForbidden builds a booking service get_booking_status
// endpoint forbidden error.
func NewGetBookingStatusForbidden(body *GetBookingStatusForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusNotFound builds a booking service get_booking_status
// endpoint not_found error.
func NewGetBookingStatusNotFound(body *GetBookingStatusNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusConflict builds a booking service get_booking_status
// endpoint conflict error.
func NewGetBookingStatusConflict(body *GetBookingStatusConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusTooManyRequests builds a booking service
// get_booking_status endpoint too_many_requests error.
func NewGetBookingStatusTooManyRequests(body *GetBookingStatusTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusClientClosedRequest builds a booking service
// get_booking_status endpoint client_closed_request error.
func NewGetBookingStatusClientClosedRequest(body *GetBookingStatusClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusInternalServerError builds a booking service
// get_booking_status endpoint internal_server_error error.
func NewGetBookingStatusInternalServerError(body *GetBookingStatusInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusNotImplemented builds a booking service
// get_booking_status endpoint not_implemented error.
func NewGetBookingStatusNotImplemented(body *GetBookingStatusNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusServiceUnavailable builds a booking service
// get_booking_status endpoint service_unavailable error.
func NewGetBookingStatusServiceUnavailable(body *GetBookingStatusServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBookingStatusGatewayTimeout builds a booking service
// get_booking_status endpoint gateway_timeout error.
func NewGetBookingStatusGatewayTimeout(body *GetBookingStatusGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsResponseOK builds a "booking" service "list_bookings"
// endpoint result from a HTTP "OK" response.
func NewListBookingsResponseOK(body *ListBookingsResponseBody) *booking.ListBookingsResponse {
	v := &booking.ListBookingsResponse{}
	v.Bookings = make([]*booking.Booking, len(body.Bookings))
	for i, val := range body.Bookings {
		v.Bookings[i] = unmarshalBookingResponseBodyToBookingBooking(val)
	}

	return v
}

// NewListBookingsBadRequest builds a booking service list_bookings endpoint
// bad_request error.
func NewListBookingsBadRequest(body *ListBookingsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsUnauthorized builds a booking service list_bookings endpoint
// unauthorized error.
func NewListBookingsUnauthorized(body *ListBookingsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsForbidden builds a booking service list_bookings endpoint
// forbidden error.
func NewListBookingsForbidden(body *ListBookingsForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsNotFound builds a booking service list_bookings endpoint
// not_found error.
func NewListBookingsNotFound(body *ListBookingsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsConflict builds a booking service list_bookings endpoint
// conflict error.
func NewListBookingsConflict(body *ListBookingsConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsTooManyRequests builds a booking service list_bookings
// endpoint too_many_requests error.
func NewListBookingsTooManyRequests(body *ListBookingsTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsClientClosedRequest builds a booking service list_bookings
// endpoint client_closed_request error.
func NewListBookingsClientClosedRequest(body *ListBookingsClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsInternalServerError builds a booking service list_bookings
// endpoint internal_server_error error.
func NewListBookingsInternalServerError(body *ListBookingsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsNotImplemented builds a booking service list_bookings
// endpoint not_implemented error.
func NewListBookingsNotImplemented(body *ListBookingsNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsServiceUnavailable builds a booking service list_bookings
// endpoint service_unavailable error.
func NewListBookingsServiceUnavailable(body *ListBookingsServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBookingsGatewayTimeout builds a booking service list_bookings
// endpoint gateway_timeout error.
func NewListBookingsGatewayTimeout(body *ListBookingsGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateBatchAvailabilityLookupResponseBody runs the validations defined on
// batch_availability_lookup_response_body
func ValidateBatchAvailabilityLookupResponseBody(body *BatchAvailabilityLookupResponseBody) (err error) {
	if body.SlotTimeAvailability == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot_time_availability", "body"))
	}
	for _, e := range body.SlotTimeAvailability {
		if e != nil {
			if err2 := ValidateSlotTimeAvailabilityResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCheckAvailabilityResponseBody runs the validations defined on
// check_availability_response_body
func ValidateCheckAvailabilityResponseBody(body *CheckAvailabilityResponseBody) (err error) {
	if body.Slot == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
	}
	if body.CountAvailable == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count_available", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotResponseBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DurationRequirement != nil {
		if !(*body.DurationRequirement == "DURATION_REQUIREMENT_UNSPECIFIED" || *body.DurationRequirement == "DO_NOT_SHOW_DURATION" || *body.DurationRequirement == "MUST_SHOW_DURATION") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.duration_requirement", *body.DurationRequirement, []interface{}{"DURATION_REQUIREMENT_UNSPECIFIED", "DO_NOT_SHOW_DURATION", "MUST_SHOW_DURATION"}))
		}
	}
	if body.AvailabilityUpdate != nil {
		if err2 := ValidateAvailabilityUpdateResponseBody(body.AvailabilityUpdate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateBookingResponseBody runs the validations defined on
// create_booking_response_body
func ValidateCreateBookingResponseBody(body *CreateBookingResponseBody) (err error) {
	if body.Booking == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking", "body"))
	}
	if body.Booking != nil {
		if err2 := ValidateBookingResponseBody(body.Booking); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UserPaymentOption != nil {
		if err2 := ValidateUserPaymentOptionResponseBody(body.UserPaymentOption); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.BookingFailure != nil {
		if err2 := ValidateBookingFailureResponseBody(body.BookingFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateBookingResponseBody runs the validations defined on
// update_booking_response_body
func ValidateUpdateBookingResponseBody(body *UpdateBookingResponseBody) (err error) {
	if body.Booking == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking", "body"))
	}
	if body.Booking != nil {
		if err2 := ValidateBookingResponseBody(body.Booking); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UserPaymentOption != nil {
		if err2 := ValidateUserPaymentOptionResponseBody(body.UserPaymentOption); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.BookingFailure != nil {
		if err2 := ValidateBookingFailureResponseBody(body.BookingFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetBookingStatusResponseBody runs the validations defined on
// get_booking_status_response_body
func ValidateGetBookingStatusResponseBody(body *GetBookingStatusResponseBody) (err error) {
	if body.BookingID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking_id", "body"))
	}
	if body.BookingStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking_status", "body"))
	}
	if body.PrepaymentStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prepayment_status", "body"))
	}
	if body.BookingStatus != nil {
		if !(*body.BookingStatus == "BOOKING_STATUS_UNSPECIFIED" || *body.BookingStatus == "CONFIRMED" || *body.BookingStatus == "PENDING_MERCHANT_CONFIRMATION" || *body.BookingStatus == "CANCELED" || *body.BookingStatus == "NO_SHOW" || *body.BookingStatus == "NO_SHOW_PENALIZED" || *body.BookingStatus == "FAILED" || *body.BookingStatus == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.booking_status", *body.BookingStatus, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.PrepaymentStatus != nil {
		if !(*body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || *body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || *body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", *body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
		}
	}
	return
}

// ValidateListBookingsResponseBody runs the validations defined on
// list_bookings_response_body
func ValidateListBookingsResponseBody(body *ListBookingsResponseBody) (err error) {
	if body.Bookings == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookings", "body"))
	}
	for _, e := range body.Bookings {
		if e != nil {
			if err2 := ValidateBookingResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBatchAvailabilityLookupBadRequestResponseBody runs the validations
// defined on batch_availability_lookup_bad_request_response_body
func ValidateBatchAvailabilityLookupBadRequestResponseBody(body *BatchAvailabilityLookupBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupUnauthorizedResponseBody runs the validations
// defined on batch_availability_lookup_unauthorized_response_body
func ValidateBatchAvailabilityLookupUnauthorizedResponseBody(body *BatchAvailabilityLookupUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupForbiddenResponseBody runs the validations
// defined on batch_availability_lookup_forbidden_response_body
func ValidateBatchAvailabilityLookupForbiddenResponseBody(body *BatchAvailabilityLookupForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupNotFoundResponseBody runs the validations
// defined on batch_availability_lookup_not_found_response_body
func ValidateBatchAvailabilityLookupNotFoundResponseBody(body *BatchAvailabilityLookupNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupConflictResponseBody runs the validations
// defined on batch_availability_lookup_conflict_response_body
func ValidateBatchAvailabilityLookupConflictResponseBody(body *BatchAvailabilityLookupConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupTooManyRequestsResponseBody runs the
// validations defined on
// batch_availability_lookup_too_many_requests_response_body
func ValidateBatchAvailabilityLookupTooManyRequestsResponseBody(body *BatchAvailabilityLookupTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupClientClosedRequestResponseBody runs the
// validations defined on
// batch_availability_lookup_client_closed_request_response_body
func ValidateBatchAvailabilityLookupClientClosedRequestResponseBody(body *BatchAvailabilityLookupClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupInternalServerErrorResponseBody runs the
// validations defined on
// batch_availability_lookup_internal_server_error_response_body
func ValidateBatchAvailabilityLookupInternalServerErrorResponseBody(body *BatchAvailabilityLookupInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupNotImplementedResponseBody runs the
// validations defined on
// batch_availability_lookup_not_implemented_response_body
func ValidateBatchAvailabilityLookupNotImplementedResponseBody(body *BatchAvailabilityLookupNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupServiceUnavailableResponseBody runs the
// validations defined on
// batch_availability_lookup_service_unavailable_response_body
func ValidateBatchAvailabilityLookupServiceUnavailableResponseBody(body *BatchAvailabilityLookupServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchAvailabilityLookupGatewayTimeoutResponseBody runs the
// validations defined on
// batch_availability_lookup_gateway_timeout_response_body
func ValidateBatchAvailabilityLookupGatewayTimeoutResponseBody(body *BatchAvailabilityLookupGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityBadRequestResponseBody runs the validations defined
// on check_availability_bad_request_response_body
func ValidateCheckAvailabilityBadRequestResponseBody(body *CheckAvailabilityBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityUnauthorizedResponseBody runs the validations
// defined on check_availability_unauthorized_response_body
func ValidateCheckAvailabilityUnauthorizedResponseBody(body *CheckAvailabilityUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityForbiddenResponseBody runs the validations defined
// on check_availability_forbidden_response_body
func ValidateCheckAvailabilityForbiddenResponseBody(body *CheckAvailabilityForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityNotFoundResponseBody runs the validations defined
// on check_availability_not_found_response_body
func ValidateCheckAvailabilityNotFoundResponseBody(body *CheckAvailabilityNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityConflictResponseBody runs the validations defined
// on check_availability_conflict_response_body
func ValidateCheckAvailabilityConflictResponseBody(body *CheckAvailabilityConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityTooManyRequestsResponseBody runs the validations
// defined on check_availability_too_many_requests_response_body
func ValidateCheckAvailabilityTooManyRequestsResponseBody(body *CheckAvailabilityTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityClientClosedRequestResponseBody runs the
// validations defined on check_availability_client_closed_request_response_body
func ValidateCheckAvailabilityClientClosedRequestResponseBody(body *CheckAvailabilityClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityInternalServerErrorResponseBody runs the
// validations defined on check_availability_internal_server_error_response_body
func ValidateCheckAvailabilityInternalServerErrorResponseBody(body *CheckAvailabilityInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityNotImplementedResponseBody runs the validations
// defined on check_availability_not_implemented_response_body
func ValidateCheckAvailabilityNotImplementedResponseBody(body *CheckAvailabilityNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityServiceUnavailableResponseBody runs the validations
// defined on check_availability_service_unavailable_response_body
func ValidateCheckAvailabilityServiceUnavailableResponseBody(body *CheckAvailabilityServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckAvailabilityGatewayTimeoutResponseBody runs the validations
// defined on check_availability_gateway_timeout_response_body
func ValidateCheckAvailabilityGatewayTimeoutResponseBody(body *CheckAvailabilityGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingBadRequestResponseBody runs the validations defined on
// create_booking_bad_request_response_body
func ValidateCreateBookingBadRequestResponseBody(body *CreateBookingBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingUnauthorizedResponseBody runs the validations defined
// on create_booking_unauthorized_response_body
func ValidateCreateBookingUnauthorizedResponseBody(body *CreateBookingUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingForbiddenResponseBody runs the validations defined on
// create_booking_forbidden_response_body
func ValidateCreateBookingForbiddenResponseBody(body *CreateBookingForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingNotFoundResponseBody runs the validations defined on
// create_booking_not_found_response_body
func ValidateCreateBookingNotFoundResponseBody(body *CreateBookingNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingConflictResponseBody runs the validations defined on
// create_booking_conflict_response_body
func ValidateCreateBookingConflictResponseBody(body *CreateBookingConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingTooManyRequestsResponseBody runs the validations
// defined on create_booking_too_many_requests_response_body
func ValidateCreateBookingTooManyRequestsResponseBody(body *CreateBookingTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingClientClosedRequestResponseBody runs the validations
// defined on create_booking_client_closed_request_response_body
func ValidateCreateBookingClientClosedRequestResponseBody(body *CreateBookingClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingInternalServerErrorResponseBody runs the validations
// defined on create_booking_internal_server_error_response_body
func ValidateCreateBookingInternalServerErrorResponseBody(body *CreateBookingInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingNotImplementedResponseBody runs the validations defined
// on create_booking_not_implemented_response_body
func ValidateCreateBookingNotImplementedResponseBody(body *CreateBookingNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingServiceUnavailableResponseBody runs the validations
// defined on create_booking_service_unavailable_response_body
func ValidateCreateBookingServiceUnavailableResponseBody(body *CreateBookingServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookingGatewayTimeoutResponseBody runs the validations defined
// on create_booking_gateway_timeout_response_body
func ValidateCreateBookingGatewayTimeoutResponseBody(body *CreateBookingGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingBadRequestResponseBody runs the validations defined on
// update_booking_bad_request_response_body
func ValidateUpdateBookingBadRequestResponseBody(body *UpdateBookingBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingUnauthorizedResponseBody runs the validations defined
// on update_booking_unauthorized_response_body
func ValidateUpdateBookingUnauthorizedResponseBody(body *UpdateBookingUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingForbiddenResponseBody runs the validations defined on
// update_booking_forbidden_response_body
func ValidateUpdateBookingForbiddenResponseBody(body *UpdateBookingForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingNotFoundResponseBody runs the validations defined on
// update_booking_not_found_response_body
func ValidateUpdateBookingNotFoundResponseBody(body *UpdateBookingNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingConflictResponseBody runs the validations defined on
// update_booking_conflict_response_body
func ValidateUpdateBookingConflictResponseBody(body *UpdateBookingConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingTooManyRequestsResponseBody runs the validations
// defined on update_booking_too_many_requests_response_body
func ValidateUpdateBookingTooManyRequestsResponseBody(body *UpdateBookingTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingClientClosedRequestResponseBody runs the validations
// defined on update_booking_client_closed_request_response_body
func ValidateUpdateBookingClientClosedRequestResponseBody(body *UpdateBookingClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingInternalServerErrorResponseBody runs the validations
// defined on update_booking_internal_server_error_response_body
func ValidateUpdateBookingInternalServerErrorResponseBody(body *UpdateBookingInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingNotImplementedResponseBody runs the validations defined
// on update_booking_not_implemented_response_body
func ValidateUpdateBookingNotImplementedResponseBody(body *UpdateBookingNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingServiceUnavailableResponseBody runs the validations
// defined on update_booking_service_unavailable_response_body
func ValidateUpdateBookingServiceUnavailableResponseBody(body *UpdateBookingServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBookingGatewayTimeoutResponseBody runs the validations defined
// on update_booking_gateway_timeout_response_body
func ValidateUpdateBookingGatewayTimeoutResponseBody(body *UpdateBookingGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusBadRequestResponseBody runs the validations defined
// on get_booking_status_bad_request_response_body
func ValidateGetBookingStatusBadRequestResponseBody(body *GetBookingStatusBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusUnauthorizedResponseBody runs the validations
// defined on get_booking_status_unauthorized_response_body
func ValidateGetBookingStatusUnauthorizedResponseBody(body *GetBookingStatusUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusForbiddenResponseBody runs the validations defined
// on get_booking_status_forbidden_response_body
func ValidateGetBookingStatusForbiddenResponseBody(body *GetBookingStatusForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusNotFoundResponseBody runs the validations defined on
// get_booking_status_not_found_response_body
func ValidateGetBookingStatusNotFoundResponseBody(body *GetBookingStatusNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusConflictResponseBody runs the validations defined on
// get_booking_status_conflict_response_body
func ValidateGetBookingStatusConflictResponseBody(body *GetBookingStatusConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusTooManyRequestsResponseBody runs the validations
// defined on get_booking_status_too_many_requests_response_body
func ValidateGetBookingStatusTooManyRequestsResponseBody(body *GetBookingStatusTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusClientClosedRequestResponseBody runs the validations
// defined on get_booking_status_client_closed_request_response_body
func ValidateGetBookingStatusClientClosedRequestResponseBody(body *GetBookingStatusClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusInternalServerErrorResponseBody runs the validations
// defined on get_booking_status_internal_server_error_response_body
func ValidateGetBookingStatusInternalServerErrorResponseBody(body *GetBookingStatusInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusNotImplementedResponseBody runs the validations
// defined on get_booking_status_not_implemented_response_body
func ValidateGetBookingStatusNotImplementedResponseBody(body *GetBookingStatusNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusServiceUnavailableResponseBody runs the validations
// defined on get_booking_status_service_unavailable_response_body
func ValidateGetBookingStatusServiceUnavailableResponseBody(body *GetBookingStatusServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBookingStatusGatewayTimeoutResponseBody runs the validations
// defined on get_booking_status_gateway_timeout_response_body
func ValidateGetBookingStatusGatewayTimeoutResponseBody(body *GetBookingStatusGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsBadRequestResponseBody runs the validations defined on
// list_bookings_bad_request_response_body
func ValidateListBookingsBadRequestResponseBody(body *ListBookingsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsUnauthorizedResponseBody runs the validations defined on
// list_bookings_unauthorized_response_body
func ValidateListBookingsUnauthorizedResponseBody(body *ListBookingsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsForbiddenResponseBody runs the validations defined on
// list_bookings_forbidden_response_body
func ValidateListBookingsForbiddenResponseBody(body *ListBookingsForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsNotFoundResponseBody runs the validations defined on
// list_bookings_not_found_response_body
func ValidateListBookingsNotFoundResponseBody(body *ListBookingsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsConflictResponseBody runs the validations defined on
// list_bookings_conflict_response_body
func ValidateListBookingsConflictResponseBody(body *ListBookingsConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsTooManyRequestsResponseBody runs the validations defined
// on list_bookings_too_many_requests_response_body
func ValidateListBookingsTooManyRequestsResponseBody(body *ListBookingsTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsClientClosedRequestResponseBody runs the validations
// defined on list_bookings_client_closed_request_response_body
func ValidateListBookingsClientClosedRequestResponseBody(body *ListBookingsClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsInternalServerErrorResponseBody runs the validations
// defined on list_bookings_internal_server_error_response_body
func ValidateListBookingsInternalServerErrorResponseBody(body *ListBookingsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsNotImplementedResponseBody runs the validations defined
// on list_bookings_not_implemented_response_body
func ValidateListBookingsNotImplementedResponseBody(body *ListBookingsNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsServiceUnavailableResponseBody runs the validations
// defined on list_bookings_service_unavailable_response_body
func ValidateListBookingsServiceUnavailableResponseBody(body *ListBookingsServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBookingsGatewayTimeoutResponseBody runs the validations defined
// on list_bookings_gateway_timeout_response_body
func ValidateListBookingsGatewayTimeoutResponseBody(body *ListBookingsGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSlotTimeRequestBodyRequestBody runs the validations defined on
// SlotTimeRequestBodyRequestBody
func ValidateSlotTimeRequestBodyRequestBody(body *SlotTimeRequestBodyRequestBody) (err error) {
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateSlotTimeAvailabilityResponseBody runs the validations defined on
// SlotTimeAvailabilityResponseBody
func ValidateSlotTimeAvailabilityResponseBody(body *SlotTimeAvailabilityResponseBody) (err error) {
	if body.SlotTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot_time", "body"))
	}
	if body.Available == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("available", "body"))
	}
	if body.SlotTime != nil {
		if err2 := ValidateSlotTimeResponseBody(body.SlotTime); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSlotTimeResponseBody runs the validations defined on
// SlotTimeResponseBody
func ValidateSlotTimeResponseBody(body *SlotTimeResponseBody) (err error) {
	if body.ServiceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_id", "body"))
	}
	if body.StartSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_sec", "body"))
	}
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateSlotRequestBodyRequestBody runs the validations defined on
// SlotRequestBodyRequestBody
func ValidateSlotRequestBodyRequestBody(body *SlotRequestBodyRequestBody) (err error) {
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateSlotResponseBody runs the validations defined on SlotResponseBody
func ValidateSlotResponseBody(body *SlotResponseBody) (err error) {
	if body.ConfirmationMode != nil {
		if !(*body.ConfirmationMode == "CONFIRMATION_MODE_UNSPECIFIED" || *body.ConfirmationMode == "CONFIRMATION_MODE_SYNCHRONOUS" || *body.ConfirmationMode == "CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.confirmation_mode", *body.ConfirmationMode, []interface{}{"CONFIRMATION_MODE_UNSPECIFIED", "CONFIRMATION_MODE_SYNCHRONOUS", "CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateAvailabilityUpdateResponseBody runs the validations defined on
// AvailabilityUpdateResponseBody
func ValidateAvailabilityUpdateResponseBody(body *AvailabilityUpdateResponseBody) (err error) {
	if body.SlotAvailability == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot_availability", "body"))
	}
	for _, e := range body.SlotAvailability {
		if e != nil {
			if err2 := ValidateSlotAvailabilityResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSlotAvailabilityResponseBody runs the validations defined on
// SlotAvailabilityResponseBody
func ValidateSlotAvailabilityResponseBody(body *SlotAvailabilityResponseBody) (err error) {
	if body.Slot == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slot", "body"))
	}
	if body.CountAvailable == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count_available", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotResponseBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePaymentInformationRequestBodyRequestBody runs the validations
// defined on PaymentInformationRequestBodyRequestBody
func ValidatePaymentInformationRequestBodyRequestBody(body *PaymentInformationRequestBodyRequestBody) (err error) {
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if !(body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeRequestBodyRequestBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
	}
	return
}

// ValidateDepositRequestBodyRequestBody runs the validations defined on
// DepositRequestBodyRequestBody
func ValidateDepositRequestBodyRequestBody(body *DepositRequestBodyRequestBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if !(body.DepositType == "FIXED_RATE_DEFAULT" || body.DepositType == "PER_PERSON") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
	}
	return
}

// ValidateNoShowFeeRequestBodyRequestBody runs the validations defined on
// NoShowFeeRequestBodyRequestBody
func ValidateNoShowFeeRequestBodyRequestBody(body *NoShowFeeRequestBodyRequestBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if !(body.FeeType == "FIXED_RATE_DEFAULT" || body.FeeType == "PER_PERSON") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
	}
	return
}

// ValidatePaymentProcessingParametersRequestBodyRequestBody runs the
// validations defined on PaymentProcessingParametersRequestBodyRequestBody
func ValidatePaymentProcessingParametersRequestBodyRequestBody(body *PaymentProcessingParametersRequestBodyRequestBody) (err error) {
	if !(body.Processor == "PAYMENT_PROCESSOR_UNSPECIFIED" || body.Processor == "PROCESSOR_STRIPE" || body.Processor == "PROCESSOR_BRAINTREE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.processor", body.Processor, []interface{}{"PAYMENT_PROCESSOR_UNSPECIFIED", "PROCESSOR_STRIPE", "PROCESSOR_BRAINTREE"}))
	}
	if body.TokenizationConfig != nil {
		if err2 := ValidateTokenizationConfigRequestBodyRequestBody(body.TokenizationConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenizationConfigRequestBodyRequestBody runs the validations
// defined on TokenizationConfigRequestBodyRequestBody
func ValidateTokenizationConfigRequestBodyRequestBody(body *TokenizationConfigRequestBodyRequestBody) (err error) {
	if body.TokenizationParameter == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tokenization_parameter", "body"))
	}
	if body.CardNetworkParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network_parameters", "body"))
	}
	if body.AllowedAuthMethods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_auth_methods", "body"))
	}
	if !(body.BillingInformationFormat == "BILLING_INFORMATION_FORMAT_UNSPECIFIED" || body.BillingInformationFormat == "MIN" || body.BillingInformationFormat == "FULL") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.billing_information_format", body.BillingInformationFormat, []interface{}{"BILLING_INFORMATION_FORMAT_UNSPECIFIED", "MIN", "FULL"}))
	}
	for _, e := range body.CardNetworkParameters {
		if e != nil {
			if err2 := ValidateCardNetworkParametersRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.AllowedAuthMethods {
		if !(e == "AUTH_METHOD_UNSPECIFIED" || e == "PAN_ONLY" || e == "CRYPTOGRAM_3DS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.allowed_auth_methods[*]", e, []interface{}{"AUTH_METHOD_UNSPECIFIED", "PAN_ONLY", "CRYPTOGRAM_3DS"}))
		}
	}
	return
}

// ValidateCardNetworkParametersRequestBodyRequestBody runs the validations
// defined on CardNetworkParametersRequestBodyRequestBody
func ValidateCardNetworkParametersRequestBodyRequestBody(body *CardNetworkParametersRequestBodyRequestBody) (err error) {
	if !(body.CardNetwork == "CREDIT_CARD_TYPE_UNSPECIFIED" || body.CardNetwork == "VISA" || body.CardNetwork == "MASTERCARD" || body.CardNetwork == "AMERICAN_EXPRESS" || body.CardNetwork == "DISCOVER" || body.CardNetwork == "JCB") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.card_network", body.CardNetwork, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
	}
	return
}

// ValidateBookingResponseBody runs the validations defined on
// BookingResponseBody
func ValidateBookingResponseBody(body *BookingResponseBody) (err error) {
	if body.BookingID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("booking_id", "body"))
	}
	if body.Slot != nil {
		if err2 := ValidateSlotResponseBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.UserInformation != nil {
		if err2 := ValidateUserInformationResponseBody(body.UserInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationResponseBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.OfferInfo != nil {
		if err2 := ValidateOfferInfoResponseBody(body.OfferInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserInformationResponseBody runs the validations defined on
// UserInformationResponseBody
func ValidateUserInformationResponseBody(body *UserInformationResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.GivenName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("given_name", "body"))
	}
	if body.FamilyName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("family_name", "body"))
	}
	if body.Telephone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("telephone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Address != nil {
		if err2 := ValidatePostalAddressResponseBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePostalAddressResponseBody runs the validations defined on
// PostalAddressResponseBody
func ValidatePostalAddressResponseBody(body *PostalAddressResponseBody) (err error) {
	if body.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country", "body"))
	}
	if body.Locality == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locality", "body"))
	}
	if body.PostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postal_code", "body"))
	}
	if body.StreetAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("street_address", "body"))
	}
	return
}

// ValidatePaymentInformationResponseBody runs the validations defined on
// PaymentInformationResponseBody
func ValidatePaymentInformationResponseBody(body *PaymentInformationResponseBody) (err error) {
	if body.PrepaymentStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prepayment_status", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.PaymentProcessedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processed_by", "body"))
	}
	if body.PrepaymentStatus != nil {
		if !(*body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || *body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || *body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", *body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceResponseBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.TaxAmount != nil {
		if err2 := ValidatePriceResponseBody(body.TaxAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Fees != nil {
		if err2 := ValidatePriceResponseBody(body.Fees); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeesAndTaxes != nil {
		if err2 := ValidatePriceResponseBody(body.FeesAndTaxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositResponseBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeResponseBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessedBy != nil {
		if !(*body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || *body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || *body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", *body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
		}
	}
	return
}

// ValidatePriceResponseBody runs the validations defined on PriceResponseBody
func ValidatePriceResponseBody(body *PriceResponseBody) (err error) {
	if body.PriceMicros == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price_micros", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_code", "body"))
	}
	return
}

// ValidateDepositResponseBody runs the validations defined on
// DepositResponseBody
func ValidateDepositResponseBody(body *DepositResponseBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if body.MinAdvanceCancellationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_advance_cancellation_sec", "body"))
	}
	if body.DepositType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit_type", "body"))
	}
	if body.Deposit != nil {
		if err2 := ValidatePriceResponseBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DepositType != nil {
		if !(*body.DepositType == "FIXED_RATE_DEFAULT" || *body.DepositType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", *body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateNoShowFeeResponseBody runs the validations defined on
// NoShowFeeResponseBody
func ValidateNoShowFeeResponseBody(body *NoShowFeeResponseBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if body.FeeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_type", "body"))
	}
	if body.Fee != nil {
		if err2 := ValidatePriceResponseBody(body.Fee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeeType != nil {
		if !(*body.FeeType == "FIXED_RATE_DEFAULT" || *body.FeeType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", *body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateOfferInfoResponseBody runs the validations defined on
// OfferInfoResponseBody
func ValidateOfferInfoResponseBody(body *OfferInfoResponseBody) (err error) {
	if body.OfferID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offer_id", "body"))
	}
	return
}

// ValidateUserPaymentOptionResponseBody runs the validations defined on
// UserPaymentOptionResponseBody
func ValidateUserPaymentOptionResponseBody(body *UserPaymentOptionResponseBody) (err error) {
	if body.UserPaymentOptionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_payment_option_id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.OriginalCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("original_count", "body"))
	}
	if body.CurrentCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_count", "body"))
	}
	if body.PaymentOptionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_option_id", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "PAYMENT_OPTION_TYPE_UNSPECIFIED" || *body.Type == "PAYMENT_OPTION_SINGLE_USE" || *body.Type == "PAYMENT_OPTION_MULTI_USE" || *body.Type == "PAYMENT_OPTION_UNLIMITED_USE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"PAYMENT_OPTION_TYPE_UNSPECIFIED", "PAYMENT_OPTION_SINGLE_USE", "PAYMENT_OPTION_MULTI_USE", "PAYMENT_OPTION_UNLIMITED_USE"}))
		}
	}
	return
}

// ValidateBookingFailureResponseBody runs the validations defined on
// BookingFailureResponseBody
func ValidateBookingFailureResponseBody(body *BookingFailureResponseBody) (err error) {
	if body.Cause == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cause", "body"))
	}
	if body.Cause != nil {
		if !(*body.Cause == "CAUSE_UNSPECIFIED" || *body.Cause == "SLOT_UNAVAILABLE" || *body.Cause == "SLOT_ALREADY_BOOKED_BY_USER" || *body.Cause == "LEASE_EXPIRED" || *body.Cause == "OUTSIDE_CANCELLATION_WINDOW" || *body.Cause == "PAYMENT_ERROR_CARD_TYPE_REJECTED" || *body.Cause == "PAYMENT_ERROR_CARD_DECLINED" || *body.Cause == "PAYMENT_OPTION_NOT_VALID" || *body.Cause == "PAYMENT_ERROR" || *body.Cause == "USER_CANNOT_USE_PAYMENT_OPTION" || *body.Cause == "BOOKING_ALREADY_CANCELLED" || *body.Cause == "BOOKING_NOT_CANCELLABLE" || *body.Cause == "OVERLAPPING_RESERVATION" || *body.Cause == "USER_OVER_BOOKING_LIMIT" || *body.Cause == "OFFER_UNAVAILABLE" || *body.Cause == "DEAL_UNAVAILABLE" || *body.Cause == "PAYMENT_REQUIRES_3DS1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.cause", *body.Cause, []interface{}{"CAUSE_UNSPECIFIED", "SLOT_UNAVAILABLE", "SLOT_ALREADY_BOOKED_BY_USER", "LEASE_EXPIRED", "OUTSIDE_CANCELLATION_WINDOW", "PAYMENT_ERROR_CARD_TYPE_REJECTED", "PAYMENT_ERROR_CARD_DECLINED", "PAYMENT_OPTION_NOT_VALID", "PAYMENT_ERROR", "USER_CANNOT_USE_PAYMENT_OPTION", "BOOKING_ALREADY_CANCELLED", "BOOKING_NOT_CANCELLABLE", "OVERLAPPING_RESERVATION", "USER_OVER_BOOKING_LIMIT", "OFFER_UNAVAILABLE", "DEAL_UNAVAILABLE", "PAYMENT_REQUIRES_3DS1"}))
		}
	}
	if body.RejectedCardType != nil {
		if !(*body.RejectedCardType == "CREDIT_CARD_TYPE_UNSPECIFIED" || *body.RejectedCardType == "VISA" || *body.RejectedCardType == "MASTERCARD" || *body.RejectedCardType == "AMERICAN_EXPRESS" || *body.RejectedCardType == "DISCOVER" || *body.RejectedCardType == "JCB") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.rejected_card_type", *body.RejectedCardType, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
		}
	}
	if body.PaymentFailure != nil {
		if err2 := ValidatePaymentFailureInformationResponseBody(body.PaymentFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePaymentFailureInformationResponseBody runs the validations defined
// on PaymentFailureInformationResponseBody
func ValidatePaymentFailureInformationResponseBody(body *PaymentFailureInformationResponseBody) (err error) {
	if body.Threeds1Parameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("threeds1_parameters", "body"))
	}
	if body.Threeds1Parameters != nil {
		if err2 := ValidateThreeDS1ParametersResponseBody(body.Threeds1Parameters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateThreeDS1ParametersResponseBody runs the validations defined on
// ThreeDS1ParametersResponseBody
func ValidateThreeDS1ParametersResponseBody(body *ThreeDS1ParametersResponseBody) (err error) {
	if body.AcsURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acs_url", "body"))
	}
	if body.PaReq == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pa_req", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transaction_id", "body"))
	}
	if body.MdMerchantData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("md_merchant_data", "body"))
	}
	return
}

// ValidateBookingRequestBodyRequestBody runs the validations defined on
// BookingRequestBodyRequestBody
func ValidateBookingRequestBodyRequestBody(body *BookingRequestBodyRequestBody) (err error) {
	if body.Slot != nil {
		if err2 := ValidateSlotRequestBodyRequestBody(body.Slot); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
