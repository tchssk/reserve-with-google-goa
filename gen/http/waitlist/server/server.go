// Code generated by goa v3.2.4, DO NOT EDIT.
//
// waitlist HTTP server
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package server

import (
	"context"
	"net/http"

	waitlist "github.com/tchssk/reserve-with-google-goa/gen/waitlist"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the waitlist service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	BatchGetWaitEstimates http.Handler
	CreateWaitlistEntry   http.Handler
	GetWaitlistEntry      http.Handler
	DeleteWaitlistEntry   http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the waitlist service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *waitlist.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"BatchGetWaitEstimates", "POST", "/v3/BatchGetWaitEstimates"},
			{"CreateWaitlistEntry", "POST", "/v3/CreateWaitlistEntry"},
			{"GetWaitlistEntry", "POST", "/v3/GetWaitlistEntry"},
			{"DeleteWaitlistEntry", "POST", "/v3/DeleteWaitlistEntry"},
		},
		BatchGetWaitEstimates: NewBatchGetWaitEstimatesHandler(e.BatchGetWaitEstimates, mux, decoder, encoder, errhandler, formatter),
		CreateWaitlistEntry:   NewCreateWaitlistEntryHandler(e.CreateWaitlistEntry, mux, decoder, encoder, errhandler, formatter),
		GetWaitlistEntry:      NewGetWaitlistEntryHandler(e.GetWaitlistEntry, mux, decoder, encoder, errhandler, formatter),
		DeleteWaitlistEntry:   NewDeleteWaitlistEntryHandler(e.DeleteWaitlistEntry, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "waitlist" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.BatchGetWaitEstimates = m(s.BatchGetWaitEstimates)
	s.CreateWaitlistEntry = m(s.CreateWaitlistEntry)
	s.GetWaitlistEntry = m(s.GetWaitlistEntry)
	s.DeleteWaitlistEntry = m(s.DeleteWaitlistEntry)
}

// Mount configures the mux to serve the waitlist endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountBatchGetWaitEstimatesHandler(mux, h.BatchGetWaitEstimates)
	MountCreateWaitlistEntryHandler(mux, h.CreateWaitlistEntry)
	MountGetWaitlistEntryHandler(mux, h.GetWaitlistEntry)
	MountDeleteWaitlistEntryHandler(mux, h.DeleteWaitlistEntry)
}

// MountBatchGetWaitEstimatesHandler configures the mux to serve the "waitlist"
// service "batch_get_wait_estimates" endpoint.
func MountBatchGetWaitEstimatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/BatchGetWaitEstimates", f)
}

// NewBatchGetWaitEstimatesHandler creates a HTTP handler which loads the HTTP
// request and calls the "waitlist" service "batch_get_wait_estimates" endpoint.
func NewBatchGetWaitEstimatesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBatchGetWaitEstimatesRequest(mux, decoder)
		encodeResponse = EncodeBatchGetWaitEstimatesResponse(encoder)
		encodeError    = EncodeBatchGetWaitEstimatesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "batch_get_wait_estimates")
		ctx = context.WithValue(ctx, goa.ServiceKey, "waitlist")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateWaitlistEntryHandler configures the mux to serve the "waitlist"
// service "create_waitlist_entry" endpoint.
func MountCreateWaitlistEntryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/CreateWaitlistEntry", f)
}

// NewCreateWaitlistEntryHandler creates a HTTP handler which loads the HTTP
// request and calls the "waitlist" service "create_waitlist_entry" endpoint.
func NewCreateWaitlistEntryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateWaitlistEntryRequest(mux, decoder)
		encodeResponse = EncodeCreateWaitlistEntryResponse(encoder)
		encodeError    = EncodeCreateWaitlistEntryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_waitlist_entry")
		ctx = context.WithValue(ctx, goa.ServiceKey, "waitlist")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetWaitlistEntryHandler configures the mux to serve the "waitlist"
// service "get_waitlist_entry" endpoint.
func MountGetWaitlistEntryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/GetWaitlistEntry", f)
}

// NewGetWaitlistEntryHandler creates a HTTP handler which loads the HTTP
// request and calls the "waitlist" service "get_waitlist_entry" endpoint.
func NewGetWaitlistEntryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetWaitlistEntryRequest(mux, decoder)
		encodeResponse = EncodeGetWaitlistEntryResponse(encoder)
		encodeError    = EncodeGetWaitlistEntryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_waitlist_entry")
		ctx = context.WithValue(ctx, goa.ServiceKey, "waitlist")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteWaitlistEntryHandler configures the mux to serve the "waitlist"
// service "delete_waitlist_entry" endpoint.
func MountDeleteWaitlistEntryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/DeleteWaitlistEntry", f)
}

// NewDeleteWaitlistEntryHandler creates a HTTP handler which loads the HTTP
// request and calls the "waitlist" service "delete_waitlist_entry" endpoint.
func NewDeleteWaitlistEntryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteWaitlistEntryRequest(mux, decoder)
		encodeResponse = EncodeDeleteWaitlistEntryResponse(encoder)
		encodeError    = EncodeDeleteWaitlistEntryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_waitlist_entry")
		ctx = context.WithValue(ctx, goa.ServiceKey, "waitlist")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
