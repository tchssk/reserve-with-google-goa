// Code generated by goa v3.2.4, DO NOT EDIT.
//
// waitlist HTTP client types
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	waitlist "github.com/tchssk/reserve-with-google-goa/gen/waitlist"
	goa "goa.design/goa/v3/pkg"
)

// BatchGetWaitEstimatesRequestBody is the type of the "waitlist" service
// "batch_get_wait_estimates" endpoint HTTP request body.
type BatchGetWaitEstimatesRequestBody struct {
	MerchantID string  `form:"merchant_id" json:"merchant_id" xml:"merchant_id"`
	ServiceID  string  `form:"service_id" json:"service_id" xml:"service_id"`
	PartySize  []int32 `form:"party_size" json:"party_size" xml:"party_size"`
}

// CreateWaitlistEntryRequestBody is the type of the "waitlist" service
// "create_waitlist_entry" endpoint HTTP request body.
type CreateWaitlistEntryRequestBody struct {
	MerchantID        string                                 `form:"merchant_id" json:"merchant_id" xml:"merchant_id"`
	ServiceID         string                                 `form:"service_id" json:"service_id" xml:"service_id"`
	PartySize         int32                                  `form:"party_size" json:"party_size" xml:"party_size"`
	UserInformation   *UserInformationRequestBodyRequestBody `form:"user_information" json:"user_information" xml:"user_information"`
	AdditionalRequest *string                                `form:"additional_request,omitempty" json:"additional_request,omitempty" xml:"additional_request,omitempty"`
	IdempotencyToken  string                                 `form:"idempotency_token" json:"idempotency_token" xml:"idempotency_token"`
}

// GetWaitlistEntryRequestBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP request body.
type GetWaitlistEntryRequestBody struct {
	WaitlistEntryID string `form:"waitlist_entry_id" json:"waitlist_entry_id" xml:"waitlist_entry_id"`
}

// DeleteWaitlistEntryRequestBody is the type of the "waitlist" service
// "delete_waitlist_entry" endpoint HTTP request body.
type DeleteWaitlistEntryRequestBody struct {
	WaitlistEntryID string `form:"waitlist_entry_id" json:"waitlist_entry_id" xml:"waitlist_entry_id"`
}

// BatchGetWaitEstimatesResponseBody is the type of the "waitlist" service
// "batch_get_wait_estimates" endpoint HTTP response body.
type BatchGetWaitEstimatesResponseBody struct {
	WaitlistStatus *string                     `form:"waitlist_status,omitempty" json:"waitlist_status,omitempty" xml:"waitlist_status,omitempty"`
	WaitEstimate   []*WaitEstimateResponseBody `form:"wait_estimate,omitempty" json:"wait_estimate,omitempty" xml:"wait_estimate,omitempty"`
}

// CreateWaitlistEntryResponseBody is the type of the "waitlist" service
// "create_waitlist_entry" endpoint HTTP response body.
type CreateWaitlistEntryResponseBody struct {
	WaitlistEntryID              *string                                   `form:"waitlist_entry_id,omitempty" json:"waitlist_entry_id,omitempty" xml:"waitlist_entry_id,omitempty"`
	WaitlistBusinessLogicFailure *WaitlistBusinessLogicFailureResponseBody `form:"waitlist_business_logic_failure,omitempty" json:"waitlist_business_logic_failure,omitempty" xml:"waitlist_business_logic_failure,omitempty"`
}

// GetWaitlistEntryResponseBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP response body.
type GetWaitlistEntryResponseBody struct {
	WaitlistEntry *WaitlistEntryResponseBody `form:"waitlist_entry,omitempty" json:"waitlist_entry,omitempty" xml:"waitlist_entry,omitempty"`
}

// BatchGetWaitEstimatesBadRequestResponseBody is the type of the "waitlist"
// service "batch_get_wait_estimates" endpoint HTTP response body for the
// "bad_request" error.
type BatchGetWaitEstimatesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesUnauthorizedResponseBody is the type of the "waitlist"
// service "batch_get_wait_estimates" endpoint HTTP response body for the
// "unauthorized" error.
type BatchGetWaitEstimatesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesForbiddenResponseBody is the type of the "waitlist"
// service "batch_get_wait_estimates" endpoint HTTP response body for the
// "forbidden" error.
type BatchGetWaitEstimatesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesNotFoundResponseBody is the type of the "waitlist"
// service "batch_get_wait_estimates" endpoint HTTP response body for the
// "not_found" error.
type BatchGetWaitEstimatesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesConflictResponseBody is the type of the "waitlist"
// service "batch_get_wait_estimates" endpoint HTTP response body for the
// "conflict" error.
type BatchGetWaitEstimatesConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesTooManyRequestsResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "too_many_requests" error.
type BatchGetWaitEstimatesTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesClientClosedRequestResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "client_closed_request" error.
type BatchGetWaitEstimatesClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesInternalServerErrorResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "internal_server_error" error.
type BatchGetWaitEstimatesInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesNotImplementedResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "not_implemented" error.
type BatchGetWaitEstimatesNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesServiceUnavailableResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "service_unavailable" error.
type BatchGetWaitEstimatesServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BatchGetWaitEstimatesGatewayTimeoutResponseBody is the type of the
// "waitlist" service "batch_get_wait_estimates" endpoint HTTP response body
// for the "gateway_timeout" error.
type BatchGetWaitEstimatesGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryBadRequestResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "bad_request" error.
type CreateWaitlistEntryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryUnauthorizedResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "unauthorized" error.
type CreateWaitlistEntryUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryForbiddenResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "forbidden" error.
type CreateWaitlistEntryForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryNotFoundResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "not_found" error.
type CreateWaitlistEntryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryConflictResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "conflict" error.
type CreateWaitlistEntryConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryTooManyRequestsResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "too_many_requests" error.
type CreateWaitlistEntryTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryClientClosedRequestResponseBody is the type of the
// "waitlist" service "create_waitlist_entry" endpoint HTTP response body for
// the "client_closed_request" error.
type CreateWaitlistEntryClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryInternalServerErrorResponseBody is the type of the
// "waitlist" service "create_waitlist_entry" endpoint HTTP response body for
// the "internal_server_error" error.
type CreateWaitlistEntryInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryNotImplementedResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "not_implemented" error.
type CreateWaitlistEntryNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryServiceUnavailableResponseBody is the type of the
// "waitlist" service "create_waitlist_entry" endpoint HTTP response body for
// the "service_unavailable" error.
type CreateWaitlistEntryServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateWaitlistEntryGatewayTimeoutResponseBody is the type of the "waitlist"
// service "create_waitlist_entry" endpoint HTTP response body for the
// "gateway_timeout" error.
type CreateWaitlistEntryGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryBadRequestResponseBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP response body for the "bad_request" error.
type GetWaitlistEntryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryUnauthorizedResponseBody is the type of the "waitlist"
// service "get_waitlist_entry" endpoint HTTP response body for the
// "unauthorized" error.
type GetWaitlistEntryUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryForbiddenResponseBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP response body for the "forbidden" error.
type GetWaitlistEntryForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryNotFoundResponseBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP response body for the "not_found" error.
type GetWaitlistEntryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryConflictResponseBody is the type of the "waitlist" service
// "get_waitlist_entry" endpoint HTTP response body for the "conflict" error.
type GetWaitlistEntryConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryTooManyRequestsResponseBody is the type of the "waitlist"
// service "get_waitlist_entry" endpoint HTTP response body for the
// "too_many_requests" error.
type GetWaitlistEntryTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryClientClosedRequestResponseBody is the type of the
// "waitlist" service "get_waitlist_entry" endpoint HTTP response body for the
// "client_closed_request" error.
type GetWaitlistEntryClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryInternalServerErrorResponseBody is the type of the
// "waitlist" service "get_waitlist_entry" endpoint HTTP response body for the
// "internal_server_error" error.
type GetWaitlistEntryInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryNotImplementedResponseBody is the type of the "waitlist"
// service "get_waitlist_entry" endpoint HTTP response body for the
// "not_implemented" error.
type GetWaitlistEntryNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryServiceUnavailableResponseBody is the type of the "waitlist"
// service "get_waitlist_entry" endpoint HTTP response body for the
// "service_unavailable" error.
type GetWaitlistEntryServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetWaitlistEntryGatewayTimeoutResponseBody is the type of the "waitlist"
// service "get_waitlist_entry" endpoint HTTP response body for the
// "gateway_timeout" error.
type GetWaitlistEntryGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryBadRequestResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "bad_request" error.
type DeleteWaitlistEntryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryUnauthorizedResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteWaitlistEntryUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryForbiddenResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "forbidden" error.
type DeleteWaitlistEntryForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryNotFoundResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "not_found" error.
type DeleteWaitlistEntryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryConflictResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "conflict" error.
type DeleteWaitlistEntryConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryTooManyRequestsResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "too_many_requests" error.
type DeleteWaitlistEntryTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryClientClosedRequestResponseBody is the type of the
// "waitlist" service "delete_waitlist_entry" endpoint HTTP response body for
// the "client_closed_request" error.
type DeleteWaitlistEntryClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryInternalServerErrorResponseBody is the type of the
// "waitlist" service "delete_waitlist_entry" endpoint HTTP response body for
// the "internal_server_error" error.
type DeleteWaitlistEntryInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryNotImplementedResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "not_implemented" error.
type DeleteWaitlistEntryNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryServiceUnavailableResponseBody is the type of the
// "waitlist" service "delete_waitlist_entry" endpoint HTTP response body for
// the "service_unavailable" error.
type DeleteWaitlistEntryServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteWaitlistEntryGatewayTimeoutResponseBody is the type of the "waitlist"
// service "delete_waitlist_entry" endpoint HTTP response body for the
// "gateway_timeout" error.
type DeleteWaitlistEntryGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// WaitEstimateResponseBody is used to define fields on response body types.
type WaitEstimateResponseBody struct {
	PartySize                *int32                  `form:"party_size,omitempty" json:"party_size,omitempty" xml:"party_size,omitempty"`
	WaitLength               *WaitLengthResponseBody `form:"wait_length,omitempty" json:"wait_length,omitempty" xml:"wait_length,omitempty"`
	WaitlistConfirmationMode *string                 `form:"waitlist_confirmation_mode,omitempty" json:"waitlist_confirmation_mode,omitempty" xml:"waitlist_confirmation_mode,omitempty"`
}

// WaitLengthResponseBody is used to define fields on response body types.
type WaitLengthResponseBody struct {
	PartiesAheadCount      *int32                              `form:"parties_ahead_count,omitempty" json:"parties_ahead_count,omitempty" xml:"parties_ahead_count,omitempty"`
	EstimatedSeatTimeRange *EstimatedSeatTimeRangeResponseBody `form:"estimated_seat_time_range,omitempty" json:"estimated_seat_time_range,omitempty" xml:"estimated_seat_time_range,omitempty"`
}

// EstimatedSeatTimeRangeResponseBody is used to define fields on response body
// types.
type EstimatedSeatTimeRangeResponseBody struct {
	StartSeconds *string `form:"start_seconds,omitempty" json:"start_seconds,omitempty" xml:"start_seconds,omitempty"`
	EndSeconds   *string `form:"end_seconds,omitempty" json:"end_seconds,omitempty" xml:"end_seconds,omitempty"`
}

// UserInformationRequestBodyRequestBody is used to define fields on request
// body types.
type UserInformationRequestBodyRequestBody struct {
	UserID       string                               `form:"user_id" json:"user_id" xml:"user_id"`
	GivenName    string                               `form:"given_name" json:"given_name" xml:"given_name"`
	FamilyName   string                               `form:"family_name" json:"family_name" xml:"family_name"`
	Address      *PostalAddressRequestBodyRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    string                               `form:"telephone" json:"telephone" xml:"telephone"`
	Email        string                               `form:"email" json:"email" xml:"email"`
	LanguageCode *string                              `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressRequestBodyRequestBody is used to define fields on request body
// types.
type PostalAddressRequestBodyRequestBody struct {
	Country       string  `form:"country" json:"country" xml:"country"`
	Locality      string  `form:"locality" json:"locality" xml:"locality"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    string  `form:"postal_code" json:"postal_code" xml:"postal_code"`
	StreetAddress string  `form:"street_address" json:"street_address" xml:"street_address"`
}

// WaitlistBusinessLogicFailureResponseBody is used to define fields on
// response body types.
type WaitlistBusinessLogicFailureResponseBody struct {
	Cause       *string `form:"cause,omitempty" json:"cause,omitempty" xml:"cause,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// WaitlistEntryResponseBody is used to define fields on response body types.
type WaitlistEntryResponseBody struct {
	WaitlistEntryState      *string                              `form:"waitlist_entry_state,omitempty" json:"waitlist_entry_state,omitempty" xml:"waitlist_entry_state,omitempty"`
	WaitlistEntryStateTimes *WaitlistEntryStateTimesResponseBody `form:"waitlist_entry_state_times,omitempty" json:"waitlist_entry_state_times,omitempty" xml:"waitlist_entry_state_times,omitempty"`
	WaitEstimate            *WaitEstimateResponseBody            `form:"wait_estimate,omitempty" json:"wait_estimate,omitempty" xml:"wait_estimate,omitempty"`
}

// WaitlistEntryStateTimesResponseBody is used to define fields on response
// body types.
type WaitlistEntryStateTimesResponseBody struct {
	CreatedTimeSeconds        *string `form:"created_time_seconds,omitempty" json:"created_time_seconds,omitempty" xml:"created_time_seconds,omitempty"`
	CanceledTimeSeconds       *string `form:"canceled_time_seconds,omitempty" json:"canceled_time_seconds,omitempty" xml:"canceled_time_seconds,omitempty"`
	ServiceReadiedTimeSeconds *string `form:"service_readied_time_seconds,omitempty" json:"service_readied_time_seconds,omitempty" xml:"service_readied_time_seconds,omitempty"`
	CheckedInTimeSeconds      *string `form:"checked_in_time_seconds,omitempty" json:"checked_in_time_seconds,omitempty" xml:"checked_in_time_seconds,omitempty"`
	SeatedTimeSeconds         *string `form:"seated_time_seconds,omitempty" json:"seated_time_seconds,omitempty" xml:"seated_time_seconds,omitempty"`
	MarkedNoShowTimeSeconds   *string `form:"marked_no_show_time_seconds,omitempty" json:"marked_no_show_time_seconds,omitempty" xml:"marked_no_show_time_seconds,omitempty"`
}

// NewBatchGetWaitEstimatesRequestBody builds the HTTP request body from the
// payload of the "batch_get_wait_estimates" endpoint of the "waitlist" service.
func NewBatchGetWaitEstimatesRequestBody(p *waitlist.BatchGetWaitEstimatesPayload) *BatchGetWaitEstimatesRequestBody {
	body := &BatchGetWaitEstimatesRequestBody{
		MerchantID: p.Body.MerchantID,
		ServiceID:  p.Body.ServiceID,
	}
	if p.Body.PartySize != nil {
		body.PartySize = make([]int32, len(p.Body.PartySize))
		for i, val := range p.Body.PartySize {
			body.PartySize[i] = val
		}
	}
	return body
}

// NewCreateWaitlistEntryRequestBody builds the HTTP request body from the
// payload of the "create_waitlist_entry" endpoint of the "waitlist" service.
func NewCreateWaitlistEntryRequestBody(p *waitlist.CreateWaitlistEntryPayload) *CreateWaitlistEntryRequestBody {
	body := &CreateWaitlistEntryRequestBody{
		MerchantID:        p.Body.MerchantID,
		ServiceID:         p.Body.ServiceID,
		PartySize:         p.Body.PartySize,
		AdditionalRequest: p.Body.AdditionalRequest,
		IdempotencyToken:  p.Body.IdempotencyToken,
	}
	if p.Body.UserInformation != nil {
		body.UserInformation = marshalWaitlistUserInformationToUserInformationRequestBodyRequestBody(p.Body.UserInformation)
	}
	return body
}

// NewGetWaitlistEntryRequestBody builds the HTTP request body from the payload
// of the "get_waitlist_entry" endpoint of the "waitlist" service.
func NewGetWaitlistEntryRequestBody(p *waitlist.GetWaitlistEntryPayload) *GetWaitlistEntryRequestBody {
	body := &GetWaitlistEntryRequestBody{
		WaitlistEntryID: p.Body.WaitlistEntryID,
	}
	return body
}

// NewDeleteWaitlistEntryRequestBody builds the HTTP request body from the
// payload of the "delete_waitlist_entry" endpoint of the "waitlist" service.
func NewDeleteWaitlistEntryRequestBody(p *waitlist.DeleteWaitlistEntryPayload) *DeleteWaitlistEntryRequestBody {
	body := &DeleteWaitlistEntryRequestBody{
		WaitlistEntryID: p.Body.WaitlistEntryID,
	}
	return body
}

// NewBatchGetWaitEstimatesResponseOK builds a "waitlist" service
// "batch_get_wait_estimates" endpoint result from a HTTP "OK" response.
func NewBatchGetWaitEstimatesResponseOK(body *BatchGetWaitEstimatesResponseBody) *waitlist.BatchGetWaitEstimatesResponse {
	v := &waitlist.BatchGetWaitEstimatesResponse{
		WaitlistStatus: *body.WaitlistStatus,
	}
	if body.WaitEstimate != nil {
		v.WaitEstimate = make([]*waitlist.WaitEstimate, len(body.WaitEstimate))
		for i, val := range body.WaitEstimate {
			v.WaitEstimate[i] = unmarshalWaitEstimateResponseBodyToWaitlistWaitEstimate(val)
		}
	}

	return v
}

// NewBatchGetWaitEstimatesBadRequest builds a waitlist service
// batch_get_wait_estimates endpoint bad_request error.
func NewBatchGetWaitEstimatesBadRequest(body *BatchGetWaitEstimatesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesUnauthorized builds a waitlist service
// batch_get_wait_estimates endpoint unauthorized error.
func NewBatchGetWaitEstimatesUnauthorized(body *BatchGetWaitEstimatesUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesForbidden builds a waitlist service
// batch_get_wait_estimates endpoint forbidden error.
func NewBatchGetWaitEstimatesForbidden(body *BatchGetWaitEstimatesForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesNotFound builds a waitlist service
// batch_get_wait_estimates endpoint not_found error.
func NewBatchGetWaitEstimatesNotFound(body *BatchGetWaitEstimatesNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesConflict builds a waitlist service
// batch_get_wait_estimates endpoint conflict error.
func NewBatchGetWaitEstimatesConflict(body *BatchGetWaitEstimatesConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesTooManyRequests builds a waitlist service
// batch_get_wait_estimates endpoint too_many_requests error.
func NewBatchGetWaitEstimatesTooManyRequests(body *BatchGetWaitEstimatesTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesClientClosedRequest builds a waitlist service
// batch_get_wait_estimates endpoint client_closed_request error.
func NewBatchGetWaitEstimatesClientClosedRequest(body *BatchGetWaitEstimatesClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesInternalServerError builds a waitlist service
// batch_get_wait_estimates endpoint internal_server_error error.
func NewBatchGetWaitEstimatesInternalServerError(body *BatchGetWaitEstimatesInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesNotImplemented builds a waitlist service
// batch_get_wait_estimates endpoint not_implemented error.
func NewBatchGetWaitEstimatesNotImplemented(body *BatchGetWaitEstimatesNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesServiceUnavailable builds a waitlist service
// batch_get_wait_estimates endpoint service_unavailable error.
func NewBatchGetWaitEstimatesServiceUnavailable(body *BatchGetWaitEstimatesServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBatchGetWaitEstimatesGatewayTimeout builds a waitlist service
// batch_get_wait_estimates endpoint gateway_timeout error.
func NewBatchGetWaitEstimatesGatewayTimeout(body *BatchGetWaitEstimatesGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryResponseOK builds a "waitlist" service
// "create_waitlist_entry" endpoint result from a HTTP "OK" response.
func NewCreateWaitlistEntryResponseOK(body *CreateWaitlistEntryResponseBody) *waitlist.CreateWaitlistEntryResponse {
	v := &waitlist.CreateWaitlistEntryResponse{
		WaitlistEntryID: body.WaitlistEntryID,
	}
	if body.WaitlistBusinessLogicFailure != nil {
		v.WaitlistBusinessLogicFailure = unmarshalWaitlistBusinessLogicFailureResponseBodyToWaitlistWaitlistBusinessLogicFailure(body.WaitlistBusinessLogicFailure)
	}

	return v
}

// NewCreateWaitlistEntryBadRequest builds a waitlist service
// create_waitlist_entry endpoint bad_request error.
func NewCreateWaitlistEntryBadRequest(body *CreateWaitlistEntryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryUnauthorized builds a waitlist service
// create_waitlist_entry endpoint unauthorized error.
func NewCreateWaitlistEntryUnauthorized(body *CreateWaitlistEntryUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryForbidden builds a waitlist service
// create_waitlist_entry endpoint forbidden error.
func NewCreateWaitlistEntryForbidden(body *CreateWaitlistEntryForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryNotFound builds a waitlist service
// create_waitlist_entry endpoint not_found error.
func NewCreateWaitlistEntryNotFound(body *CreateWaitlistEntryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryConflict builds a waitlist service
// create_waitlist_entry endpoint conflict error.
func NewCreateWaitlistEntryConflict(body *CreateWaitlistEntryConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryTooManyRequests builds a waitlist service
// create_waitlist_entry endpoint too_many_requests error.
func NewCreateWaitlistEntryTooManyRequests(body *CreateWaitlistEntryTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryClientClosedRequest builds a waitlist service
// create_waitlist_entry endpoint client_closed_request error.
func NewCreateWaitlistEntryClientClosedRequest(body *CreateWaitlistEntryClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryInternalServerError builds a waitlist service
// create_waitlist_entry endpoint internal_server_error error.
func NewCreateWaitlistEntryInternalServerError(body *CreateWaitlistEntryInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryNotImplemented builds a waitlist service
// create_waitlist_entry endpoint not_implemented error.
func NewCreateWaitlistEntryNotImplemented(body *CreateWaitlistEntryNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryServiceUnavailable builds a waitlist service
// create_waitlist_entry endpoint service_unavailable error.
func NewCreateWaitlistEntryServiceUnavailable(body *CreateWaitlistEntryServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateWaitlistEntryGatewayTimeout builds a waitlist service
// create_waitlist_entry endpoint gateway_timeout error.
func NewCreateWaitlistEntryGatewayTimeout(body *CreateWaitlistEntryGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryResponseOK builds a "waitlist" service
// "get_waitlist_entry" endpoint result from a HTTP "OK" response.
func NewGetWaitlistEntryResponseOK(body *GetWaitlistEntryResponseBody) *waitlist.GetWaitlistEntryResponse {
	v := &waitlist.GetWaitlistEntryResponse{}
	v.WaitlistEntry = unmarshalWaitlistEntryResponseBodyToWaitlistWaitlistEntry(body.WaitlistEntry)

	return v
}

// NewGetWaitlistEntryBadRequest builds a waitlist service get_waitlist_entry
// endpoint bad_request error.
func NewGetWaitlistEntryBadRequest(body *GetWaitlistEntryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryUnauthorized builds a waitlist service get_waitlist_entry
// endpoint unauthorized error.
func NewGetWaitlistEntryUnauthorized(body *GetWaitlistEntryUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryForbidden builds a waitlist service get_waitlist_entry
// endpoint forbidden error.
func NewGetWaitlistEntryForbidden(body *GetWaitlistEntryForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryNotFound builds a waitlist service get_waitlist_entry
// endpoint not_found error.
func NewGetWaitlistEntryNotFound(body *GetWaitlistEntryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryConflict builds a waitlist service get_waitlist_entry
// endpoint conflict error.
func NewGetWaitlistEntryConflict(body *GetWaitlistEntryConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryTooManyRequests builds a waitlist service
// get_waitlist_entry endpoint too_many_requests error.
func NewGetWaitlistEntryTooManyRequests(body *GetWaitlistEntryTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryClientClosedRequest builds a waitlist service
// get_waitlist_entry endpoint client_closed_request error.
func NewGetWaitlistEntryClientClosedRequest(body *GetWaitlistEntryClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryInternalServerError builds a waitlist service
// get_waitlist_entry endpoint internal_server_error error.
func NewGetWaitlistEntryInternalServerError(body *GetWaitlistEntryInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryNotImplemented builds a waitlist service
// get_waitlist_entry endpoint not_implemented error.
func NewGetWaitlistEntryNotImplemented(body *GetWaitlistEntryNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryServiceUnavailable builds a waitlist service
// get_waitlist_entry endpoint service_unavailable error.
func NewGetWaitlistEntryServiceUnavailable(body *GetWaitlistEntryServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWaitlistEntryGatewayTimeout builds a waitlist service
// get_waitlist_entry endpoint gateway_timeout error.
func NewGetWaitlistEntryGatewayTimeout(body *GetWaitlistEntryGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryBadRequest builds a waitlist service
// delete_waitlist_entry endpoint bad_request error.
func NewDeleteWaitlistEntryBadRequest(body *DeleteWaitlistEntryBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryUnauthorized builds a waitlist service
// delete_waitlist_entry endpoint unauthorized error.
func NewDeleteWaitlistEntryUnauthorized(body *DeleteWaitlistEntryUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryForbidden builds a waitlist service
// delete_waitlist_entry endpoint forbidden error.
func NewDeleteWaitlistEntryForbidden(body *DeleteWaitlistEntryForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryNotFound builds a waitlist service
// delete_waitlist_entry endpoint not_found error.
func NewDeleteWaitlistEntryNotFound(body *DeleteWaitlistEntryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryConflict builds a waitlist service
// delete_waitlist_entry endpoint conflict error.
func NewDeleteWaitlistEntryConflict(body *DeleteWaitlistEntryConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryTooManyRequests builds a waitlist service
// delete_waitlist_entry endpoint too_many_requests error.
func NewDeleteWaitlistEntryTooManyRequests(body *DeleteWaitlistEntryTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryClientClosedRequest builds a waitlist service
// delete_waitlist_entry endpoint client_closed_request error.
func NewDeleteWaitlistEntryClientClosedRequest(body *DeleteWaitlistEntryClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryInternalServerError builds a waitlist service
// delete_waitlist_entry endpoint internal_server_error error.
func NewDeleteWaitlistEntryInternalServerError(body *DeleteWaitlistEntryInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryNotImplemented builds a waitlist service
// delete_waitlist_entry endpoint not_implemented error.
func NewDeleteWaitlistEntryNotImplemented(body *DeleteWaitlistEntryNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryServiceUnavailable builds a waitlist service
// delete_waitlist_entry endpoint service_unavailable error.
func NewDeleteWaitlistEntryServiceUnavailable(body *DeleteWaitlistEntryServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteWaitlistEntryGatewayTimeout builds a waitlist service
// delete_waitlist_entry endpoint gateway_timeout error.
func NewDeleteWaitlistEntryGatewayTimeout(body *DeleteWaitlistEntryGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateBatchGetWaitEstimatesResponseBody runs the validations defined on
// batch_get_wait_estimates_response_body
func ValidateBatchGetWaitEstimatesResponseBody(body *BatchGetWaitEstimatesResponseBody) (err error) {
	if body.WaitlistStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("waitlist_status", "body"))
	}
	if body.WaitlistStatus != nil {
		if !(*body.WaitlistStatus == "WAITLIST_STATUS_UNSPECIFIED" || *body.WaitlistStatus == "OPEN" || *body.WaitlistStatus == "CLOSED_NO_WAIT" || *body.WaitlistStatus == "CLOSED_OTHER") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.waitlist_status", *body.WaitlistStatus, []interface{}{"WAITLIST_STATUS_UNSPECIFIED", "OPEN", "CLOSED_NO_WAIT", "CLOSED_OTHER"}))
		}
	}
	for _, e := range body.WaitEstimate {
		if e != nil {
			if err2 := ValidateWaitEstimateResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateWaitlistEntryResponseBody runs the validations defined on
// create_waitlist_entry_response_body
func ValidateCreateWaitlistEntryResponseBody(body *CreateWaitlistEntryResponseBody) (err error) {
	if body.WaitlistBusinessLogicFailure != nil {
		if err2 := ValidateWaitlistBusinessLogicFailureResponseBody(body.WaitlistBusinessLogicFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetWaitlistEntryResponseBody runs the validations defined on
// get_waitlist_entry_response_body
func ValidateGetWaitlistEntryResponseBody(body *GetWaitlistEntryResponseBody) (err error) {
	if body.WaitlistEntry == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("waitlist_entry", "body"))
	}
	if body.WaitlistEntry != nil {
		if err2 := ValidateWaitlistEntryResponseBody(body.WaitlistEntry); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBatchGetWaitEstimatesBadRequestResponseBody runs the validations
// defined on batch_get_wait_estimates_bad_request_response_body
func ValidateBatchGetWaitEstimatesBadRequestResponseBody(body *BatchGetWaitEstimatesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesUnauthorizedResponseBody runs the validations
// defined on batch_get_wait_estimates_unauthorized_response_body
func ValidateBatchGetWaitEstimatesUnauthorizedResponseBody(body *BatchGetWaitEstimatesUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesForbiddenResponseBody runs the validations
// defined on batch_get_wait_estimates_forbidden_response_body
func ValidateBatchGetWaitEstimatesForbiddenResponseBody(body *BatchGetWaitEstimatesForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesNotFoundResponseBody runs the validations
// defined on batch_get_wait_estimates_not_found_response_body
func ValidateBatchGetWaitEstimatesNotFoundResponseBody(body *BatchGetWaitEstimatesNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesConflictResponseBody runs the validations
// defined on batch_get_wait_estimates_conflict_response_body
func ValidateBatchGetWaitEstimatesConflictResponseBody(body *BatchGetWaitEstimatesConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesTooManyRequestsResponseBody runs the
// validations defined on
// batch_get_wait_estimates_too_many_requests_response_body
func ValidateBatchGetWaitEstimatesTooManyRequestsResponseBody(body *BatchGetWaitEstimatesTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesClientClosedRequestResponseBody runs the
// validations defined on
// batch_get_wait_estimates_client_closed_request_response_body
func ValidateBatchGetWaitEstimatesClientClosedRequestResponseBody(body *BatchGetWaitEstimatesClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesInternalServerErrorResponseBody runs the
// validations defined on
// batch_get_wait_estimates_internal_server_error_response_body
func ValidateBatchGetWaitEstimatesInternalServerErrorResponseBody(body *BatchGetWaitEstimatesInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesNotImplementedResponseBody runs the validations
// defined on batch_get_wait_estimates_not_implemented_response_body
func ValidateBatchGetWaitEstimatesNotImplementedResponseBody(body *BatchGetWaitEstimatesNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesServiceUnavailableResponseBody runs the
// validations defined on
// batch_get_wait_estimates_service_unavailable_response_body
func ValidateBatchGetWaitEstimatesServiceUnavailableResponseBody(body *BatchGetWaitEstimatesServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBatchGetWaitEstimatesGatewayTimeoutResponseBody runs the validations
// defined on batch_get_wait_estimates_gateway_timeout_response_body
func ValidateBatchGetWaitEstimatesGatewayTimeoutResponseBody(body *BatchGetWaitEstimatesGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryBadRequestResponseBody runs the validations
// defined on create_waitlist_entry_bad_request_response_body
func ValidateCreateWaitlistEntryBadRequestResponseBody(body *CreateWaitlistEntryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryUnauthorizedResponseBody runs the validations
// defined on create_waitlist_entry_unauthorized_response_body
func ValidateCreateWaitlistEntryUnauthorizedResponseBody(body *CreateWaitlistEntryUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryForbiddenResponseBody runs the validations
// defined on create_waitlist_entry_forbidden_response_body
func ValidateCreateWaitlistEntryForbiddenResponseBody(body *CreateWaitlistEntryForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryNotFoundResponseBody runs the validations defined
// on create_waitlist_entry_not_found_response_body
func ValidateCreateWaitlistEntryNotFoundResponseBody(body *CreateWaitlistEntryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryConflictResponseBody runs the validations defined
// on create_waitlist_entry_conflict_response_body
func ValidateCreateWaitlistEntryConflictResponseBody(body *CreateWaitlistEntryConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryTooManyRequestsResponseBody runs the validations
// defined on create_waitlist_entry_too_many_requests_response_body
func ValidateCreateWaitlistEntryTooManyRequestsResponseBody(body *CreateWaitlistEntryTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryClientClosedRequestResponseBody runs the
// validations defined on
// create_waitlist_entry_client_closed_request_response_body
func ValidateCreateWaitlistEntryClientClosedRequestResponseBody(body *CreateWaitlistEntryClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryInternalServerErrorResponseBody runs the
// validations defined on
// create_waitlist_entry_internal_server_error_response_body
func ValidateCreateWaitlistEntryInternalServerErrorResponseBody(body *CreateWaitlistEntryInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryNotImplementedResponseBody runs the validations
// defined on create_waitlist_entry_not_implemented_response_body
func ValidateCreateWaitlistEntryNotImplementedResponseBody(body *CreateWaitlistEntryNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryServiceUnavailableResponseBody runs the
// validations defined on
// create_waitlist_entry_service_unavailable_response_body
func ValidateCreateWaitlistEntryServiceUnavailableResponseBody(body *CreateWaitlistEntryServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateWaitlistEntryGatewayTimeoutResponseBody runs the validations
// defined on create_waitlist_entry_gateway_timeout_response_body
func ValidateCreateWaitlistEntryGatewayTimeoutResponseBody(body *CreateWaitlistEntryGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryBadRequestResponseBody runs the validations defined
// on get_waitlist_entry_bad_request_response_body
func ValidateGetWaitlistEntryBadRequestResponseBody(body *GetWaitlistEntryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryUnauthorizedResponseBody runs the validations
// defined on get_waitlist_entry_unauthorized_response_body
func ValidateGetWaitlistEntryUnauthorizedResponseBody(body *GetWaitlistEntryUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryForbiddenResponseBody runs the validations defined
// on get_waitlist_entry_forbidden_response_body
func ValidateGetWaitlistEntryForbiddenResponseBody(body *GetWaitlistEntryForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryNotFoundResponseBody runs the validations defined on
// get_waitlist_entry_not_found_response_body
func ValidateGetWaitlistEntryNotFoundResponseBody(body *GetWaitlistEntryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryConflictResponseBody runs the validations defined on
// get_waitlist_entry_conflict_response_body
func ValidateGetWaitlistEntryConflictResponseBody(body *GetWaitlistEntryConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryTooManyRequestsResponseBody runs the validations
// defined on get_waitlist_entry_too_many_requests_response_body
func ValidateGetWaitlistEntryTooManyRequestsResponseBody(body *GetWaitlistEntryTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryClientClosedRequestResponseBody runs the validations
// defined on get_waitlist_entry_client_closed_request_response_body
func ValidateGetWaitlistEntryClientClosedRequestResponseBody(body *GetWaitlistEntryClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryInternalServerErrorResponseBody runs the validations
// defined on get_waitlist_entry_internal_server_error_response_body
func ValidateGetWaitlistEntryInternalServerErrorResponseBody(body *GetWaitlistEntryInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryNotImplementedResponseBody runs the validations
// defined on get_waitlist_entry_not_implemented_response_body
func ValidateGetWaitlistEntryNotImplementedResponseBody(body *GetWaitlistEntryNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryServiceUnavailableResponseBody runs the validations
// defined on get_waitlist_entry_service_unavailable_response_body
func ValidateGetWaitlistEntryServiceUnavailableResponseBody(body *GetWaitlistEntryServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetWaitlistEntryGatewayTimeoutResponseBody runs the validations
// defined on get_waitlist_entry_gateway_timeout_response_body
func ValidateGetWaitlistEntryGatewayTimeoutResponseBody(body *GetWaitlistEntryGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryBadRequestResponseBody runs the validations
// defined on delete_waitlist_entry_bad_request_response_body
func ValidateDeleteWaitlistEntryBadRequestResponseBody(body *DeleteWaitlistEntryBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryUnauthorizedResponseBody runs the validations
// defined on delete_waitlist_entry_unauthorized_response_body
func ValidateDeleteWaitlistEntryUnauthorizedResponseBody(body *DeleteWaitlistEntryUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryForbiddenResponseBody runs the validations
// defined on delete_waitlist_entry_forbidden_response_body
func ValidateDeleteWaitlistEntryForbiddenResponseBody(body *DeleteWaitlistEntryForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryNotFoundResponseBody runs the validations defined
// on delete_waitlist_entry_not_found_response_body
func ValidateDeleteWaitlistEntryNotFoundResponseBody(body *DeleteWaitlistEntryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryConflictResponseBody runs the validations defined
// on delete_waitlist_entry_conflict_response_body
func ValidateDeleteWaitlistEntryConflictResponseBody(body *DeleteWaitlistEntryConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryTooManyRequestsResponseBody runs the validations
// defined on delete_waitlist_entry_too_many_requests_response_body
func ValidateDeleteWaitlistEntryTooManyRequestsResponseBody(body *DeleteWaitlistEntryTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryClientClosedRequestResponseBody runs the
// validations defined on
// delete_waitlist_entry_client_closed_request_response_body
func ValidateDeleteWaitlistEntryClientClosedRequestResponseBody(body *DeleteWaitlistEntryClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryInternalServerErrorResponseBody runs the
// validations defined on
// delete_waitlist_entry_internal_server_error_response_body
func ValidateDeleteWaitlistEntryInternalServerErrorResponseBody(body *DeleteWaitlistEntryInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryNotImplementedResponseBody runs the validations
// defined on delete_waitlist_entry_not_implemented_response_body
func ValidateDeleteWaitlistEntryNotImplementedResponseBody(body *DeleteWaitlistEntryNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryServiceUnavailableResponseBody runs the
// validations defined on
// delete_waitlist_entry_service_unavailable_response_body
func ValidateDeleteWaitlistEntryServiceUnavailableResponseBody(body *DeleteWaitlistEntryServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteWaitlistEntryGatewayTimeoutResponseBody runs the validations
// defined on delete_waitlist_entry_gateway_timeout_response_body
func ValidateDeleteWaitlistEntryGatewayTimeoutResponseBody(body *DeleteWaitlistEntryGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateWaitEstimateResponseBody runs the validations defined on
// WaitEstimateResponseBody
func ValidateWaitEstimateResponseBody(body *WaitEstimateResponseBody) (err error) {
	if body.PartySize == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("party_size", "body"))
	}
	if body.WaitlistConfirmationMode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("waitlist_confirmation_mode", "body"))
	}
	if body.WaitLength != nil {
		if err2 := ValidateWaitLengthResponseBody(body.WaitLength); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WaitlistConfirmationMode != nil {
		if !(*body.WaitlistConfirmationMode == "WAITLIST_CONFIRMATION_MODE_UNSPECIFIED" || *body.WaitlistConfirmationMode == "WAITLIST_CONFIRMATION_MODE_SYNCHRONOUS" || *body.WaitlistConfirmationMode == "WAITLIST_CONFIRMATION_MODE_ASYNCHRONOUS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.waitlist_confirmation_mode", *body.WaitlistConfirmationMode, []interface{}{"WAITLIST_CONFIRMATION_MODE_UNSPECIFIED", "WAITLIST_CONFIRMATION_MODE_SYNCHRONOUS", "WAITLIST_CONFIRMATION_MODE_ASYNCHRONOUS"}))
		}
	}
	return
}

// ValidateWaitLengthResponseBody runs the validations defined on
// WaitLengthResponseBody
func ValidateWaitLengthResponseBody(body *WaitLengthResponseBody) (err error) {
	if body.PartiesAheadCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("parties_ahead_count", "body"))
	}
	if body.EstimatedSeatTimeRange == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("estimated_seat_time_range", "body"))
	}
	if body.EstimatedSeatTimeRange != nil {
		if err2 := ValidateEstimatedSeatTimeRangeResponseBody(body.EstimatedSeatTimeRange); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEstimatedSeatTimeRangeResponseBody runs the validations defined on
// EstimatedSeatTimeRangeResponseBody
func ValidateEstimatedSeatTimeRangeResponseBody(body *EstimatedSeatTimeRangeResponseBody) (err error) {
	if body.StartSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_seconds", "body"))
	}
	if body.EndSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_seconds", "body"))
	}
	return
}

// ValidateWaitlistBusinessLogicFailureResponseBody runs the validations
// defined on WaitlistBusinessLogicFailureResponseBody
func ValidateWaitlistBusinessLogicFailureResponseBody(body *WaitlistBusinessLogicFailureResponseBody) (err error) {
	if body.Cause == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cause", "body"))
	}
	if body.Cause != nil {
		if !(*body.Cause == "CAUSE_UNSPECIFIED" || *body.Cause == "EXISTING_WAITLIST_ENTRY" || *body.Cause == "BELOW_MIN_PARTY_SIZE" || *body.Cause == "ABOVE_MAX_PARTY_SIZE" || *body.Cause == "MERCHANT_CLOSED" || *body.Cause == "NO_WAIT" || *body.Cause == "WAITLIST_FULL" || *body.Cause == "PHONE_NUMBER_COUNTRY_UNSUPPORTED" || *body.Cause == "WAITLIST_CLOSED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.cause", *body.Cause, []interface{}{"CAUSE_UNSPECIFIED", "EXISTING_WAITLIST_ENTRY", "BELOW_MIN_PARTY_SIZE", "ABOVE_MAX_PARTY_SIZE", "MERCHANT_CLOSED", "NO_WAIT", "WAITLIST_FULL", "PHONE_NUMBER_COUNTRY_UNSUPPORTED", "WAITLIST_CLOSED"}))
		}
	}
	return
}

// ValidateWaitlistEntryResponseBody runs the validations defined on
// WaitlistEntryResponseBody
func ValidateWaitlistEntryResponseBody(body *WaitlistEntryResponseBody) (err error) {
	if body.WaitlistEntryState == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("waitlist_entry_state", "body"))
	}
	if body.WaitlistEntryStateTimes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("waitlist_entry_state_times", "body"))
	}
	if body.WaitEstimate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wait_estimate", "body"))
	}
	if body.WaitlistEntryState != nil {
		if !(*body.WaitlistEntryState == "WAITLIST_ENTRY_STATE_UNSPECIFIED" || *body.WaitlistEntryState == "WAITING" || *body.WaitlistEntryState == "PENDING_MERCHANT_CONFIRMATION" || *body.WaitlistEntryState == "CANCELED" || *body.WaitlistEntryState == "DECLINED_BY_MERCHANT" || *body.WaitlistEntryState == "SERVICE_READY" || *body.WaitlistEntryState == "CHECKED_IN" || *body.WaitlistEntryState == "SEATED" || *body.WaitlistEntryState == "NO_SHOW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.waitlist_entry_state", *body.WaitlistEntryState, []interface{}{"WAITLIST_ENTRY_STATE_UNSPECIFIED", "WAITING", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "DECLINED_BY_MERCHANT", "SERVICE_READY", "CHECKED_IN", "SEATED", "NO_SHOW"}))
		}
	}
	if body.WaitlistEntryStateTimes != nil {
		if err2 := ValidateWaitlistEntryStateTimesResponseBody(body.WaitlistEntryStateTimes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WaitEstimate != nil {
		if err2 := ValidateWaitEstimateResponseBody(body.WaitEstimate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateWaitlistEntryStateTimesResponseBody runs the validations defined on
// WaitlistEntryStateTimesResponseBody
func ValidateWaitlistEntryStateTimesResponseBody(body *WaitlistEntryStateTimesResponseBody) (err error) {
	if body.CreatedTimeSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_time_seconds", "body"))
	}
	return
}
