// Code generated by goa v3.2.4, DO NOT EDIT.
//
// waitlist HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"encoding/json"
	"fmt"

	waitlist "github.com/tchssk/reserve-with-google-goa/gen/waitlist"
	goa "goa.design/goa/v3/pkg"
)

// BuildBatchGetWaitEstimatesPayload builds the payload for the waitlist
// batch_get_wait_estimates endpoint from CLI flags.
func BuildBatchGetWaitEstimatesPayload(waitlistBatchGetWaitEstimatesBody string, waitlistBatchGetWaitEstimatesUsername string, waitlistBatchGetWaitEstimatesPassword string) (*waitlist.BatchGetWaitEstimatesPayload, error) {
	var err error
	var body BatchGetWaitEstimatesRequestBody
	{
		err = json.Unmarshal([]byte(waitlistBatchGetWaitEstimatesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"merchant_id\": \"Ipsum praesentium tenetur veniam molestiae sed distinctio.\",\n      \"party_size\": [\n         1195391964,\n         1522198561,\n         1006042009,\n         2009461095\n      ],\n      \"service_id\": \"Nulla dicta repellendus labore.\"\n   }'")
		}
		if body.PartySize == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("party_size", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = waitlistBatchGetWaitEstimatesUsername
	}
	var password string
	{
		password = waitlistBatchGetWaitEstimatesPassword
	}
	v := &waitlist.BatchGetWaitEstimatesRequest{
		MerchantID: body.MerchantID,
		ServiceID:  body.ServiceID,
	}
	if body.PartySize != nil {
		v.PartySize = make([]int32, len(body.PartySize))
		for i, val := range body.PartySize {
			v.PartySize[i] = val
		}
	}
	res := &waitlist.BatchGetWaitEstimatesPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildCreateWaitlistEntryPayload builds the payload for the waitlist
// create_waitlist_entry endpoint from CLI flags.
func BuildCreateWaitlistEntryPayload(waitlistCreateWaitlistEntryBody string, waitlistCreateWaitlistEntryUsername string, waitlistCreateWaitlistEntryPassword string) (*waitlist.CreateWaitlistEntryPayload, error) {
	var err error
	var body CreateWaitlistEntryRequestBody
	{
		err = json.Unmarshal([]byte(waitlistCreateWaitlistEntryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"additional_request\": \"Aut possimus occaecati velit.\",\n      \"idempotency_token\": \"Qui natus.\",\n      \"merchant_id\": \"Sint non.\",\n      \"party_size\": 423053857,\n      \"service_id\": \"Cupiditate non culpa saepe rem.\",\n      \"user_information\": {\n         \"address\": {\n            \"country\": \"Vel et vel.\",\n            \"locality\": \"Illum optio.\",\n            \"postal_code\": \"Porro molestiae quam dignissimos illum quia praesentium.\",\n            \"region\": \"Praesentium nemo quia molestias.\",\n            \"street_address\": \"Esse necessitatibus officia nihil at mollitia nobis.\"\n         },\n         \"email\": \"Rerum excepturi ea accusamus illo.\",\n         \"family_name\": \"Repudiandae enim voluptas quia sed tenetur possimus.\",\n         \"given_name\": \"Debitis hic id qui.\",\n         \"language_code\": \"Reiciendis expedita consectetur at nulla.\",\n         \"telephone\": \"In nostrum quae sint.\",\n         \"user_id\": \"Et voluptatibus eius soluta.\"\n      }\n   }'")
		}
		if body.UserInformation == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = waitlistCreateWaitlistEntryUsername
	}
	var password string
	{
		password = waitlistCreateWaitlistEntryPassword
	}
	v := &waitlist.CreateWaitlistEntryRequest{
		MerchantID:        body.MerchantID,
		ServiceID:         body.ServiceID,
		PartySize:         body.PartySize,
		AdditionalRequest: body.AdditionalRequest,
		IdempotencyToken:  body.IdempotencyToken,
	}
	if body.UserInformation != nil {
		v.UserInformation = marshalUserInformationRequestBodyRequestBodyToWaitlistUserInformation(body.UserInformation)
	}
	res := &waitlist.CreateWaitlistEntryPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildGetWaitlistEntryPayload builds the payload for the waitlist
// get_waitlist_entry endpoint from CLI flags.
func BuildGetWaitlistEntryPayload(waitlistGetWaitlistEntryBody string, waitlistGetWaitlistEntryUsername string, waitlistGetWaitlistEntryPassword string) (*waitlist.GetWaitlistEntryPayload, error) {
	var err error
	var body GetWaitlistEntryRequestBody
	{
		err = json.Unmarshal([]byte(waitlistGetWaitlistEntryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"waitlist_entry_id\": \"Quia asperiores eos.\"\n   }'")
		}
	}
	var username string
	{
		username = waitlistGetWaitlistEntryUsername
	}
	var password string
	{
		password = waitlistGetWaitlistEntryPassword
	}
	v := &waitlist.GetWaitlistEntryRequest{
		WaitlistEntryID: body.WaitlistEntryID,
	}
	res := &waitlist.GetWaitlistEntryPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}

// BuildDeleteWaitlistEntryPayload builds the payload for the waitlist
// delete_waitlist_entry endpoint from CLI flags.
func BuildDeleteWaitlistEntryPayload(waitlistDeleteWaitlistEntryBody string, waitlistDeleteWaitlistEntryUsername string, waitlistDeleteWaitlistEntryPassword string) (*waitlist.DeleteWaitlistEntryPayload, error) {
	var err error
	var body DeleteWaitlistEntryRequestBody
	{
		err = json.Unmarshal([]byte(waitlistDeleteWaitlistEntryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"waitlist_entry_id\": \"Sed ut.\"\n   }'")
		}
	}
	var username string
	{
		username = waitlistDeleteWaitlistEntryUsername
	}
	var password string
	{
		password = waitlistDeleteWaitlistEntryPassword
	}
	v := &waitlist.DeleteWaitlistEntryRequest{
		WaitlistEntryID: body.WaitlistEntryID,
	}
	res := &waitlist.DeleteWaitlistEntryPayload{
		Body: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}
