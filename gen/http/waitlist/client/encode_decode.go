// Code generated by goa v3.2.4, DO NOT EDIT.
//
// waitlist HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	waitlist "github.com/tchssk/reserve-with-google-goa/gen/waitlist"
	goahttp "goa.design/goa/v3/http"
)

// BuildBatchGetWaitEstimatesRequest instantiates a HTTP request object with
// method and path set to call the "waitlist" service
// "batch_get_wait_estimates" endpoint
func (c *Client) BuildBatchGetWaitEstimatesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BatchGetWaitEstimatesWaitlistPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("waitlist", "batch_get_wait_estimates", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBatchGetWaitEstimatesRequest returns an encoder for requests sent to
// the waitlist batch_get_wait_estimates server.
func EncodeBatchGetWaitEstimatesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*waitlist.BatchGetWaitEstimatesPayload)
		if !ok {
			return goahttp.ErrInvalidType("waitlist", "batch_get_wait_estimates", "*waitlist.BatchGetWaitEstimatesPayload", v)
		}
		body := NewBatchGetWaitEstimatesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("waitlist", "batch_get_wait_estimates", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeBatchGetWaitEstimatesResponse returns a decoder for responses returned
// by the waitlist batch_get_wait_estimates endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeBatchGetWaitEstimatesResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeBatchGetWaitEstimatesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BatchGetWaitEstimatesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			res := NewBatchGetWaitEstimatesResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body BatchGetWaitEstimatesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body BatchGetWaitEstimatesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body BatchGetWaitEstimatesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesForbidden(&body)
		case http.StatusNotFound:
			var (
				body BatchGetWaitEstimatesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesNotFound(&body)
		case http.StatusConflict:
			var (
				body BatchGetWaitEstimatesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body BatchGetWaitEstimatesTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesTooManyRequests(&body)
		case 499:
			var (
				body BatchGetWaitEstimatesClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body BatchGetWaitEstimatesInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body BatchGetWaitEstimatesNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body BatchGetWaitEstimatesServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body BatchGetWaitEstimatesGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "batch_get_wait_estimates", err)
			}
			err = ValidateBatchGetWaitEstimatesGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "batch_get_wait_estimates", err)
			}
			return nil, NewBatchGetWaitEstimatesGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("waitlist", "batch_get_wait_estimates", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateWaitlistEntryRequest instantiates a HTTP request object with
// method and path set to call the "waitlist" service "create_waitlist_entry"
// endpoint
func (c *Client) BuildCreateWaitlistEntryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateWaitlistEntryWaitlistPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("waitlist", "create_waitlist_entry", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateWaitlistEntryRequest returns an encoder for requests sent to the
// waitlist create_waitlist_entry server.
func EncodeCreateWaitlistEntryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*waitlist.CreateWaitlistEntryPayload)
		if !ok {
			return goahttp.ErrInvalidType("waitlist", "create_waitlist_entry", "*waitlist.CreateWaitlistEntryPayload", v)
		}
		body := NewCreateWaitlistEntryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("waitlist", "create_waitlist_entry", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeCreateWaitlistEntryResponse returns a decoder for responses returned
// by the waitlist create_waitlist_entry endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateWaitlistEntryResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeCreateWaitlistEntryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateWaitlistEntryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			res := NewCreateWaitlistEntryResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateWaitlistEntryBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CreateWaitlistEntryUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateWaitlistEntryForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryForbidden(&body)
		case http.StatusNotFound:
			var (
				body CreateWaitlistEntryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateWaitlistEntryConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body CreateWaitlistEntryTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryTooManyRequests(&body)
		case 499:
			var (
				body CreateWaitlistEntryClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateWaitlistEntryInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body CreateWaitlistEntryNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateWaitlistEntryServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body CreateWaitlistEntryGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "create_waitlist_entry", err)
			}
			err = ValidateCreateWaitlistEntryGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "create_waitlist_entry", err)
			}
			return nil, NewCreateWaitlistEntryGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("waitlist", "create_waitlist_entry", resp.StatusCode, string(body))
		}
	}
}

// BuildGetWaitlistEntryRequest instantiates a HTTP request object with method
// and path set to call the "waitlist" service "get_waitlist_entry" endpoint
func (c *Client) BuildGetWaitlistEntryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWaitlistEntryWaitlistPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("waitlist", "get_waitlist_entry", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetWaitlistEntryRequest returns an encoder for requests sent to the
// waitlist get_waitlist_entry server.
func EncodeGetWaitlistEntryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*waitlist.GetWaitlistEntryPayload)
		if !ok {
			return goahttp.ErrInvalidType("waitlist", "get_waitlist_entry", "*waitlist.GetWaitlistEntryPayload", v)
		}
		body := NewGetWaitlistEntryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("waitlist", "get_waitlist_entry", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeGetWaitlistEntryResponse returns a decoder for responses returned by
// the waitlist get_waitlist_entry endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetWaitlistEntryResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeGetWaitlistEntryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetWaitlistEntryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			res := NewGetWaitlistEntryResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetWaitlistEntryBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body GetWaitlistEntryUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetWaitlistEntryForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryForbidden(&body)
		case http.StatusNotFound:
			var (
				body GetWaitlistEntryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryNotFound(&body)
		case http.StatusConflict:
			var (
				body GetWaitlistEntryConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body GetWaitlistEntryTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryTooManyRequests(&body)
		case 499:
			var (
				body GetWaitlistEntryClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetWaitlistEntryInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body GetWaitlistEntryNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetWaitlistEntryServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body GetWaitlistEntryGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "get_waitlist_entry", err)
			}
			err = ValidateGetWaitlistEntryGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "get_waitlist_entry", err)
			}
			return nil, NewGetWaitlistEntryGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("waitlist", "get_waitlist_entry", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteWaitlistEntryRequest instantiates a HTTP request object with
// method and path set to call the "waitlist" service "delete_waitlist_entry"
// endpoint
func (c *Client) BuildDeleteWaitlistEntryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteWaitlistEntryWaitlistPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("waitlist", "delete_waitlist_entry", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteWaitlistEntryRequest returns an encoder for requests sent to the
// waitlist delete_waitlist_entry server.
func EncodeDeleteWaitlistEntryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*waitlist.DeleteWaitlistEntryPayload)
		if !ok {
			return goahttp.ErrInvalidType("waitlist", "delete_waitlist_entry", "*waitlist.DeleteWaitlistEntryPayload", v)
		}
		body := NewDeleteWaitlistEntryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("waitlist", "delete_waitlist_entry", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeDeleteWaitlistEntryResponse returns a decoder for responses returned
// by the waitlist delete_waitlist_entry endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteWaitlistEntryResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeDeleteWaitlistEntryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteWaitlistEntryBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteWaitlistEntryUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteWaitlistEntryForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteWaitlistEntryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryNotFound(&body)
		case http.StatusConflict:
			var (
				body DeleteWaitlistEntryConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body DeleteWaitlistEntryTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryTooManyRequests(&body)
		case 499:
			var (
				body DeleteWaitlistEntryClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteWaitlistEntryInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body DeleteWaitlistEntryNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteWaitlistEntryServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body DeleteWaitlistEntryGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("waitlist", "delete_waitlist_entry", err)
			}
			err = ValidateDeleteWaitlistEntryGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("waitlist", "delete_waitlist_entry", err)
			}
			return nil, NewDeleteWaitlistEntryGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("waitlist", "delete_waitlist_entry", resp.StatusCode, string(body))
		}
	}
}

// unmarshalWaitEstimateResponseBodyToWaitlistWaitEstimate builds a value of
// type *waitlist.WaitEstimate from a value of type *WaitEstimateResponseBody.
func unmarshalWaitEstimateResponseBodyToWaitlistWaitEstimate(v *WaitEstimateResponseBody) *waitlist.WaitEstimate {
	if v == nil {
		return nil
	}
	res := &waitlist.WaitEstimate{
		PartySize:                *v.PartySize,
		WaitlistConfirmationMode: *v.WaitlistConfirmationMode,
	}
	if v.WaitLength != nil {
		res.WaitLength = unmarshalWaitLengthResponseBodyToWaitlistWaitLength(v.WaitLength)
	}

	return res
}

// unmarshalWaitLengthResponseBodyToWaitlistWaitLength builds a value of type
// *waitlist.WaitLength from a value of type *WaitLengthResponseBody.
func unmarshalWaitLengthResponseBodyToWaitlistWaitLength(v *WaitLengthResponseBody) *waitlist.WaitLength {
	if v == nil {
		return nil
	}
	res := &waitlist.WaitLength{
		PartiesAheadCount: *v.PartiesAheadCount,
	}
	res.EstimatedSeatTimeRange = unmarshalEstimatedSeatTimeRangeResponseBodyToWaitlistEstimatedSeatTimeRange(v.EstimatedSeatTimeRange)

	return res
}

// unmarshalEstimatedSeatTimeRangeResponseBodyToWaitlistEstimatedSeatTimeRange
// builds a value of type *waitlist.EstimatedSeatTimeRange from a value of type
// *EstimatedSeatTimeRangeResponseBody.
func unmarshalEstimatedSeatTimeRangeResponseBodyToWaitlistEstimatedSeatTimeRange(v *EstimatedSeatTimeRangeResponseBody) *waitlist.EstimatedSeatTimeRange {
	res := &waitlist.EstimatedSeatTimeRange{
		StartSeconds: *v.StartSeconds,
		EndSeconds:   *v.EndSeconds,
	}

	return res
}

// marshalWaitlistUserInformationToUserInformationRequestBodyRequestBody builds
// a value of type *UserInformationRequestBodyRequestBody from a value of type
// *waitlist.UserInformation.
func marshalWaitlistUserInformationToUserInformationRequestBodyRequestBody(v *waitlist.UserInformation) *UserInformationRequestBodyRequestBody {
	res := &UserInformationRequestBodyRequestBody{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalWaitlistPostalAddressToPostalAddressRequestBodyRequestBody(v.Address)
	}

	return res
}

// marshalWaitlistPostalAddressToPostalAddressRequestBodyRequestBody builds a
// value of type *PostalAddressRequestBodyRequestBody from a value of type
// *waitlist.PostalAddress.
func marshalWaitlistPostalAddressToPostalAddressRequestBodyRequestBody(v *waitlist.PostalAddress) *PostalAddressRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PostalAddressRequestBodyRequestBody{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalUserInformationRequestBodyRequestBodyToWaitlistUserInformation builds
// a value of type *waitlist.UserInformation from a value of type
// *UserInformationRequestBodyRequestBody.
func marshalUserInformationRequestBodyRequestBodyToWaitlistUserInformation(v *UserInformationRequestBodyRequestBody) *waitlist.UserInformation {
	res := &waitlist.UserInformation{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalPostalAddressRequestBodyRequestBodyToWaitlistPostalAddress(v.Address)
	}

	return res
}

// marshalPostalAddressRequestBodyRequestBodyToWaitlistPostalAddress builds a
// value of type *waitlist.PostalAddress from a value of type
// *PostalAddressRequestBodyRequestBody.
func marshalPostalAddressRequestBodyRequestBodyToWaitlistPostalAddress(v *PostalAddressRequestBodyRequestBody) *waitlist.PostalAddress {
	if v == nil {
		return nil
	}
	res := &waitlist.PostalAddress{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// unmarshalWaitlistBusinessLogicFailureResponseBodyToWaitlistWaitlistBusinessLogicFailure
// builds a value of type *waitlist.WaitlistBusinessLogicFailure from a value
// of type *WaitlistBusinessLogicFailureResponseBody.
func unmarshalWaitlistBusinessLogicFailureResponseBodyToWaitlistWaitlistBusinessLogicFailure(v *WaitlistBusinessLogicFailureResponseBody) *waitlist.WaitlistBusinessLogicFailure {
	if v == nil {
		return nil
	}
	res := &waitlist.WaitlistBusinessLogicFailure{
		Cause:       *v.Cause,
		Description: v.Description,
	}

	return res
}

// unmarshalWaitlistEntryResponseBodyToWaitlistWaitlistEntry builds a value of
// type *waitlist.WaitlistEntry from a value of type *WaitlistEntryResponseBody.
func unmarshalWaitlistEntryResponseBodyToWaitlistWaitlistEntry(v *WaitlistEntryResponseBody) *waitlist.WaitlistEntry {
	res := &waitlist.WaitlistEntry{
		WaitlistEntryState: *v.WaitlistEntryState,
	}
	res.WaitlistEntryStateTimes = unmarshalWaitlistEntryStateTimesResponseBodyToWaitlistWaitlistEntryStateTimes(v.WaitlistEntryStateTimes)
	res.WaitEstimate = unmarshalWaitEstimateResponseBodyToWaitlistWaitEstimate(v.WaitEstimate)

	return res
}

// unmarshalWaitlistEntryStateTimesResponseBodyToWaitlistWaitlistEntryStateTimes
// builds a value of type *waitlist.WaitlistEntryStateTimes from a value of
// type *WaitlistEntryStateTimesResponseBody.
func unmarshalWaitlistEntryStateTimesResponseBodyToWaitlistWaitlistEntryStateTimes(v *WaitlistEntryStateTimesResponseBody) *waitlist.WaitlistEntryStateTimes {
	res := &waitlist.WaitlistEntryStateTimes{
		CreatedTimeSeconds:        *v.CreatedTimeSeconds,
		CanceledTimeSeconds:       v.CanceledTimeSeconds,
		ServiceReadiedTimeSeconds: v.ServiceReadiedTimeSeconds,
		CheckedInTimeSeconds:      v.CheckedInTimeSeconds,
		SeatedTimeSeconds:         v.SeatedTimeSeconds,
		MarkedNoShowTimeSeconds:   v.MarkedNoShowTimeSeconds,
	}

	return res
}
