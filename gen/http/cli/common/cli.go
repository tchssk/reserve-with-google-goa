// Code generated by goa v3.2.4, DO NOT EDIT.
//
// common HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	bookingc "github.com/tchssk/reserve-with-google-goa/gen/http/booking/client"
	commonc "github.com/tchssk/reserve-with-google-goa/gen/http/common/client"
	orderc "github.com/tchssk/reserve-with-google-goa/gen/http/order/client"
	waitlistc "github.com/tchssk/reserve-with-google-goa/gen/http/waitlist/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `common health-check
booking (batch-availability-lookup|check-availability|create-booking|update-booking|get-booking-status|list-bookings)
order (check-order-fulfillability|create-order|list-orders)
waitlist (batch-get-wait-estimates|create-waitlist-entry|get-waitlist-entry|delete-waitlist-entry)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` common health-check --username "Ipsa voluptatem." --password "Nisi doloribus ut qui pariatur."` + "\n" +
		os.Args[0] + ` booking batch-availability-lookup --body '{
      "merchant_id": "Ipsa incidunt non tempora deleniti ipsa et.",
      "slot_time": [
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         }
      ]
   }' --username "Doloribus ut." --password "Esse ex nisi quasi."` + "\n" +
		os.Args[0] + ` order check-order-fulfillability --body '{
      "cart_id": "Nisi odit alias et at magni.",
      "item": [
         {
            "duration_sec": 5218063573410113424,
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  },
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "service_id": "Quo at harum cupiditate officia.",
            "start_sec": 2726691727586715899,
            "status": "BOOKING_STATUS_UNSPECIFIED",
            "tickets": [
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               }
            ],
            "warning_reason": "PRICE_INCREASE"
         },
         {
            "duration_sec": 5218063573410113424,
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  },
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "service_id": "Quo at harum cupiditate officia.",
            "start_sec": 2726691727586715899,
            "status": "BOOKING_STATUS_UNSPECIFIED",
            "tickets": [
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               }
            ],
            "warning_reason": "PRICE_INCREASE"
         }
      ],
      "merchant_id": "Voluptatibus omnis expedita autem ea."
   }' --username "Autem pariatur et." --password "Voluptatem nostrum et eum."` + "\n" +
		os.Args[0] + ` waitlist batch-get-wait-estimates --body '{
      "merchant_id": "Ipsum praesentium tenetur veniam molestiae sed distinctio.",
      "party_size": [
         1195391964,
         1522198561,
         1006042009,
         2009461095
      ],
      "service_id": "Nulla dicta repellendus labore."
   }' --username "Dolor quaerat quae." --password "Iusto quas dolor."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		commonFlags = flag.NewFlagSet("common", flag.ContinueOnError)

		commonHealthCheckFlags        = flag.NewFlagSet("health-check", flag.ExitOnError)
		commonHealthCheckUsernameFlag = commonHealthCheckFlags.String("username", "REQUIRED", "")
		commonHealthCheckPasswordFlag = commonHealthCheckFlags.String("password", "REQUIRED", "")

		bookingFlags = flag.NewFlagSet("booking", flag.ContinueOnError)

		bookingBatchAvailabilityLookupFlags        = flag.NewFlagSet("batch-availability-lookup", flag.ExitOnError)
		bookingBatchAvailabilityLookupBodyFlag     = bookingBatchAvailabilityLookupFlags.String("body", "REQUIRED", "")
		bookingBatchAvailabilityLookupUsernameFlag = bookingBatchAvailabilityLookupFlags.String("username", "REQUIRED", "")
		bookingBatchAvailabilityLookupPasswordFlag = bookingBatchAvailabilityLookupFlags.String("password", "REQUIRED", "")

		bookingCheckAvailabilityFlags        = flag.NewFlagSet("check-availability", flag.ExitOnError)
		bookingCheckAvailabilityBodyFlag     = bookingCheckAvailabilityFlags.String("body", "REQUIRED", "")
		bookingCheckAvailabilityUsernameFlag = bookingCheckAvailabilityFlags.String("username", "REQUIRED", "")
		bookingCheckAvailabilityPasswordFlag = bookingCheckAvailabilityFlags.String("password", "REQUIRED", "")

		bookingCreateBookingFlags        = flag.NewFlagSet("create-booking", flag.ExitOnError)
		bookingCreateBookingBodyFlag     = bookingCreateBookingFlags.String("body", "REQUIRED", "")
		bookingCreateBookingUsernameFlag = bookingCreateBookingFlags.String("username", "REQUIRED", "")
		bookingCreateBookingPasswordFlag = bookingCreateBookingFlags.String("password", "REQUIRED", "")

		bookingUpdateBookingFlags        = flag.NewFlagSet("update-booking", flag.ExitOnError)
		bookingUpdateBookingBodyFlag     = bookingUpdateBookingFlags.String("body", "REQUIRED", "")
		bookingUpdateBookingUsernameFlag = bookingUpdateBookingFlags.String("username", "REQUIRED", "")
		bookingUpdateBookingPasswordFlag = bookingUpdateBookingFlags.String("password", "REQUIRED", "")

		bookingGetBookingStatusFlags        = flag.NewFlagSet("get-booking-status", flag.ExitOnError)
		bookingGetBookingStatusBodyFlag     = bookingGetBookingStatusFlags.String("body", "REQUIRED", "")
		bookingGetBookingStatusUsernameFlag = bookingGetBookingStatusFlags.String("username", "REQUIRED", "")
		bookingGetBookingStatusPasswordFlag = bookingGetBookingStatusFlags.String("password", "REQUIRED", "")

		bookingListBookingsFlags        = flag.NewFlagSet("list-bookings", flag.ExitOnError)
		bookingListBookingsBodyFlag     = bookingListBookingsFlags.String("body", "REQUIRED", "")
		bookingListBookingsUsernameFlag = bookingListBookingsFlags.String("username", "REQUIRED", "")
		bookingListBookingsPasswordFlag = bookingListBookingsFlags.String("password", "REQUIRED", "")

		orderFlags = flag.NewFlagSet("order", flag.ContinueOnError)

		orderCheckOrderFulfillabilityFlags        = flag.NewFlagSet("check-order-fulfillability", flag.ExitOnError)
		orderCheckOrderFulfillabilityBodyFlag     = orderCheckOrderFulfillabilityFlags.String("body", "REQUIRED", "")
		orderCheckOrderFulfillabilityUsernameFlag = orderCheckOrderFulfillabilityFlags.String("username", "REQUIRED", "")
		orderCheckOrderFulfillabilityPasswordFlag = orderCheckOrderFulfillabilityFlags.String("password", "REQUIRED", "")

		orderCreateOrderFlags        = flag.NewFlagSet("create-order", flag.ExitOnError)
		orderCreateOrderBodyFlag     = orderCreateOrderFlags.String("body", "REQUIRED", "")
		orderCreateOrderUsernameFlag = orderCreateOrderFlags.String("username", "REQUIRED", "")
		orderCreateOrderPasswordFlag = orderCreateOrderFlags.String("password", "REQUIRED", "")

		orderListOrdersFlags        = flag.NewFlagSet("list-orders", flag.ExitOnError)
		orderListOrdersBodyFlag     = orderListOrdersFlags.String("body", "REQUIRED", "")
		orderListOrdersUsernameFlag = orderListOrdersFlags.String("username", "REQUIRED", "")
		orderListOrdersPasswordFlag = orderListOrdersFlags.String("password", "REQUIRED", "")

		waitlistFlags = flag.NewFlagSet("waitlist", flag.ContinueOnError)

		waitlistBatchGetWaitEstimatesFlags        = flag.NewFlagSet("batch-get-wait-estimates", flag.ExitOnError)
		waitlistBatchGetWaitEstimatesBodyFlag     = waitlistBatchGetWaitEstimatesFlags.String("body", "REQUIRED", "")
		waitlistBatchGetWaitEstimatesUsernameFlag = waitlistBatchGetWaitEstimatesFlags.String("username", "REQUIRED", "")
		waitlistBatchGetWaitEstimatesPasswordFlag = waitlistBatchGetWaitEstimatesFlags.String("password", "REQUIRED", "")

		waitlistCreateWaitlistEntryFlags        = flag.NewFlagSet("create-waitlist-entry", flag.ExitOnError)
		waitlistCreateWaitlistEntryBodyFlag     = waitlistCreateWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistCreateWaitlistEntryUsernameFlag = waitlistCreateWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistCreateWaitlistEntryPasswordFlag = waitlistCreateWaitlistEntryFlags.String("password", "REQUIRED", "")

		waitlistGetWaitlistEntryFlags        = flag.NewFlagSet("get-waitlist-entry", flag.ExitOnError)
		waitlistGetWaitlistEntryBodyFlag     = waitlistGetWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistGetWaitlistEntryUsernameFlag = waitlistGetWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistGetWaitlistEntryPasswordFlag = waitlistGetWaitlistEntryFlags.String("password", "REQUIRED", "")

		waitlistDeleteWaitlistEntryFlags        = flag.NewFlagSet("delete-waitlist-entry", flag.ExitOnError)
		waitlistDeleteWaitlistEntryBodyFlag     = waitlistDeleteWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistDeleteWaitlistEntryUsernameFlag = waitlistDeleteWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistDeleteWaitlistEntryPasswordFlag = waitlistDeleteWaitlistEntryFlags.String("password", "REQUIRED", "")
	)
	commonFlags.Usage = commonUsage
	commonHealthCheckFlags.Usage = commonHealthCheckUsage

	bookingFlags.Usage = bookingUsage
	bookingBatchAvailabilityLookupFlags.Usage = bookingBatchAvailabilityLookupUsage
	bookingCheckAvailabilityFlags.Usage = bookingCheckAvailabilityUsage
	bookingCreateBookingFlags.Usage = bookingCreateBookingUsage
	bookingUpdateBookingFlags.Usage = bookingUpdateBookingUsage
	bookingGetBookingStatusFlags.Usage = bookingGetBookingStatusUsage
	bookingListBookingsFlags.Usage = bookingListBookingsUsage

	orderFlags.Usage = orderUsage
	orderCheckOrderFulfillabilityFlags.Usage = orderCheckOrderFulfillabilityUsage
	orderCreateOrderFlags.Usage = orderCreateOrderUsage
	orderListOrdersFlags.Usage = orderListOrdersUsage

	waitlistFlags.Usage = waitlistUsage
	waitlistBatchGetWaitEstimatesFlags.Usage = waitlistBatchGetWaitEstimatesUsage
	waitlistCreateWaitlistEntryFlags.Usage = waitlistCreateWaitlistEntryUsage
	waitlistGetWaitlistEntryFlags.Usage = waitlistGetWaitlistEntryUsage
	waitlistDeleteWaitlistEntryFlags.Usage = waitlistDeleteWaitlistEntryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "common":
			svcf = commonFlags
		case "booking":
			svcf = bookingFlags
		case "order":
			svcf = orderFlags
		case "waitlist":
			svcf = waitlistFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "common":
			switch epn {
			case "health-check":
				epf = commonHealthCheckFlags

			}

		case "booking":
			switch epn {
			case "batch-availability-lookup":
				epf = bookingBatchAvailabilityLookupFlags

			case "check-availability":
				epf = bookingCheckAvailabilityFlags

			case "create-booking":
				epf = bookingCreateBookingFlags

			case "update-booking":
				epf = bookingUpdateBookingFlags

			case "get-booking-status":
				epf = bookingGetBookingStatusFlags

			case "list-bookings":
				epf = bookingListBookingsFlags

			}

		case "order":
			switch epn {
			case "check-order-fulfillability":
				epf = orderCheckOrderFulfillabilityFlags

			case "create-order":
				epf = orderCreateOrderFlags

			case "list-orders":
				epf = orderListOrdersFlags

			}

		case "waitlist":
			switch epn {
			case "batch-get-wait-estimates":
				epf = waitlistBatchGetWaitEstimatesFlags

			case "create-waitlist-entry":
				epf = waitlistCreateWaitlistEntryFlags

			case "get-waitlist-entry":
				epf = waitlistGetWaitlistEntryFlags

			case "delete-waitlist-entry":
				epf = waitlistDeleteWaitlistEntryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "common":
			c := commonc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "health-check":
				endpoint = c.HealthCheck()
				data, err = commonc.BuildHealthCheckPayload(*commonHealthCheckUsernameFlag, *commonHealthCheckPasswordFlag)
			}
		case "booking":
			c := bookingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "batch-availability-lookup":
				endpoint = c.BatchAvailabilityLookup()
				data, err = bookingc.BuildBatchAvailabilityLookupPayload(*bookingBatchAvailabilityLookupBodyFlag, *bookingBatchAvailabilityLookupUsernameFlag, *bookingBatchAvailabilityLookupPasswordFlag)
			case "check-availability":
				endpoint = c.CheckAvailability()
				data, err = bookingc.BuildCheckAvailabilityPayload(*bookingCheckAvailabilityBodyFlag, *bookingCheckAvailabilityUsernameFlag, *bookingCheckAvailabilityPasswordFlag)
			case "create-booking":
				endpoint = c.CreateBooking()
				data, err = bookingc.BuildCreateBookingPayload(*bookingCreateBookingBodyFlag, *bookingCreateBookingUsernameFlag, *bookingCreateBookingPasswordFlag)
			case "update-booking":
				endpoint = c.UpdateBooking()
				data, err = bookingc.BuildUpdateBookingPayload(*bookingUpdateBookingBodyFlag, *bookingUpdateBookingUsernameFlag, *bookingUpdateBookingPasswordFlag)
			case "get-booking-status":
				endpoint = c.GetBookingStatus()
				data, err = bookingc.BuildGetBookingStatusPayload(*bookingGetBookingStatusBodyFlag, *bookingGetBookingStatusUsernameFlag, *bookingGetBookingStatusPasswordFlag)
			case "list-bookings":
				endpoint = c.ListBookings()
				data, err = bookingc.BuildListBookingsPayload(*bookingListBookingsBodyFlag, *bookingListBookingsUsernameFlag, *bookingListBookingsPasswordFlag)
			}
		case "order":
			c := orderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check-order-fulfillability":
				endpoint = c.CheckOrderFulfillability()
				data, err = orderc.BuildCheckOrderFulfillabilityPayload(*orderCheckOrderFulfillabilityBodyFlag, *orderCheckOrderFulfillabilityUsernameFlag, *orderCheckOrderFulfillabilityPasswordFlag)
			case "create-order":
				endpoint = c.CreateOrder()
				data, err = orderc.BuildCreateOrderPayload(*orderCreateOrderBodyFlag, *orderCreateOrderUsernameFlag, *orderCreateOrderPasswordFlag)
			case "list-orders":
				endpoint = c.ListOrders()
				data, err = orderc.BuildListOrdersPayload(*orderListOrdersBodyFlag, *orderListOrdersUsernameFlag, *orderListOrdersPasswordFlag)
			}
		case "waitlist":
			c := waitlistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "batch-get-wait-estimates":
				endpoint = c.BatchGetWaitEstimates()
				data, err = waitlistc.BuildBatchGetWaitEstimatesPayload(*waitlistBatchGetWaitEstimatesBodyFlag, *waitlistBatchGetWaitEstimatesUsernameFlag, *waitlistBatchGetWaitEstimatesPasswordFlag)
			case "create-waitlist-entry":
				endpoint = c.CreateWaitlistEntry()
				data, err = waitlistc.BuildCreateWaitlistEntryPayload(*waitlistCreateWaitlistEntryBodyFlag, *waitlistCreateWaitlistEntryUsernameFlag, *waitlistCreateWaitlistEntryPasswordFlag)
			case "get-waitlist-entry":
				endpoint = c.GetWaitlistEntry()
				data, err = waitlistc.BuildGetWaitlistEntryPayload(*waitlistGetWaitlistEntryBodyFlag, *waitlistGetWaitlistEntryUsernameFlag, *waitlistGetWaitlistEntryPasswordFlag)
			case "delete-waitlist-entry":
				endpoint = c.DeleteWaitlistEntry()
				data, err = waitlistc.BuildDeleteWaitlistEntryPayload(*waitlistDeleteWaitlistEntryBodyFlag, *waitlistDeleteWaitlistEntryUsernameFlag, *waitlistDeleteWaitlistEntryPasswordFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// commonUsage displays the usage of the common command and its subcommands.
func commonUsage() {
	fmt.Fprintf(os.Stderr, `Service is the common service interface.
Usage:
    %s [globalflags] common COMMAND [flags]

COMMAND:
    health-check: HealthCheck implements health_check.

Additional help:
    %s common COMMAND --help
`, os.Args[0], os.Args[0])
}
func commonHealthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] common health-check -username STRING -password STRING

HealthCheck implements health_check.
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` common health-check --username "Ipsa voluptatem." --password "Nisi doloribus ut qui pariatur."
`, os.Args[0])
}

// bookingUsage displays the usage of the booking command and its subcommands.
func bookingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the booking service interface.
Usage:
    %s [globalflags] booking COMMAND [flags]

COMMAND:
    batch-availability-lookup: BatchAvailabilityLookup implements batch_availability_lookup.
    check-availability: CheckAvailability implements check_availability.
    create-booking: CreateBooking implements create_booking.
    update-booking: UpdateBooking implements update_booking.
    get-booking-status: GetBookingStatus implements get_booking_status.
    list-bookings: ListBookings implements list_bookings.

Additional help:
    %s booking COMMAND --help
`, os.Args[0], os.Args[0])
}
func bookingBatchAvailabilityLookupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking batch-availability-lookup -body JSON -username STRING -password STRING

BatchAvailabilityLookup implements batch_availability_lookup.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking batch-availability-lookup --body '{
      "merchant_id": "Ipsa incidunt non tempora deleniti ipsa et.",
      "slot_time": [
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         },
         {
            "availability_tag": "Accusamus aspernatur labore at quo.",
            "confirmation_mode": "CONFIRMATION_MODE_UNSPECIFIED",
            "duration_sec": 8435747200459079087,
            "resource_ids": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Ex soluta aut veritatis soluta quod.",
            "start_sec": 5917608252949059848
         }
      ]
   }' --username "Doloribus ut." --password "Esse ex nisi quasi."
`, os.Args[0])
}

func bookingCheckAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking check-availability -body JSON -username STRING -password STRING

CheckAvailability implements check_availability.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking check-availability --body '{
      "slot": {
         "availability_tag": "Ratione fugiat.",
         "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
         "duration_sec": 8817681372972889417,
         "merchant_id": "Et quia voluptates.",
         "resources": {
            "party_size": 1294063121,
            "room_id": "Quia et ea rerum est expedita.",
            "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
         },
         "service_id": "Nulla praesentium et non omnis modi.",
         "start_sec": 2392541444029039475
      }
   }' --username "Ullam qui unde sit aspernatur molestiae." --password "Doloribus aliquam rerum sed ea et."
`, os.Args[0])
}

func bookingCreateBookingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking create-booking -body JSON -username STRING -password STRING

CreateBooking implements create_booking.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking create-booking --body '{
      "additional_request": "Est officiis sunt praesentium molestias excepturi.",
      "deal_id": "Atque adipisci quibusdam.",
      "idempotency_token": "Suscipit recusandae quasi porro maiores laborum.",
      "lease_ref": {
         "lease_id": "Sit dolores."
      },
      "offer_id": "Voluptatem consectetur at repellat quo.",
      "payment_information": {
         "deposit": {
            "deposit": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "deposit_type": "FIXED_RATE_DEFAULT",
            "min_advance_cancellation_sec": 2682111425714885120
         },
         "fees": {
            "currency_code": "Sit quae.",
            "price_micros": 6250006249689697416,
            "pricing_option_tag": "Perferendis iusto ea quae est quam."
         },
         "fees_and_taxes": {
            "currency_code": "Sit quae.",
            "price_micros": 6250006249689697416,
            "pricing_option_tag": "Perferendis iusto ea quae est quam."
         },
         "fraud_signals": "Iusto amet pariatur.",
         "md_merchant_data": "Saepe quia.",
         "no_show_fee": {
            "fee": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "fee_type": "PER_PERSON"
         },
         "pa_response": "Pariatur quia et.",
         "payment_option_id": "Facere tempore provident impedit veniam incidunt suscipit.",
         "payment_processed_by": "PROCESSED_BY_GOOGLE",
         "payment_transaction_id": "Tenetur exercitationem non.",
         "prepayment_status": "PREPAYMENT_PROVIDED",
         "price": {
            "currency_code": "Sit quae.",
            "price_micros": 6250006249689697416,
            "pricing_option_tag": "Perferendis iusto ea quae est quam."
         },
         "tax_amount": {
            "currency_code": "Sit quae.",
            "price_micros": 6250006249689697416,
            "pricing_option_tag": "Perferendis iusto ea quae est quam."
         },
         "user_payment_option_id": "Sapiente saepe libero quaerat velit quam."
      },
      "payment_processing_parameters": {
         "payment_method_token": "Sunt quod quos architecto iure quia quibusdam.",
         "payment_processor": "Laboriosam est delectus quo quo.",
         "processor": "PAYMENT_PROCESSOR_UNSPECIFIED",
         "tokenization_config": {
            "allowed_auth_methods": [
               "PAN_ONLY",
               "AUTH_METHOD_UNSPECIFIED",
               "AUTH_METHOD_UNSPECIFIED"
            ],
            "billing_information_format": "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
            "card_network_parameters": [
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               }
            ],
            "merchant_of_record_name": "Blanditiis molestias.",
            "payment_country_code": "Qui eius expedita quo nihil.",
            "tokenization_parameter": {
               "Eaque aut.": "Excepturi quisquam necessitatibus dolorem.",
               "Error perspiciatis.": "Inventore dolor ab omnis.",
               "Sed exercitationem rem similique aut necessitatibus ullam.": "Eius sequi autem unde laudantium aspernatur."
            }
         },
         "unparsed_payment_method_token": "Possimus consequatur sequi asperiores quasi.",
         "version": "Animi quidem veniam molestiae."
      },
      "slot": {
         "availability_tag": "Ratione fugiat.",
         "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
         "duration_sec": 8817681372972889417,
         "merchant_id": "Et quia voluptates.",
         "resources": {
            "party_size": 1294063121,
            "room_id": "Quia et ea rerum est expedita.",
            "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
         },
         "service_id": "Nulla praesentium et non omnis modi.",
         "start_sec": 2392541444029039475
      },
      "user_information": {
         "address": {
            "country": "Vel et vel.",
            "locality": "Illum optio.",
            "postal_code": "Porro molestiae quam dignissimos illum quia praesentium.",
            "region": "Praesentium nemo quia molestias.",
            "street_address": "Esse necessitatibus officia nihil at mollitia nobis."
         },
         "email": "Rerum excepturi ea accusamus illo.",
         "family_name": "Repudiandae enim voluptas quia sed tenetur possimus.",
         "given_name": "Debitis hic id qui.",
         "language_code": "Reiciendis expedita consectetur at nulla.",
         "telephone": "In nostrum quae sint.",
         "user_id": "Et voluptatibus eius soluta."
      }
   }' --username "Voluptatem dolore omnis est architecto." --password "Est quis."
`, os.Args[0])
}

func bookingUpdateBookingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking update-booking -body JSON -username STRING -password STRING

UpdateBooking implements update_booking.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking update-booking --body '{
      "booking": {
         "booking_id": "Id dolorem nobis.",
         "offer_info": {
            "offer_id": "Quaerat dolor et et et voluptatem inventore."
         },
         "payment_information": {
            "deposit": {
               "deposit": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "deposit_type": "FIXED_RATE_DEFAULT",
               "min_advance_cancellation_sec": 2682111425714885120
            },
            "fees": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "fees_and_taxes": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "fraud_signals": "Iusto amet pariatur.",
            "md_merchant_data": "Saepe quia.",
            "no_show_fee": {
               "fee": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "fee_type": "PER_PERSON"
            },
            "pa_response": "Pariatur quia et.",
            "payment_option_id": "Facere tempore provident impedit veniam incidunt suscipit.",
            "payment_processed_by": "PROCESSED_BY_GOOGLE",
            "payment_transaction_id": "Tenetur exercitationem non.",
            "prepayment_status": "PREPAYMENT_PROVIDED",
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "tax_amount": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "user_payment_option_id": "Sapiente saepe libero quaerat velit quam."
         },
         "slot": {
            "availability_tag": "Ratione fugiat.",
            "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
            "duration_sec": 8817681372972889417,
            "merchant_id": "Et quia voluptates.",
            "resources": {
               "party_size": 1294063121,
               "room_id": "Quia et ea rerum est expedita.",
               "staff_id": "Adipisci et impedit velit dignissimos autem fuga."
            },
            "service_id": "Nulla praesentium et non omnis modi.",
            "start_sec": 2392541444029039475
         },
         "status": "PENDING_MERCHANT_CONFIRMATION",
         "user_information": {
            "address": {
               "country": "Vel et vel.",
               "locality": "Illum optio.",
               "postal_code": "Porro molestiae quam dignissimos illum quia praesentium.",
               "region": "Praesentium nemo quia molestias.",
               "street_address": "Esse necessitatibus officia nihil at mollitia nobis."
            },
            "email": "Rerum excepturi ea accusamus illo.",
            "family_name": "Repudiandae enim voluptas quia sed tenetur possimus.",
            "given_name": "Debitis hic id qui.",
            "language_code": "Reiciendis expedita consectetur at nulla.",
            "telephone": "In nostrum quae sint.",
            "user_id": "Et voluptatibus eius soluta."
         },
         "virtual_session_info": {
            "meeting_id": "Iure sunt quo dicta ducimus sunt.",
            "password": "Repudiandae sunt soluta praesentium laborum soluta.",
            "session_url": "Id qui inventore rerum."
         }
      }
   }' --username "Sint voluptatem laudantium molestias deleniti nemo." --password "Officia maiores quia aut."
`, os.Args[0])
}

func bookingGetBookingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking get-booking-status -body JSON -username STRING -password STRING

GetBookingStatus implements get_booking_status.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking get-booking-status --body '{
      "booking_id": "Omnis distinctio."
   }' --username "Temporibus et architecto eaque enim." --password "Officiis laboriosam impedit minus et ducimus pariatur."
`, os.Args[0])
}

func bookingListBookingsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking list-bookings -body JSON -username STRING -password STRING

ListBookings implements list_bookings.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking list-bookings --body '{
      "user_id": "Quia voluptatem sit qui iusto."
   }' --username "Nisi et." --password "Debitis voluptatem dolores ea aut quis ipsam."
`, os.Args[0])
}

// orderUsage displays the usage of the order command and its subcommands.
func orderUsage() {
	fmt.Fprintf(os.Stderr, `Service is the order service interface.
Usage:
    %s [globalflags] order COMMAND [flags]

COMMAND:
    check-order-fulfillability: CheckOrderFulfillability implements check_order_fulfillability.
    create-order: CreateOrder implements create_order.
    list-orders: ListOrders implements list_orders.

Additional help:
    %s order COMMAND --help
`, os.Args[0], os.Args[0])
}
func orderCheckOrderFulfillabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order check-order-fulfillability -body JSON -username STRING -password STRING

CheckOrderFulfillability implements check_order_fulfillability.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order check-order-fulfillability --body '{
      "cart_id": "Nisi odit alias et at magni.",
      "item": [
         {
            "duration_sec": 5218063573410113424,
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  },
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "service_id": "Quo at harum cupiditate officia.",
            "start_sec": 2726691727586715899,
            "status": "BOOKING_STATUS_UNSPECIFIED",
            "tickets": [
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               }
            ],
            "warning_reason": "PRICE_INCREASE"
         },
         {
            "duration_sec": 5218063573410113424,
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  },
                  {
                     "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                     "response": [
                        "Quas harum ad qui excepturi sint.",
                        "Dignissimos et.",
                        "Quasi est placeat vel doloribus facilis.",
                        "Ut est vel laborum."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "service_id": "Quo at harum cupiditate officia.",
            "start_sec": 2726691727586715899,
            "status": "BOOKING_STATUS_UNSPECIFIED",
            "tickets": [
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               },
               {
                  "count": 1295690387,
                  "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
               }
            ],
            "warning_reason": "PRICE_INCREASE"
         }
      ],
      "merchant_id": "Voluptatibus omnis expedita autem ea."
   }' --username "Autem pariatur et." --password "Voluptatem nostrum et eum."
`, os.Args[0])
}

func orderCreateOrderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order create-order -body JSON -username STRING -password STRING

CreateOrder implements create_order.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order create-order --body '{
      "idempotency_token": "Exercitationem et voluptas velit voluptas.",
      "order": {
         "item": [
            {
               "duration_sec": 5218063573410113424,
               "intake_form_answers": {
                  "answer": [
                     {
                        "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                        "response": [
                           "Quas harum ad qui excepturi sint.",
                           "Dignissimos et.",
                           "Quasi est placeat vel doloribus facilis.",
                           "Ut est vel laborum."
                        ]
                     },
                     {
                        "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                        "response": [
                           "Quas harum ad qui excepturi sint.",
                           "Dignissimos et.",
                           "Quasi est placeat vel doloribus facilis.",
                           "Ut est vel laborum."
                        ]
                     }
                  ]
               },
               "price": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "service_id": "Quo at harum cupiditate officia.",
               "start_sec": 2726691727586715899,
               "status": "BOOKING_STATUS_UNSPECIFIED",
               "tickets": [
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  },
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  },
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  }
               ],
               "warning_reason": "PRICE_INCREASE"
            },
            {
               "duration_sec": 5218063573410113424,
               "intake_form_answers": {
                  "answer": [
                     {
                        "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                        "response": [
                           "Quas harum ad qui excepturi sint.",
                           "Dignissimos et.",
                           "Quasi est placeat vel doloribus facilis.",
                           "Ut est vel laborum."
                        ]
                     },
                     {
                        "id": "Nesciunt eum sit voluptate vel unde ipsam.",
                        "response": [
                           "Quas harum ad qui excepturi sint.",
                           "Dignissimos et.",
                           "Quasi est placeat vel doloribus facilis.",
                           "Ut est vel laborum."
                        ]
                     }
                  ]
               },
               "price": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "service_id": "Quo at harum cupiditate officia.",
               "start_sec": 2726691727586715899,
               "status": "BOOKING_STATUS_UNSPECIFIED",
               "tickets": [
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  },
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  },
                  {
                     "count": 1295690387,
                     "ticket_id": "Corporis ex quis reprehenderit molestiae fugit."
                  }
               ],
               "warning_reason": "PRICE_INCREASE"
            }
         ],
         "merchant_id": "Iste unde et deleniti rem illum officia.",
         "order_id": "Necessitatibus velit consequuntur et.",
         "payment_information": {
            "deposit": {
               "deposit": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "deposit_type": "FIXED_RATE_DEFAULT",
               "min_advance_cancellation_sec": 2682111425714885120
            },
            "fees": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "fees_and_taxes": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "fraud_signals": "Iusto amet pariatur.",
            "md_merchant_data": "Saepe quia.",
            "no_show_fee": {
               "fee": {
                  "currency_code": "Sit quae.",
                  "price_micros": 6250006249689697416,
                  "pricing_option_tag": "Perferendis iusto ea quae est quam."
               },
               "fee_type": "PER_PERSON"
            },
            "pa_response": "Pariatur quia et.",
            "payment_option_id": "Facere tempore provident impedit veniam incidunt suscipit.",
            "payment_processed_by": "PROCESSED_BY_GOOGLE",
            "payment_transaction_id": "Tenetur exercitationem non.",
            "prepayment_status": "PREPAYMENT_PROVIDED",
            "price": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "tax_amount": {
               "currency_code": "Sit quae.",
               "price_micros": 6250006249689697416,
               "pricing_option_tag": "Perferendis iusto ea quae est quam."
            },
            "user_payment_option_id": "Sapiente saepe libero quaerat velit quam."
         },
         "user_information": {
            "address": {
               "country": "Vel et vel.",
               "locality": "Illum optio.",
               "postal_code": "Porro molestiae quam dignissimos illum quia praesentium.",
               "region": "Praesentium nemo quia molestias.",
               "street_address": "Esse necessitatibus officia nihil at mollitia nobis."
            },
            "email": "Rerum excepturi ea accusamus illo.",
            "family_name": "Repudiandae enim voluptas quia sed tenetur possimus.",
            "given_name": "Debitis hic id qui.",
            "language_code": "Reiciendis expedita consectetur at nulla.",
            "telephone": "In nostrum quae sint.",
            "user_id": "Et voluptatibus eius soluta."
         }
      },
      "payment_processing_parameters": {
         "payment_method_token": "Sunt quod quos architecto iure quia quibusdam.",
         "payment_processor": "Laboriosam est delectus quo quo.",
         "processor": "PAYMENT_PROCESSOR_UNSPECIFIED",
         "tokenization_config": {
            "allowed_auth_methods": [
               "PAN_ONLY",
               "AUTH_METHOD_UNSPECIFIED",
               "AUTH_METHOD_UNSPECIFIED"
            ],
            "billing_information_format": "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
            "card_network_parameters": [
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               },
               {
                  "acquirer_bin": "Sit molestiae sed quasi.",
                  "acquirer_merchant_id": "Sed eum officia.",
                  "card_network": "DISCOVER"
               }
            ],
            "merchant_of_record_name": "Blanditiis molestias.",
            "payment_country_code": "Qui eius expedita quo nihil.",
            "tokenization_parameter": {
               "Eaque aut.": "Excepturi quisquam necessitatibus dolorem.",
               "Error perspiciatis.": "Inventore dolor ab omnis.",
               "Sed exercitationem rem similique aut necessitatibus ullam.": "Eius sequi autem unde laudantium aspernatur."
            }
         },
         "unparsed_payment_method_token": "Possimus consequatur sequi asperiores quasi.",
         "version": "Animi quidem veniam molestiae."
      }
   }' --username "Autem ipsam facilis delectus ut et." --password "Qui asperiores."
`, os.Args[0])
}

func orderListOrdersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order list-orders -body JSON -username STRING -password STRING

ListOrders implements list_orders.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order list-orders --body '{
      "order_ids": {
         "order_id": [
            "Voluptatem temporibus itaque error dolores odio.",
            "Quis modi autem quidem quaerat.",
            "Repellat qui quod nesciunt sint officiis.",
            "Et voluptatem neque et id nisi."
         ]
      },
      "user_id": "Omnis qui similique quos tempore maiores."
   }' --username "Nisi qui." --password "Mollitia aut quaerat quasi."
`, os.Args[0])
}

// waitlistUsage displays the usage of the waitlist command and its subcommands.
func waitlistUsage() {
	fmt.Fprintf(os.Stderr, `Service is the waitlist service interface.
Usage:
    %s [globalflags] waitlist COMMAND [flags]

COMMAND:
    batch-get-wait-estimates: BatchGetWaitEstimates implements batch_get_wait_estimates.
    create-waitlist-entry: CreateWaitlistEntry implements create_waitlist_entry.
    get-waitlist-entry: GetWaitlistEntry implements get_waitlist_entry.
    delete-waitlist-entry: DeleteWaitlistEntry implements delete_waitlist_entry.

Additional help:
    %s waitlist COMMAND --help
`, os.Args[0], os.Args[0])
}
func waitlistBatchGetWaitEstimatesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist batch-get-wait-estimates -body JSON -username STRING -password STRING

BatchGetWaitEstimates implements batch_get_wait_estimates.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist batch-get-wait-estimates --body '{
      "merchant_id": "Ipsum praesentium tenetur veniam molestiae sed distinctio.",
      "party_size": [
         1195391964,
         1522198561,
         1006042009,
         2009461095
      ],
      "service_id": "Nulla dicta repellendus labore."
   }' --username "Dolor quaerat quae." --password "Iusto quas dolor."
`, os.Args[0])
}

func waitlistCreateWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist create-waitlist-entry -body JSON -username STRING -password STRING

CreateWaitlistEntry implements create_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist create-waitlist-entry --body '{
      "additional_request": "Aut possimus occaecati velit.",
      "idempotency_token": "Qui natus.",
      "merchant_id": "Sint non.",
      "party_size": 423053857,
      "service_id": "Cupiditate non culpa saepe rem.",
      "user_information": {
         "address": {
            "country": "Vel et vel.",
            "locality": "Illum optio.",
            "postal_code": "Porro molestiae quam dignissimos illum quia praesentium.",
            "region": "Praesentium nemo quia molestias.",
            "street_address": "Esse necessitatibus officia nihil at mollitia nobis."
         },
         "email": "Rerum excepturi ea accusamus illo.",
         "family_name": "Repudiandae enim voluptas quia sed tenetur possimus.",
         "given_name": "Debitis hic id qui.",
         "language_code": "Reiciendis expedita consectetur at nulla.",
         "telephone": "In nostrum quae sint.",
         "user_id": "Et voluptatibus eius soluta."
      }
   }' --username "Iure aliquam cumque autem sapiente consequatur qui." --password "Animi perspiciatis."
`, os.Args[0])
}

func waitlistGetWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist get-waitlist-entry -body JSON -username STRING -password STRING

GetWaitlistEntry implements get_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist get-waitlist-entry --body '{
      "waitlist_entry_id": "Quia asperiores eos."
   }' --username "Et quia provident earum." --password "Similique esse a provident dolores omnis."
`, os.Args[0])
}

func waitlistDeleteWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist delete-waitlist-entry -body JSON -username STRING -password STRING

DeleteWaitlistEntry implements delete_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist delete-waitlist-entry --body '{
      "waitlist_entry_id": "Sed ut."
   }' --username "Reprehenderit qui." --password "Voluptatem aperiam earum eos sequi non."
`, os.Args[0])
}
