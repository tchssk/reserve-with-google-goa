// Code generated by goa v3.2.4, DO NOT EDIT.
//
// common HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	bookingc "github.com/tchssk/reserve-with-google-goa/gen/http/booking/client"
	commonc "github.com/tchssk/reserve-with-google-goa/gen/http/common/client"
	orderc "github.com/tchssk/reserve-with-google-goa/gen/http/order/client"
	waitlistc "github.com/tchssk/reserve-with-google-goa/gen/http/waitlist/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `common health-check
booking (batch-availability-lookup|check-availability|create-booking|update-booking|get-booking-status|list-bookings)
order (check-order-fulfillability|create-order|list-orders)
waitlist (batch-get-wait-estimates|create-waitlist-entry|get-waitlist-entry|delete-waitlist-entry)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` common health-check --username "Dolores omnis et labore ea." --password "Atque perspiciatis harum fugiat delectus explicabo."` + "\n" +
		os.Args[0] + ` booking batch-availability-lookup --body '{
      "merchant_id": "Quia voluptates porro nulla praesentium.",
      "slot_time": [
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         },
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         },
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         }
      ]
   }' --username "Enim ut optio vero corporis quam veniam." --password "Nesciunt occaecati maxime perspiciatis."` + "\n" +
		os.Args[0] + ` order check-order-fulfillability --body '{
      "cart_id": "Molestias est minima eum porro sunt earum.",
      "item": [
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         }
      ],
      "merchant_id": "Commodi vel placeat est debitis odit dicta."
   }' --username "Minima architecto vel eaque tempore porro porro." --password "Et impedit necessitatibus velit consequuntur."` + "\n" +
		os.Args[0] + ` waitlist batch-get-wait-estimates --body '{
      "merchant_id": "Sint ea officia labore.",
      "party_size": [
         1456607358,
         1218899136,
         1607272068
      ],
      "service_id": "Ut eaque aut qui in incidunt vel."
   }' --username "Impedit et repellat." --password "In sed ut quo."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		commonFlags = flag.NewFlagSet("common", flag.ContinueOnError)

		commonHealthCheckFlags        = flag.NewFlagSet("health-check", flag.ExitOnError)
		commonHealthCheckUsernameFlag = commonHealthCheckFlags.String("username", "REQUIRED", "")
		commonHealthCheckPasswordFlag = commonHealthCheckFlags.String("password", "REQUIRED", "")

		bookingFlags = flag.NewFlagSet("booking", flag.ContinueOnError)

		bookingBatchAvailabilityLookupFlags        = flag.NewFlagSet("batch-availability-lookup", flag.ExitOnError)
		bookingBatchAvailabilityLookupBodyFlag     = bookingBatchAvailabilityLookupFlags.String("body", "REQUIRED", "")
		bookingBatchAvailabilityLookupUsernameFlag = bookingBatchAvailabilityLookupFlags.String("username", "REQUIRED", "")
		bookingBatchAvailabilityLookupPasswordFlag = bookingBatchAvailabilityLookupFlags.String("password", "REQUIRED", "")

		bookingCheckAvailabilityFlags        = flag.NewFlagSet("check-availability", flag.ExitOnError)
		bookingCheckAvailabilityBodyFlag     = bookingCheckAvailabilityFlags.String("body", "REQUIRED", "")
		bookingCheckAvailabilityUsernameFlag = bookingCheckAvailabilityFlags.String("username", "REQUIRED", "")
		bookingCheckAvailabilityPasswordFlag = bookingCheckAvailabilityFlags.String("password", "REQUIRED", "")

		bookingCreateBookingFlags        = flag.NewFlagSet("create-booking", flag.ExitOnError)
		bookingCreateBookingBodyFlag     = bookingCreateBookingFlags.String("body", "REQUIRED", "")
		bookingCreateBookingUsernameFlag = bookingCreateBookingFlags.String("username", "REQUIRED", "")
		bookingCreateBookingPasswordFlag = bookingCreateBookingFlags.String("password", "REQUIRED", "")

		bookingUpdateBookingFlags        = flag.NewFlagSet("update-booking", flag.ExitOnError)
		bookingUpdateBookingBodyFlag     = bookingUpdateBookingFlags.String("body", "REQUIRED", "")
		bookingUpdateBookingUsernameFlag = bookingUpdateBookingFlags.String("username", "REQUIRED", "")
		bookingUpdateBookingPasswordFlag = bookingUpdateBookingFlags.String("password", "REQUIRED", "")

		bookingGetBookingStatusFlags        = flag.NewFlagSet("get-booking-status", flag.ExitOnError)
		bookingGetBookingStatusBodyFlag     = bookingGetBookingStatusFlags.String("body", "REQUIRED", "")
		bookingGetBookingStatusUsernameFlag = bookingGetBookingStatusFlags.String("username", "REQUIRED", "")
		bookingGetBookingStatusPasswordFlag = bookingGetBookingStatusFlags.String("password", "REQUIRED", "")

		bookingListBookingsFlags        = flag.NewFlagSet("list-bookings", flag.ExitOnError)
		bookingListBookingsBodyFlag     = bookingListBookingsFlags.String("body", "REQUIRED", "")
		bookingListBookingsUsernameFlag = bookingListBookingsFlags.String("username", "REQUIRED", "")
		bookingListBookingsPasswordFlag = bookingListBookingsFlags.String("password", "REQUIRED", "")

		orderFlags = flag.NewFlagSet("order", flag.ContinueOnError)

		orderCheckOrderFulfillabilityFlags        = flag.NewFlagSet("check-order-fulfillability", flag.ExitOnError)
		orderCheckOrderFulfillabilityBodyFlag     = orderCheckOrderFulfillabilityFlags.String("body", "REQUIRED", "")
		orderCheckOrderFulfillabilityUsernameFlag = orderCheckOrderFulfillabilityFlags.String("username", "REQUIRED", "")
		orderCheckOrderFulfillabilityPasswordFlag = orderCheckOrderFulfillabilityFlags.String("password", "REQUIRED", "")

		orderCreateOrderFlags        = flag.NewFlagSet("create-order", flag.ExitOnError)
		orderCreateOrderBodyFlag     = orderCreateOrderFlags.String("body", "REQUIRED", "")
		orderCreateOrderUsernameFlag = orderCreateOrderFlags.String("username", "REQUIRED", "")
		orderCreateOrderPasswordFlag = orderCreateOrderFlags.String("password", "REQUIRED", "")

		orderListOrdersFlags        = flag.NewFlagSet("list-orders", flag.ExitOnError)
		orderListOrdersBodyFlag     = orderListOrdersFlags.String("body", "REQUIRED", "")
		orderListOrdersUsernameFlag = orderListOrdersFlags.String("username", "REQUIRED", "")
		orderListOrdersPasswordFlag = orderListOrdersFlags.String("password", "REQUIRED", "")

		waitlistFlags = flag.NewFlagSet("waitlist", flag.ContinueOnError)

		waitlistBatchGetWaitEstimatesFlags        = flag.NewFlagSet("batch-get-wait-estimates", flag.ExitOnError)
		waitlistBatchGetWaitEstimatesBodyFlag     = waitlistBatchGetWaitEstimatesFlags.String("body", "REQUIRED", "")
		waitlistBatchGetWaitEstimatesUsernameFlag = waitlistBatchGetWaitEstimatesFlags.String("username", "REQUIRED", "")
		waitlistBatchGetWaitEstimatesPasswordFlag = waitlistBatchGetWaitEstimatesFlags.String("password", "REQUIRED", "")

		waitlistCreateWaitlistEntryFlags        = flag.NewFlagSet("create-waitlist-entry", flag.ExitOnError)
		waitlistCreateWaitlistEntryBodyFlag     = waitlistCreateWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistCreateWaitlistEntryUsernameFlag = waitlistCreateWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistCreateWaitlistEntryPasswordFlag = waitlistCreateWaitlistEntryFlags.String("password", "REQUIRED", "")

		waitlistGetWaitlistEntryFlags        = flag.NewFlagSet("get-waitlist-entry", flag.ExitOnError)
		waitlistGetWaitlistEntryBodyFlag     = waitlistGetWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistGetWaitlistEntryUsernameFlag = waitlistGetWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistGetWaitlistEntryPasswordFlag = waitlistGetWaitlistEntryFlags.String("password", "REQUIRED", "")

		waitlistDeleteWaitlistEntryFlags        = flag.NewFlagSet("delete-waitlist-entry", flag.ExitOnError)
		waitlistDeleteWaitlistEntryBodyFlag     = waitlistDeleteWaitlistEntryFlags.String("body", "REQUIRED", "")
		waitlistDeleteWaitlistEntryUsernameFlag = waitlistDeleteWaitlistEntryFlags.String("username", "REQUIRED", "")
		waitlistDeleteWaitlistEntryPasswordFlag = waitlistDeleteWaitlistEntryFlags.String("password", "REQUIRED", "")
	)
	commonFlags.Usage = commonUsage
	commonHealthCheckFlags.Usage = commonHealthCheckUsage

	bookingFlags.Usage = bookingUsage
	bookingBatchAvailabilityLookupFlags.Usage = bookingBatchAvailabilityLookupUsage
	bookingCheckAvailabilityFlags.Usage = bookingCheckAvailabilityUsage
	bookingCreateBookingFlags.Usage = bookingCreateBookingUsage
	bookingUpdateBookingFlags.Usage = bookingUpdateBookingUsage
	bookingGetBookingStatusFlags.Usage = bookingGetBookingStatusUsage
	bookingListBookingsFlags.Usage = bookingListBookingsUsage

	orderFlags.Usage = orderUsage
	orderCheckOrderFulfillabilityFlags.Usage = orderCheckOrderFulfillabilityUsage
	orderCreateOrderFlags.Usage = orderCreateOrderUsage
	orderListOrdersFlags.Usage = orderListOrdersUsage

	waitlistFlags.Usage = waitlistUsage
	waitlistBatchGetWaitEstimatesFlags.Usage = waitlistBatchGetWaitEstimatesUsage
	waitlistCreateWaitlistEntryFlags.Usage = waitlistCreateWaitlistEntryUsage
	waitlistGetWaitlistEntryFlags.Usage = waitlistGetWaitlistEntryUsage
	waitlistDeleteWaitlistEntryFlags.Usage = waitlistDeleteWaitlistEntryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "common":
			svcf = commonFlags
		case "booking":
			svcf = bookingFlags
		case "order":
			svcf = orderFlags
		case "waitlist":
			svcf = waitlistFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "common":
			switch epn {
			case "health-check":
				epf = commonHealthCheckFlags

			}

		case "booking":
			switch epn {
			case "batch-availability-lookup":
				epf = bookingBatchAvailabilityLookupFlags

			case "check-availability":
				epf = bookingCheckAvailabilityFlags

			case "create-booking":
				epf = bookingCreateBookingFlags

			case "update-booking":
				epf = bookingUpdateBookingFlags

			case "get-booking-status":
				epf = bookingGetBookingStatusFlags

			case "list-bookings":
				epf = bookingListBookingsFlags

			}

		case "order":
			switch epn {
			case "check-order-fulfillability":
				epf = orderCheckOrderFulfillabilityFlags

			case "create-order":
				epf = orderCreateOrderFlags

			case "list-orders":
				epf = orderListOrdersFlags

			}

		case "waitlist":
			switch epn {
			case "batch-get-wait-estimates":
				epf = waitlistBatchGetWaitEstimatesFlags

			case "create-waitlist-entry":
				epf = waitlistCreateWaitlistEntryFlags

			case "get-waitlist-entry":
				epf = waitlistGetWaitlistEntryFlags

			case "delete-waitlist-entry":
				epf = waitlistDeleteWaitlistEntryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "common":
			c := commonc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "health-check":
				endpoint = c.HealthCheck()
				data, err = commonc.BuildHealthCheckPayload(*commonHealthCheckUsernameFlag, *commonHealthCheckPasswordFlag)
			}
		case "booking":
			c := bookingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "batch-availability-lookup":
				endpoint = c.BatchAvailabilityLookup()
				data, err = bookingc.BuildBatchAvailabilityLookupPayload(*bookingBatchAvailabilityLookupBodyFlag, *bookingBatchAvailabilityLookupUsernameFlag, *bookingBatchAvailabilityLookupPasswordFlag)
			case "check-availability":
				endpoint = c.CheckAvailability()
				data, err = bookingc.BuildCheckAvailabilityPayload(*bookingCheckAvailabilityBodyFlag, *bookingCheckAvailabilityUsernameFlag, *bookingCheckAvailabilityPasswordFlag)
			case "create-booking":
				endpoint = c.CreateBooking()
				data, err = bookingc.BuildCreateBookingPayload(*bookingCreateBookingBodyFlag, *bookingCreateBookingUsernameFlag, *bookingCreateBookingPasswordFlag)
			case "update-booking":
				endpoint = c.UpdateBooking()
				data, err = bookingc.BuildUpdateBookingPayload(*bookingUpdateBookingBodyFlag, *bookingUpdateBookingUsernameFlag, *bookingUpdateBookingPasswordFlag)
			case "get-booking-status":
				endpoint = c.GetBookingStatus()
				data, err = bookingc.BuildGetBookingStatusPayload(*bookingGetBookingStatusBodyFlag, *bookingGetBookingStatusUsernameFlag, *bookingGetBookingStatusPasswordFlag)
			case "list-bookings":
				endpoint = c.ListBookings()
				data, err = bookingc.BuildListBookingsPayload(*bookingListBookingsBodyFlag, *bookingListBookingsUsernameFlag, *bookingListBookingsPasswordFlag)
			}
		case "order":
			c := orderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check-order-fulfillability":
				endpoint = c.CheckOrderFulfillability()
				data, err = orderc.BuildCheckOrderFulfillabilityPayload(*orderCheckOrderFulfillabilityBodyFlag, *orderCheckOrderFulfillabilityUsernameFlag, *orderCheckOrderFulfillabilityPasswordFlag)
			case "create-order":
				endpoint = c.CreateOrder()
				data, err = orderc.BuildCreateOrderPayload(*orderCreateOrderBodyFlag, *orderCreateOrderUsernameFlag, *orderCreateOrderPasswordFlag)
			case "list-orders":
				endpoint = c.ListOrders()
				data, err = orderc.BuildListOrdersPayload(*orderListOrdersBodyFlag, *orderListOrdersUsernameFlag, *orderListOrdersPasswordFlag)
			}
		case "waitlist":
			c := waitlistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "batch-get-wait-estimates":
				endpoint = c.BatchGetWaitEstimates()
				data, err = waitlistc.BuildBatchGetWaitEstimatesPayload(*waitlistBatchGetWaitEstimatesBodyFlag, *waitlistBatchGetWaitEstimatesUsernameFlag, *waitlistBatchGetWaitEstimatesPasswordFlag)
			case "create-waitlist-entry":
				endpoint = c.CreateWaitlistEntry()
				data, err = waitlistc.BuildCreateWaitlistEntryPayload(*waitlistCreateWaitlistEntryBodyFlag, *waitlistCreateWaitlistEntryUsernameFlag, *waitlistCreateWaitlistEntryPasswordFlag)
			case "get-waitlist-entry":
				endpoint = c.GetWaitlistEntry()
				data, err = waitlistc.BuildGetWaitlistEntryPayload(*waitlistGetWaitlistEntryBodyFlag, *waitlistGetWaitlistEntryUsernameFlag, *waitlistGetWaitlistEntryPasswordFlag)
			case "delete-waitlist-entry":
				endpoint = c.DeleteWaitlistEntry()
				data, err = waitlistc.BuildDeleteWaitlistEntryPayload(*waitlistDeleteWaitlistEntryBodyFlag, *waitlistDeleteWaitlistEntryUsernameFlag, *waitlistDeleteWaitlistEntryPasswordFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// commonUsage displays the usage of the common command and its subcommands.
func commonUsage() {
	fmt.Fprintf(os.Stderr, `Service is the common service interface.
Usage:
    %s [globalflags] common COMMAND [flags]

COMMAND:
    health-check: HealthCheck implements health_check.

Additional help:
    %s common COMMAND --help
`, os.Args[0], os.Args[0])
}
func commonHealthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] common health-check -username STRING -password STRING

HealthCheck implements health_check.
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` common health-check --username "Dolores omnis et labore ea." --password "Atque perspiciatis harum fugiat delectus explicabo."
`, os.Args[0])
}

// bookingUsage displays the usage of the booking command and its subcommands.
func bookingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the booking service interface.
Usage:
    %s [globalflags] booking COMMAND [flags]

COMMAND:
    batch-availability-lookup: BatchAvailabilityLookup implements batch_availability_lookup.
    check-availability: CheckAvailability implements check_availability.
    create-booking: CreateBooking implements create_booking.
    update-booking: UpdateBooking implements update_booking.
    get-booking-status: GetBookingStatus implements get_booking_status.
    list-bookings: ListBookings implements list_bookings.

Additional help:
    %s booking COMMAND --help
`, os.Args[0], os.Args[0])
}
func bookingBatchAvailabilityLookupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking batch-availability-lookup -body JSON -username STRING -password STRING

BatchAvailabilityLookup implements batch_availability_lookup.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking batch-availability-lookup --body '{
      "merchant_id": "Quia voluptates porro nulla praesentium.",
      "slot_time": [
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         },
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         },
         {
            "availability_tag": "Doloribus aliquam rerum sed ea et.",
            "confirmation_mode": "CONFIRMATION_MODE_ASYNCHRONOUS",
            "duration_sec": "Sit aspernatur molestiae.",
            "resource_ids": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Omnis modi error veritatis quia.",
            "start_sec": "Fugiat ut porro ullam qui."
         }
      ]
   }' --username "Enim ut optio vero corporis quam veniam." --password "Nesciunt occaecati maxime perspiciatis."
`, os.Args[0])
}

func bookingCheckAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking check-availability -body JSON -username STRING -password STRING

CheckAvailability implements check_availability.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking check-availability --body '{
      "slot": {
         "availability_tag": "Aliquid reiciendis expedita consectetur at nulla.",
         "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
         "duration_sec": "Rerum rerum excepturi ea accusamus.",
         "merchant_id": "Sequi esse.",
         "resources": {
            "party_size": 32244509,
            "room_id": "Quidem omnis consectetur voluptatibus.",
            "staff_id": "Provident qui omnis reiciendis qui."
         },
         "service_id": "Officia nihil at mollitia.",
         "start_sec": "Possimus in nostrum quae."
      }
   }' --username "Tenetur exercitationem non." --password "Aut sit quae consequatur perferendis iusto ea."
`, os.Args[0])
}

func bookingCreateBookingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking create-booking -body JSON -username STRING -password STRING

CreateBooking implements create_booking.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking create-booking --body '{
      "additional_request": "Quia asperiores quos rerum.",
      "deal_id": "Nemo a quidem ut consequatur.",
      "idempotency_token": "Natus recusandae delectus pariatur.",
      "lease_ref": {
         "lease_id": "Expedita eius sequi autem unde laudantium aspernatur."
      },
      "offer_id": "Assumenda qui aut quia necessitatibus sit.",
      "payment_information": {
         "deposit": {
            "deposit": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "deposit_type": "PER_PERSON",
            "min_advance_cancellation_sec": "Facilis sint velit."
         },
         "fees": {
            "currency_code": "Dolore omnis est architecto.",
            "price_micros": 941384116037444211,
            "pricing_option_tag": "Est quis."
         },
         "fees_and_taxes": {
            "currency_code": "Dolore omnis est architecto.",
            "price_micros": 941384116037444211,
            "pricing_option_tag": "Est quis."
         },
         "fraud_signals": "Et corrupti sed suscipit qui maiores maiores.",
         "md_merchant_data": "Delectus reiciendis voluptatem odio quibusdam.",
         "no_show_fee": {
            "fee": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "fee_type": "PER_PERSON"
         },
         "pa_response": "Delectus maiores.",
         "payment_option_id": "Nobis facilis vel.",
         "payment_processed_by": "PROCESSED_BY_PARTNER",
         "payment_transaction_id": "Adipisci quibusdam.",
         "prepayment_status": "PREPAYMENT_CREDITED",
         "price": {
            "currency_code": "Dolore omnis est architecto.",
            "price_micros": 941384116037444211,
            "pricing_option_tag": "Est quis."
         },
         "tax_amount": {
            "currency_code": "Dolore omnis est architecto.",
            "price_micros": 941384116037444211,
            "pricing_option_tag": "Est quis."
         },
         "user_payment_option_id": "Maxime officia voluptatem."
      },
      "payment_processing_parameters": {
         "payment_method_token": "Et a quia odio.",
         "payment_processor": "Animi unde nobis aliquid rem.",
         "processor": "PROCESSOR_BRAINTREE",
         "tokenization_config": {
            "allowed_auth_methods": [
               "CRYPTOGRAM_3DS",
               "AUTH_METHOD_UNSPECIFIED"
            ],
            "billing_information_format": "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
            "card_network_parameters": [
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               },
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               },
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               }
            ],
            "merchant_of_record_name": "Voluptatem rerum ex.",
            "payment_country_code": "Est et.",
            "tokenization_parameter": {
               "Aut quibusdam delectus assumenda.": "Ut deleniti minima.",
               "Eaque qui a repudiandae.": "Facilis voluptatem dolorem.",
               "Neque dolor.": "Enim architecto error odio a."
            }
         },
         "unparsed_payment_method_token": "Modi iure.",
         "version": "Reprehenderit ipsum expedita."
      },
      "slot": {
         "availability_tag": "Aliquid reiciendis expedita consectetur at nulla.",
         "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
         "duration_sec": "Rerum rerum excepturi ea accusamus.",
         "merchant_id": "Sequi esse.",
         "resources": {
            "party_size": 32244509,
            "room_id": "Quidem omnis consectetur voluptatibus.",
            "staff_id": "Provident qui omnis reiciendis qui."
         },
         "service_id": "Officia nihil at mollitia.",
         "start_sec": "Possimus in nostrum quae."
      },
      "user_information": {
         "address": {
            "country": "Inventore dolor ab omnis.",
            "locality": "Qui blanditiis molestias cum qui eius.",
            "postal_code": "Sed quasi asperiores sed eum officia.",
            "region": "Quo nihil quaerat et totam sit.",
            "street_address": "Quia consectetur veritatis vel suscipit recusandae quasi."
         },
         "email": "Officiis sunt praesentium molestias excepturi.",
         "family_name": "Error perspiciatis.",
         "given_name": "Excepturi quisquam necessitatibus dolorem.",
         "language_code": "Voluptatem consectetur at repellat quo.",
         "telephone": "Maiores laborum porro.",
         "user_id": "Eaque aut."
      }
   }' --username "Et at autem sit." --password "Reiciendis accusamus possimus eaque necessitatibus odio ut."
`, os.Args[0])
}

func bookingUpdateBookingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking update-booking -body JSON -username STRING -password STRING

UpdateBooking implements update_booking.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking update-booking --body '{
      "booking": {
         "booking_id": "Debitis nulla tenetur ut ut.",
         "offer_info": {
            "offer_id": "Cum voluptatibus omnis expedita."
         },
         "payment_information": {
            "deposit": {
               "deposit": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "deposit_type": "PER_PERSON",
               "min_advance_cancellation_sec": "Facilis sint velit."
            },
            "fees": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "fees_and_taxes": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "fraud_signals": "Et corrupti sed suscipit qui maiores maiores.",
            "md_merchant_data": "Delectus reiciendis voluptatem odio quibusdam.",
            "no_show_fee": {
               "fee": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "fee_type": "PER_PERSON"
            },
            "pa_response": "Delectus maiores.",
            "payment_option_id": "Nobis facilis vel.",
            "payment_processed_by": "PROCESSED_BY_PARTNER",
            "payment_transaction_id": "Adipisci quibusdam.",
            "prepayment_status": "PREPAYMENT_CREDITED",
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "tax_amount": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "user_payment_option_id": "Maxime officia voluptatem."
         },
         "slot": {
            "availability_tag": "Aliquid reiciendis expedita consectetur at nulla.",
            "confirmation_mode": "CONFIRMATION_MODE_SYNCHRONOUS",
            "duration_sec": "Rerum rerum excepturi ea accusamus.",
            "merchant_id": "Sequi esse.",
            "resources": {
               "party_size": 32244509,
               "room_id": "Quidem omnis consectetur voluptatibus.",
               "staff_id": "Provident qui omnis reiciendis qui."
            },
            "service_id": "Officia nihil at mollitia.",
            "start_sec": "Possimus in nostrum quae."
         },
         "status": "CONFIRMED",
         "user_information": {
            "address": {
               "country": "Inventore dolor ab omnis.",
               "locality": "Qui blanditiis molestias cum qui eius.",
               "postal_code": "Sed quasi asperiores sed eum officia.",
               "region": "Quo nihil quaerat et totam sit.",
               "street_address": "Quia consectetur veritatis vel suscipit recusandae quasi."
            },
            "email": "Officiis sunt praesentium molestias excepturi.",
            "family_name": "Error perspiciatis.",
            "given_name": "Excepturi quisquam necessitatibus dolorem.",
            "language_code": "Voluptatem consectetur at repellat quo.",
            "telephone": "Maiores laborum porro.",
            "user_id": "Eaque aut."
         },
         "virtual_session_info": {
            "meeting_id": "Voluptatem dolore repudiandae qui et ullam necessitatibus.",
            "password": "Eum mollitia eveniet.",
            "session_url": "Iste voluptatum."
         }
      }
   }' --username "Ea fuga." --password "Quo at harum cupiditate officia."
`, os.Args[0])
}

func bookingGetBookingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking get-booking-status -body JSON -username STRING -password STRING

GetBookingStatus implements get_booking_status.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking get-booking-status --body '{
      "booking_id": "Est placeat vel doloribus facilis necessitatibus ut."
   }' --username "Vel laborum." --password "Temporibus nisi."
`, os.Args[0])
}

func bookingListBookingsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] booking list-bookings -body JSON -username STRING -password STRING

ListBookings implements list_bookings.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` booking list-bookings --body '{
      "user_id": "Tenetur at distinctio magnam mollitia sit."
   }' --username "Doloribus quia provident." --password "Deleniti nobis impedit numquam molestiae facere ut."
`, os.Args[0])
}

// orderUsage displays the usage of the order command and its subcommands.
func orderUsage() {
	fmt.Fprintf(os.Stderr, `Service is the order service interface.
Usage:
    %s [globalflags] order COMMAND [flags]

COMMAND:
    check-order-fulfillability: CheckOrderFulfillability implements check_order_fulfillability.
    create-order: CreateOrder implements create_order.
    list-orders: ListOrders implements list_orders.

Additional help:
    %s order COMMAND --help
`, os.Args[0], os.Args[0])
}
func orderCheckOrderFulfillabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order check-order-fulfillability -body JSON -username STRING -password STRING

CheckOrderFulfillability implements check_order_fulfillability.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order check-order-fulfillability --body '{
      "cart_id": "Molestias est minima eum porro sunt earum.",
      "item": [
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         },
         {
            "duration_sec": "Eos atque illo voluptas et.",
            "intake_form_answers": {
               "answer": [
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  },
                  {
                     "id": "Consequuntur incidunt maiores.",
                     "response": [
                        "Dicta ipsam.",
                        "Et dolorem sit maiores.",
                        "Exercitationem in voluptatem aspernatur iure."
                     ]
                  }
               ]
            },
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "service_id": "Aut rem ut.",
            "start_sec": "Sed neque omnis quia praesentium dolor.",
            "status": "CONFIRMED",
            "tickets": [
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               },
               {
                  "count": 2034419787,
                  "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
               }
            ],
            "warning_reason": "UNSPECIFIED_WARNING_REASON"
         }
      ],
      "merchant_id": "Commodi vel placeat est debitis odit dicta."
   }' --username "Minima architecto vel eaque tempore porro porro." --password "Et impedit necessitatibus velit consequuntur."
`, os.Args[0])
}

func orderCreateOrderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order create-order -body JSON -username STRING -password STRING

CreateOrder implements create_order.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order create-order --body '{
      "idempotency_token": "Dolorem facere et.",
      "order": {
         "item": [
            {
               "duration_sec": "Eos atque illo voluptas et.",
               "intake_form_answers": {
                  "answer": [
                     {
                        "id": "Consequuntur incidunt maiores.",
                        "response": [
                           "Dicta ipsam.",
                           "Et dolorem sit maiores.",
                           "Exercitationem in voluptatem aspernatur iure."
                        ]
                     },
                     {
                        "id": "Consequuntur incidunt maiores.",
                        "response": [
                           "Dicta ipsam.",
                           "Et dolorem sit maiores.",
                           "Exercitationem in voluptatem aspernatur iure."
                        ]
                     }
                  ]
               },
               "price": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "service_id": "Aut rem ut.",
               "start_sec": "Sed neque omnis quia praesentium dolor.",
               "status": "CONFIRMED",
               "tickets": [
                  {
                     "count": 2034419787,
                     "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
                  },
                  {
                     "count": 2034419787,
                     "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
                  }
               ],
               "warning_reason": "UNSPECIFIED_WARNING_REASON"
            },
            {
               "duration_sec": "Eos atque illo voluptas et.",
               "intake_form_answers": {
                  "answer": [
                     {
                        "id": "Consequuntur incidunt maiores.",
                        "response": [
                           "Dicta ipsam.",
                           "Et dolorem sit maiores.",
                           "Exercitationem in voluptatem aspernatur iure."
                        ]
                     },
                     {
                        "id": "Consequuntur incidunt maiores.",
                        "response": [
                           "Dicta ipsam.",
                           "Et dolorem sit maiores.",
                           "Exercitationem in voluptatem aspernatur iure."
                        ]
                     }
                  ]
               },
               "price": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "service_id": "Aut rem ut.",
               "start_sec": "Sed neque omnis quia praesentium dolor.",
               "status": "CONFIRMED",
               "tickets": [
                  {
                     "count": 2034419787,
                     "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
                  },
                  {
                     "count": 2034419787,
                     "ticket_id": "Voluptas ex voluptatem molestias veritatis laboriosam qui."
                  }
               ],
               "warning_reason": "UNSPECIFIED_WARNING_REASON"
            }
         ],
         "merchant_id": "Impedit voluptatem suscipit incidunt dolore.",
         "order_id": "Quo soluta adipisci error omnis.",
         "payment_information": {
            "deposit": {
               "deposit": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "deposit_type": "PER_PERSON",
               "min_advance_cancellation_sec": "Facilis sint velit."
            },
            "fees": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "fees_and_taxes": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "fraud_signals": "Et corrupti sed suscipit qui maiores maiores.",
            "md_merchant_data": "Delectus reiciendis voluptatem odio quibusdam.",
            "no_show_fee": {
               "fee": {
                  "currency_code": "Dolore omnis est architecto.",
                  "price_micros": 941384116037444211,
                  "pricing_option_tag": "Est quis."
               },
               "fee_type": "PER_PERSON"
            },
            "pa_response": "Delectus maiores.",
            "payment_option_id": "Nobis facilis vel.",
            "payment_processed_by": "PROCESSED_BY_PARTNER",
            "payment_transaction_id": "Adipisci quibusdam.",
            "prepayment_status": "PREPAYMENT_CREDITED",
            "price": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "tax_amount": {
               "currency_code": "Dolore omnis est architecto.",
               "price_micros": 941384116037444211,
               "pricing_option_tag": "Est quis."
            },
            "user_payment_option_id": "Maxime officia voluptatem."
         },
         "user_information": {
            "address": {
               "country": "Inventore dolor ab omnis.",
               "locality": "Qui blanditiis molestias cum qui eius.",
               "postal_code": "Sed quasi asperiores sed eum officia.",
               "region": "Quo nihil quaerat et totam sit.",
               "street_address": "Quia consectetur veritatis vel suscipit recusandae quasi."
            },
            "email": "Officiis sunt praesentium molestias excepturi.",
            "family_name": "Error perspiciatis.",
            "given_name": "Excepturi quisquam necessitatibus dolorem.",
            "language_code": "Voluptatem consectetur at repellat quo.",
            "telephone": "Maiores laborum porro.",
            "user_id": "Eaque aut."
         }
      },
      "payment_processing_parameters": {
         "payment_method_token": "Et a quia odio.",
         "payment_processor": "Animi unde nobis aliquid rem.",
         "processor": "PROCESSOR_BRAINTREE",
         "tokenization_config": {
            "allowed_auth_methods": [
               "CRYPTOGRAM_3DS",
               "AUTH_METHOD_UNSPECIFIED"
            ],
            "billing_information_format": "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
            "card_network_parameters": [
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               },
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               },
               {
                  "acquirer_bin": "Non eius commodi iure optio.",
                  "acquirer_merchant_id": "Laboriosam expedita iusto qui sint minus rerum.",
                  "card_network": "MASTERCARD"
               }
            ],
            "merchant_of_record_name": "Voluptatem rerum ex.",
            "payment_country_code": "Est et.",
            "tokenization_parameter": {
               "Aut quibusdam delectus assumenda.": "Ut deleniti minima.",
               "Eaque qui a repudiandae.": "Facilis voluptatem dolorem.",
               "Neque dolor.": "Enim architecto error odio a."
            }
         },
         "unparsed_payment_method_token": "Modi iure.",
         "version": "Reprehenderit ipsum expedita."
      }
   }' --username "Voluptates ea ipsum." --password "Labore qui provident quibusdam architecto doloremque et."
`, os.Args[0])
}

func orderListOrdersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] order list-orders -body JSON -username STRING -password STRING

ListOrders implements list_orders.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` order list-orders --body '{
      "order_ids": {
         "order_id": [
            "Earum ab est nam.",
            "Qui odio molestias aut corrupti illum.",
            "Unde molestias.",
            "Qui voluptatem et sed natus unde."
         ]
      },
      "user_id": "Dolores quae."
   }' --username "Totam ut reprehenderit." --password "Et accusantium perspiciatis."
`, os.Args[0])
}

// waitlistUsage displays the usage of the waitlist command and its subcommands.
func waitlistUsage() {
	fmt.Fprintf(os.Stderr, `Service is the waitlist service interface.
Usage:
    %s [globalflags] waitlist COMMAND [flags]

COMMAND:
    batch-get-wait-estimates: BatchGetWaitEstimates implements batch_get_wait_estimates.
    create-waitlist-entry: CreateWaitlistEntry implements create_waitlist_entry.
    get-waitlist-entry: GetWaitlistEntry implements get_waitlist_entry.
    delete-waitlist-entry: DeleteWaitlistEntry implements delete_waitlist_entry.

Additional help:
    %s waitlist COMMAND --help
`, os.Args[0], os.Args[0])
}
func waitlistBatchGetWaitEstimatesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist batch-get-wait-estimates -body JSON -username STRING -password STRING

BatchGetWaitEstimates implements batch_get_wait_estimates.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist batch-get-wait-estimates --body '{
      "merchant_id": "Sint ea officia labore.",
      "party_size": [
         1456607358,
         1218899136,
         1607272068
      ],
      "service_id": "Ut eaque aut qui in incidunt vel."
   }' --username "Impedit et repellat." --password "In sed ut quo."
`, os.Args[0])
}

func waitlistCreateWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist create-waitlist-entry -body JSON -username STRING -password STRING

CreateWaitlistEntry implements create_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist create-waitlist-entry --body '{
      "additional_request": "Est earum officia sed ex praesentium ullam.",
      "idempotency_token": "Voluptate minus.",
      "merchant_id": "Impedit impedit aut.",
      "party_size": 305471617,
      "service_id": "Autem debitis.",
      "user_information": {
         "address": {
            "country": "Inventore dolor ab omnis.",
            "locality": "Qui blanditiis molestias cum qui eius.",
            "postal_code": "Sed quasi asperiores sed eum officia.",
            "region": "Quo nihil quaerat et totam sit.",
            "street_address": "Quia consectetur veritatis vel suscipit recusandae quasi."
         },
         "email": "Officiis sunt praesentium molestias excepturi.",
         "family_name": "Error perspiciatis.",
         "given_name": "Excepturi quisquam necessitatibus dolorem.",
         "language_code": "Voluptatem consectetur at repellat quo.",
         "telephone": "Maiores laborum porro.",
         "user_id": "Eaque aut."
      }
   }' --username "Possimus praesentium accusamus quod corporis." --password "Aut asperiores necessitatibus aut repudiandae nesciunt."
`, os.Args[0])
}

func waitlistGetWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist get-waitlist-entry -body JSON -username STRING -password STRING

GetWaitlistEntry implements get_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist get-waitlist-entry --body '{
      "waitlist_entry_id": "Sit aut blanditiis temporibus illum reprehenderit qui."
   }' --username "Quos mollitia delectus unde debitis exercitationem." --password "Excepturi enim nihil placeat quia sit magni."
`, os.Args[0])
}

func waitlistDeleteWaitlistEntryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] waitlist delete-waitlist-entry -body JSON -username STRING -password STRING

DeleteWaitlistEntry implements delete_waitlist_entry.
    -body JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` waitlist delete-waitlist-entry --body '{
      "waitlist_entry_id": "Aut dolor impedit."
   }' --username "Consequuntur consequatur aut doloribus." --password "Consectetur dolor et occaecati omnis et."
`, os.Args[0])
}
