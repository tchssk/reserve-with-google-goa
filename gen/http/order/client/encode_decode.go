// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	order "github.com/tchssk/reserve-with-google-goa/gen/order"
	goahttp "goa.design/goa/v3/http"
)

// BuildCheckOrderFulfillabilityRequest instantiates a HTTP request object with
// method and path set to call the "order" service "check_order_fulfillability"
// endpoint
func (c *Client) BuildCheckOrderFulfillabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckOrderFulfillabilityOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "check_order_fulfillability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCheckOrderFulfillabilityRequest returns an encoder for requests sent
// to the order check_order_fulfillability server.
func EncodeCheckOrderFulfillabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.CheckOrderFulfillabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "check_order_fulfillability", "*order.CheckOrderFulfillabilityPayload", v)
		}
		body := NewCheckOrderFulfillabilityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "check_order_fulfillability", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeCheckOrderFulfillabilityResponse returns a decoder for responses
// returned by the order check_order_fulfillability endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeCheckOrderFulfillabilityResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeCheckOrderFulfillabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CheckOrderFulfillabilityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			res := NewCheckOrderFulfillabilityResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CheckOrderFulfillabilityBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CheckOrderFulfillabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CheckOrderFulfillabilityForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityForbidden(&body)
		case http.StatusNotFound:
			var (
				body CheckOrderFulfillabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityNotFound(&body)
		case http.StatusConflict:
			var (
				body CheckOrderFulfillabilityConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body CheckOrderFulfillabilityTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityTooManyRequests(&body)
		case 499:
			var (
				body CheckOrderFulfillabilityClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CheckOrderFulfillabilityInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body CheckOrderFulfillabilityNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body CheckOrderFulfillabilityServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body CheckOrderFulfillabilityGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "check_order_fulfillability", err)
			}
			err = ValidateCheckOrderFulfillabilityGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "check_order_fulfillability", err)
			}
			return nil, NewCheckOrderFulfillabilityGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "check_order_fulfillability", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateOrderRequest instantiates a HTTP request object with method and
// path set to call the "order" service "create_order" endpoint
func (c *Client) BuildCreateOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOrderOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "create_order", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateOrderRequest returns an encoder for requests sent to the order
// create_order server.
func EncodeCreateOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.CreateOrderPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "create_order", "*order.CreateOrderPayload", v)
		}
		body := NewCreateOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "create_order", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeCreateOrderResponse returns a decoder for responses returned by the
// order create_order endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateOrderResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeCreateOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			res := NewCreateOrderResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateOrderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CreateOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateOrderForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderForbidden(&body)
		case http.StatusNotFound:
			var (
				body CreateOrderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderNotFound(&body)
		case http.StatusConflict:
			var (
				body CreateOrderConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body CreateOrderTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderTooManyRequests(&body)
		case 499:
			var (
				body CreateOrderClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateOrderInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body CreateOrderNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateOrderServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body CreateOrderGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "create_order", err)
			}
			err = ValidateCreateOrderGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "create_order", err)
			}
			return nil, NewCreateOrderGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "create_order", resp.StatusCode, string(body))
		}
	}
}

// BuildListOrdersRequest instantiates a HTTP request object with method and
// path set to call the "order" service "list_orders" endpoint
func (c *Client) BuildListOrdersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListOrdersOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "list_orders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListOrdersRequest returns an encoder for requests sent to the order
// list_orders server.
func EncodeListOrdersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*order.ListOrdersPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "list_orders", "*order.ListOrdersPayload", v)
		}
		body := NewListOrdersRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "list_orders", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeListOrdersResponse returns a decoder for responses returned by the
// order list_orders endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListOrdersResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeListOrdersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListOrdersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			res := NewListOrdersResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListOrdersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body ListOrdersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListOrdersForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListOrdersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersNotFound(&body)
		case http.StatusConflict:
			var (
				body ListOrdersConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body ListOrdersTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersTooManyRequests(&body)
		case 499:
			var (
				body ListOrdersClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ListOrdersInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body ListOrdersNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body ListOrdersServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body ListOrdersGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "list_orders", err)
			}
			err = ValidateListOrdersGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("order", "list_orders", err)
			}
			return nil, NewListOrdersGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "list_orders", resp.StatusCode, string(body))
		}
	}
}

// marshalOrderLineItemToLineItemRequestBodyRequestBody builds a value of type
// *LineItemRequestBodyRequestBody from a value of type *order.LineItem.
func marshalOrderLineItemToLineItemRequestBodyRequestBody(v *order.LineItem) *LineItemRequestBodyRequestBody {
	res := &LineItemRequestBodyRequestBody{
		ServiceID:     v.ServiceID,
		StartSec:      v.StartSec,
		DurationSec:   v.DurationSec,
		Status:        v.Status,
		WarningReason: v.WarningReason,
	}
	if v.Tickets != nil {
		res.Tickets = make([]*OrderedTicketsRequestBodyRequestBody, len(v.Tickets))
		for i, val := range v.Tickets {
			res.Tickets[i] = marshalOrderOrderedTicketsToOrderedTicketsRequestBodyRequestBody(val)
		}
	}
	if v.Price != nil {
		res.Price = marshalOrderPriceToPriceRequestBodyRequestBody(v.Price)
	}
	if v.IntakeFormAnswers != nil {
		res.IntakeFormAnswers = marshalOrderIntakeFormAnswersToIntakeFormAnswersRequestBodyRequestBody(v.IntakeFormAnswers)
	}

	return res
}

// marshalOrderOrderedTicketsToOrderedTicketsRequestBodyRequestBody builds a
// value of type *OrderedTicketsRequestBodyRequestBody from a value of type
// *order.OrderedTickets.
func marshalOrderOrderedTicketsToOrderedTicketsRequestBodyRequestBody(v *order.OrderedTickets) *OrderedTicketsRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &OrderedTicketsRequestBodyRequestBody{
		TicketID: v.TicketID,
		Count:    v.Count,
	}

	return res
}

// marshalOrderPriceToPriceRequestBodyRequestBody builds a value of type
// *PriceRequestBodyRequestBody from a value of type *order.Price.
func marshalOrderPriceToPriceRequestBodyRequestBody(v *order.Price) *PriceRequestBodyRequestBody {
	res := &PriceRequestBodyRequestBody{
		PriceMicros:      v.PriceMicros,
		CurrencyCode:     v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// marshalOrderIntakeFormAnswersToIntakeFormAnswersRequestBodyRequestBody
// builds a value of type *IntakeFormAnswersRequestBodyRequestBody from a value
// of type *order.IntakeFormAnswers.
func marshalOrderIntakeFormAnswersToIntakeFormAnswersRequestBodyRequestBody(v *order.IntakeFormAnswers) *IntakeFormAnswersRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &IntakeFormAnswersRequestBodyRequestBody{}
	if v.Answer != nil {
		res.Answer = make([]*IntakeFormFieldAnswerRequestBodyRequestBody, len(v.Answer))
		for i, val := range v.Answer {
			res.Answer[i] = marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerRequestBodyRequestBody(val)
		}
	}

	return res
}

// marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerRequestBodyRequestBody
// builds a value of type *IntakeFormFieldAnswerRequestBodyRequestBody from a
// value of type *order.IntakeFormFieldAnswer.
func marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerRequestBodyRequestBody(v *order.IntakeFormFieldAnswer) *IntakeFormFieldAnswerRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &IntakeFormFieldAnswerRequestBodyRequestBody{
		ID: v.ID,
	}
	if v.Response != nil {
		res.Response = make([]string, len(v.Response))
		for i, val := range v.Response {
			res.Response[i] = val
		}
	}

	return res
}

// marshalLineItemRequestBodyRequestBodyToOrderLineItem builds a value of type
// *order.LineItem from a value of type *LineItemRequestBodyRequestBody.
func marshalLineItemRequestBodyRequestBodyToOrderLineItem(v *LineItemRequestBodyRequestBody) *order.LineItem {
	res := &order.LineItem{
		ServiceID:     v.ServiceID,
		StartSec:      v.StartSec,
		DurationSec:   v.DurationSec,
		Status:        v.Status,
		WarningReason: v.WarningReason,
	}
	if v.Tickets != nil {
		res.Tickets = make([]*order.OrderedTickets, len(v.Tickets))
		for i, val := range v.Tickets {
			res.Tickets[i] = marshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets(val)
		}
	}
	if v.Price != nil {
		res.Price = marshalPriceRequestBodyRequestBodyToOrderPrice(v.Price)
	}
	if v.IntakeFormAnswers != nil {
		res.IntakeFormAnswers = marshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers(v.IntakeFormAnswers)
	}

	return res
}

// marshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets builds a
// value of type *order.OrderedTickets from a value of type
// *OrderedTicketsRequestBodyRequestBody.
func marshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets(v *OrderedTicketsRequestBodyRequestBody) *order.OrderedTickets {
	if v == nil {
		return nil
	}
	res := &order.OrderedTickets{
		TicketID: v.TicketID,
		Count:    v.Count,
	}

	return res
}

// marshalPriceRequestBodyRequestBodyToOrderPrice builds a value of type
// *order.Price from a value of type *PriceRequestBodyRequestBody.
func marshalPriceRequestBodyRequestBodyToOrderPrice(v *PriceRequestBodyRequestBody) *order.Price {
	res := &order.Price{
		PriceMicros:      v.PriceMicros,
		CurrencyCode:     v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// marshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers
// builds a value of type *order.IntakeFormAnswers from a value of type
// *IntakeFormAnswersRequestBodyRequestBody.
func marshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers(v *IntakeFormAnswersRequestBodyRequestBody) *order.IntakeFormAnswers {
	if v == nil {
		return nil
	}
	res := &order.IntakeFormAnswers{}
	if v.Answer != nil {
		res.Answer = make([]*order.IntakeFormFieldAnswer, len(v.Answer))
		for i, val := range v.Answer {
			res.Answer[i] = marshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer(val)
		}
	}

	return res
}

// marshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer
// builds a value of type *order.IntakeFormFieldAnswer from a value of type
// *IntakeFormFieldAnswerRequestBodyRequestBody.
func marshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer(v *IntakeFormFieldAnswerRequestBodyRequestBody) *order.IntakeFormFieldAnswer {
	if v == nil {
		return nil
	}
	res := &order.IntakeFormFieldAnswer{
		ID: v.ID,
	}
	if v.Response != nil {
		res.Response = make([]string, len(v.Response))
		for i, val := range v.Response {
			res.Response[i] = val
		}
	}

	return res
}

// unmarshalOrderFulfillabilityResponseBodyToOrderOrderFulfillability builds a
// value of type *order.OrderFulfillability from a value of type
// *OrderFulfillabilityResponseBody.
func unmarshalOrderFulfillabilityResponseBodyToOrderOrderFulfillability(v *OrderFulfillabilityResponseBody) *order.OrderFulfillability {
	if v == nil {
		return nil
	}
	res := &order.OrderFulfillability{
		Result:              *v.Result,
		UnfulfillableReason: v.UnfulfillableReason,
	}
	res.ItemFulfillability = make([]*order.LineItemFulfillability, len(v.ItemFulfillability))
	for i, val := range v.ItemFulfillability {
		res.ItemFulfillability[i] = unmarshalLineItemFulfillabilityResponseBodyToOrderLineItemFulfillability(val)
	}

	return res
}

// unmarshalLineItemFulfillabilityResponseBodyToOrderLineItemFulfillability
// builds a value of type *order.LineItemFulfillability from a value of type
// *LineItemFulfillabilityResponseBody.
func unmarshalLineItemFulfillabilityResponseBodyToOrderLineItemFulfillability(v *LineItemFulfillabilityResponseBody) *order.LineItemFulfillability {
	res := &order.LineItemFulfillability{
		Result:              *v.Result,
		UnfulfillableReason: v.UnfulfillableReason,
	}
	res.Item = unmarshalLineItemResponseBodyToOrderLineItem(v.Item)
	if v.Availability != nil {
		res.Availability = unmarshalUpdatedAvailabilityResponseBodyToOrderUpdatedAvailability(v.Availability)
	}
	if v.TicketType != nil {
		res.TicketType = make([]*order.TicketType, len(v.TicketType))
		for i, val := range v.TicketType {
			res.TicketType[i] = unmarshalTicketTypeResponseBodyToOrderTicketType(val)
		}
	}
	if v.ViolatedTicketConstraint != nil {
		res.ViolatedTicketConstraint = make([]*order.ViolatedTicketConstraint, len(v.ViolatedTicketConstraint))
		for i, val := range v.ViolatedTicketConstraint {
			res.ViolatedTicketConstraint[i] = unmarshalViolatedTicketConstraintResponseBodyToOrderViolatedTicketConstraint(val)
		}
	}

	return res
}

// unmarshalLineItemResponseBodyToOrderLineItem builds a value of type
// *order.LineItem from a value of type *LineItemResponseBody.
func unmarshalLineItemResponseBodyToOrderLineItem(v *LineItemResponseBody) *order.LineItem {
	res := &order.LineItem{
		ServiceID:     *v.ServiceID,
		StartSec:      *v.StartSec,
		DurationSec:   *v.DurationSec,
		Status:        v.Status,
		WarningReason: v.WarningReason,
	}
	if v.Tickets != nil {
		res.Tickets = make([]*order.OrderedTickets, len(v.Tickets))
		for i, val := range v.Tickets {
			res.Tickets[i] = unmarshalOrderedTicketsResponseBodyToOrderOrderedTickets(val)
		}
	}
	res.Price = unmarshalPriceResponseBodyToOrderPrice(v.Price)
	if v.IntakeFormAnswers != nil {
		res.IntakeFormAnswers = unmarshalIntakeFormAnswersResponseBodyToOrderIntakeFormAnswers(v.IntakeFormAnswers)
	}

	return res
}

// unmarshalOrderedTicketsResponseBodyToOrderOrderedTickets builds a value of
// type *order.OrderedTickets from a value of type *OrderedTicketsResponseBody.
func unmarshalOrderedTicketsResponseBodyToOrderOrderedTickets(v *OrderedTicketsResponseBody) *order.OrderedTickets {
	if v == nil {
		return nil
	}
	res := &order.OrderedTickets{
		TicketID: *v.TicketID,
		Count:    *v.Count,
	}

	return res
}

// unmarshalPriceResponseBodyToOrderPrice builds a value of type *order.Price
// from a value of type *PriceResponseBody.
func unmarshalPriceResponseBodyToOrderPrice(v *PriceResponseBody) *order.Price {
	res := &order.Price{
		PriceMicros:      *v.PriceMicros,
		CurrencyCode:     *v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// unmarshalIntakeFormAnswersResponseBodyToOrderIntakeFormAnswers builds a
// value of type *order.IntakeFormAnswers from a value of type
// *IntakeFormAnswersResponseBody.
func unmarshalIntakeFormAnswersResponseBodyToOrderIntakeFormAnswers(v *IntakeFormAnswersResponseBody) *order.IntakeFormAnswers {
	if v == nil {
		return nil
	}
	res := &order.IntakeFormAnswers{}
	if v.Answer != nil {
		res.Answer = make([]*order.IntakeFormFieldAnswer, len(v.Answer))
		for i, val := range v.Answer {
			res.Answer[i] = unmarshalIntakeFormFieldAnswerResponseBodyToOrderIntakeFormFieldAnswer(val)
		}
	}

	return res
}

// unmarshalIntakeFormFieldAnswerResponseBodyToOrderIntakeFormFieldAnswer
// builds a value of type *order.IntakeFormFieldAnswer from a value of type
// *IntakeFormFieldAnswerResponseBody.
func unmarshalIntakeFormFieldAnswerResponseBodyToOrderIntakeFormFieldAnswer(v *IntakeFormFieldAnswerResponseBody) *order.IntakeFormFieldAnswer {
	if v == nil {
		return nil
	}
	res := &order.IntakeFormFieldAnswer{
		ID: *v.ID,
	}
	res.Response = make([]string, len(v.Response))
	for i, val := range v.Response {
		res.Response[i] = val
	}

	return res
}

// unmarshalUpdatedAvailabilityResponseBodyToOrderUpdatedAvailability builds a
// value of type *order.UpdatedAvailability from a value of type
// *UpdatedAvailabilityResponseBody.
func unmarshalUpdatedAvailabilityResponseBodyToOrderUpdatedAvailability(v *UpdatedAvailabilityResponseBody) *order.UpdatedAvailability {
	if v == nil {
		return nil
	}
	res := &order.UpdatedAvailability{
		SpotsOpen: *v.SpotsOpen,
	}

	return res
}

// unmarshalTicketTypeResponseBodyToOrderTicketType builds a value of type
// *order.TicketType from a value of type *TicketTypeResponseBody.
func unmarshalTicketTypeResponseBodyToOrderTicketType(v *TicketTypeResponseBody) *order.TicketType {
	if v == nil {
		return nil
	}
	res := &order.TicketType{
		TicketTypeID:      *v.TicketTypeID,
		ShortDescription:  *v.ShortDescription,
		OptionDescription: *v.OptionDescription,
	}
	res.LocalizedShortDescription = unmarshalTextResponseBodyToOrderText(v.LocalizedShortDescription)
	res.Price = unmarshalPriceResponseBodyToOrderPrice(v.Price)
	if v.PerTicketFee != nil {
		res.PerTicketFee = unmarshalPerTicketFeeResponseBodyToOrderPerTicketFee(v.PerTicketFee)
	}
	if v.LocalizedOptionDescription != nil {
		res.LocalizedOptionDescription = unmarshalTextResponseBodyToOrderText(v.LocalizedOptionDescription)
	}

	return res
}

// unmarshalTextResponseBodyToOrderText builds a value of type *order.Text from
// a value of type *TextResponseBody.
func unmarshalTextResponseBodyToOrderText(v *TextResponseBody) *order.Text {
	res := &order.Text{
		Value: v.Value,
	}
	if v.LocalizedValue != nil {
		res.LocalizedValue = make([]*order.LocalizedString, len(v.LocalizedValue))
		for i, val := range v.LocalizedValue {
			res.LocalizedValue[i] = unmarshalLocalizedStringResponseBodyToOrderLocalizedString(val)
		}
	}

	return res
}

// unmarshalLocalizedStringResponseBodyToOrderLocalizedString builds a value of
// type *order.LocalizedString from a value of type
// *LocalizedStringResponseBody.
func unmarshalLocalizedStringResponseBodyToOrderLocalizedString(v *LocalizedStringResponseBody) *order.LocalizedString {
	if v == nil {
		return nil
	}
	res := &order.LocalizedString{
		Locale: *v.Locale,
		Value:  *v.Value,
	}

	return res
}

// unmarshalPerTicketFeeResponseBodyToOrderPerTicketFee builds a value of type
// *order.PerTicketFee from a value of type *PerTicketFeeResponseBody.
func unmarshalPerTicketFeeResponseBodyToOrderPerTicketFee(v *PerTicketFeeResponseBody) *order.PerTicketFee {
	if v == nil {
		return nil
	}
	res := &order.PerTicketFee{}
	res.ServiceCharge = unmarshalPriceResponseBodyToOrderPrice(v.ServiceCharge)
	res.FacilityFee = unmarshalPriceResponseBodyToOrderPrice(v.FacilityFee)
	res.Taxes = unmarshalPriceResponseBodyToOrderPrice(v.Taxes)

	return res
}

// unmarshalViolatedTicketConstraintResponseBodyToOrderViolatedTicketConstraint
// builds a value of type *order.ViolatedTicketConstraint from a value of type
// *ViolatedTicketConstraintResponseBody.
func unmarshalViolatedTicketConstraintResponseBodyToOrderViolatedTicketConstraint(v *ViolatedTicketConstraintResponseBody) *order.ViolatedTicketConstraint {
	if v == nil {
		return nil
	}
	res := &order.ViolatedTicketConstraint{
		MinTicketCount: *v.MinTicketCount,
		MaxTicketCount: *v.MaxTicketCount,
		TicketID:       *v.TicketID,
	}

	return res
}

// unmarshalFeesResponseBodyToOrderFees builds a value of type *order.Fees from
// a value of type *FeesResponseBody.
func unmarshalFeesResponseBodyToOrderFees(v *FeesResponseBody) *order.Fees {
	if v == nil {
		return nil
	}
	res := &order.Fees{}
	res.PerTicketFee = make([]*order.SpecificPerTicketFee, len(v.PerTicketFee))
	for i, val := range v.PerTicketFee {
		res.PerTicketFee[i] = unmarshalSpecificPerTicketFeeResponseBodyToOrderSpecificPerTicketFee(val)
	}
	res.PerOrderFee = make([]*order.SpecificPerOrderFee, len(v.PerOrderFee))
	for i, val := range v.PerOrderFee {
		res.PerOrderFee[i] = unmarshalSpecificPerOrderFeeResponseBodyToOrderSpecificPerOrderFee(val)
	}

	return res
}

// unmarshalSpecificPerTicketFeeResponseBodyToOrderSpecificPerTicketFee builds
// a value of type *order.SpecificPerTicketFee from a value of type
// *SpecificPerTicketFeeResponseBody.
func unmarshalSpecificPerTicketFeeResponseBodyToOrderSpecificPerTicketFee(v *SpecificPerTicketFeeResponseBody) *order.SpecificPerTicketFee {
	res := &order.SpecificPerTicketFee{
		TicketID:  *v.TicketID,
		ServiceID: *v.ServiceID,
		FeeName:   *v.FeeName,
	}
	res.FeeAmount = unmarshalPriceResponseBodyToOrderPrice(v.FeeAmount)

	return res
}

// unmarshalSpecificPerOrderFeeResponseBodyToOrderSpecificPerOrderFee builds a
// value of type *order.SpecificPerOrderFee from a value of type
// *SpecificPerOrderFeeResponseBody.
func unmarshalSpecificPerOrderFeeResponseBodyToOrderSpecificPerOrderFee(v *SpecificPerOrderFeeResponseBody) *order.SpecificPerOrderFee {
	res := &order.SpecificPerOrderFee{
		FeeName: *v.FeeName,
	}
	res.FeeAmount = unmarshalPriceResponseBodyToOrderPrice(v.FeeAmount)

	return res
}

// marshalOrderOrderToOrderRequestBodyRequestBody builds a value of type
// *OrderRequestBodyRequestBody from a value of type *order.Order.
func marshalOrderOrderToOrderRequestBodyRequestBody(v *order.Order) *OrderRequestBodyRequestBody {
	res := &OrderRequestBodyRequestBody{
		OrderID:    v.OrderID,
		MerchantID: v.MerchantID,
	}
	if v.UserInformation != nil {
		res.UserInformation = marshalOrderUserInformationToUserInformationRequestBodyRequestBody(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = marshalOrderPaymentInformationToPaymentInformationRequestBodyRequestBody(v.PaymentInformation)
	}
	if v.Item != nil {
		res.Item = make([]*LineItemRequestBodyRequestBody, len(v.Item))
		for i, val := range v.Item {
			res.Item[i] = marshalOrderLineItemToLineItemRequestBodyRequestBody(val)
		}
	}

	return res
}

// marshalOrderUserInformationToUserInformationRequestBodyRequestBody builds a
// value of type *UserInformationRequestBodyRequestBody from a value of type
// *order.UserInformation.
func marshalOrderUserInformationToUserInformationRequestBodyRequestBody(v *order.UserInformation) *UserInformationRequestBodyRequestBody {
	res := &UserInformationRequestBodyRequestBody{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalOrderPostalAddressToPostalAddressRequestBodyRequestBody(v.Address)
	}

	return res
}

// marshalOrderPostalAddressToPostalAddressRequestBodyRequestBody builds a
// value of type *PostalAddressRequestBodyRequestBody from a value of type
// *order.PostalAddress.
func marshalOrderPostalAddressToPostalAddressRequestBodyRequestBody(v *order.PostalAddress) *PostalAddressRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PostalAddressRequestBodyRequestBody{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalOrderPaymentInformationToPaymentInformationRequestBodyRequestBody
// builds a value of type *PaymentInformationRequestBodyRequestBody from a
// value of type *order.PaymentInformation.
func marshalOrderPaymentInformationToPaymentInformationRequestBodyRequestBody(v *order.PaymentInformation) *PaymentInformationRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PaymentInformationRequestBodyRequestBody{
		PrepaymentStatus:     v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	if v.Price != nil {
		res.Price = marshalOrderPriceToPriceRequestBodyRequestBody(v.Price)
	}
	if v.TaxAmount != nil {
		res.TaxAmount = marshalOrderPriceToPriceRequestBodyRequestBody(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = marshalOrderPriceToPriceRequestBodyRequestBody(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = marshalOrderPriceToPriceRequestBodyRequestBody(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = marshalOrderDepositToDepositRequestBodyRequestBody(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = marshalOrderNoShowFeeToNoShowFeeRequestBodyRequestBody(v.NoShowFee)
	}

	return res
}

// marshalOrderDepositToDepositRequestBodyRequestBody builds a value of type
// *DepositRequestBodyRequestBody from a value of type *order.Deposit.
func marshalOrderDepositToDepositRequestBodyRequestBody(v *order.Deposit) *DepositRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &DepositRequestBodyRequestBody{
		MinAdvanceCancellationSec: v.MinAdvanceCancellationSec,
		DepositType:               v.DepositType,
	}
	if v.Deposit != nil {
		res.Deposit = marshalOrderPriceToPriceRequestBodyRequestBody(v.Deposit)
	}

	return res
}

// marshalOrderNoShowFeeToNoShowFeeRequestBodyRequestBody builds a value of
// type *NoShowFeeRequestBodyRequestBody from a value of type *order.NoShowFee.
func marshalOrderNoShowFeeToNoShowFeeRequestBodyRequestBody(v *order.NoShowFee) *NoShowFeeRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &NoShowFeeRequestBodyRequestBody{
		FeeType: v.FeeType,
	}
	if v.Fee != nil {
		res.Fee = marshalOrderPriceToPriceRequestBodyRequestBody(v.Fee)
	}

	return res
}

// marshalOrderPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody
// builds a value of type *PaymentProcessingParametersRequestBodyRequestBody
// from a value of type *order.PaymentProcessingParameters.
func marshalOrderPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody(v *order.PaymentProcessingParameters) *PaymentProcessingParametersRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &PaymentProcessingParametersRequestBodyRequestBody{
		Processor:                  v.Processor,
		PaymentMethodToken:         v.PaymentMethodToken,
		UnparsedPaymentMethodToken: v.UnparsedPaymentMethodToken,
		Version:                    v.Version,
		PaymentProcessor:           v.PaymentProcessor,
	}
	if v.TokenizationConfig != nil {
		res.TokenizationConfig = marshalOrderTokenizationConfigToTokenizationConfigRequestBodyRequestBody(v.TokenizationConfig)
	}

	return res
}

// marshalOrderTokenizationConfigToTokenizationConfigRequestBodyRequestBody
// builds a value of type *TokenizationConfigRequestBodyRequestBody from a
// value of type *order.TokenizationConfig.
func marshalOrderTokenizationConfigToTokenizationConfigRequestBodyRequestBody(v *order.TokenizationConfig) *TokenizationConfigRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &TokenizationConfigRequestBodyRequestBody{
		BillingInformationFormat: v.BillingInformationFormat,
		MerchantOfRecordName:     v.MerchantOfRecordName,
		PaymentCountryCode:       v.PaymentCountryCode,
	}
	if v.TokenizationParameter != nil {
		res.TokenizationParameter = make(map[string]string, len(v.TokenizationParameter))
		for key, val := range v.TokenizationParameter {
			tk := key
			tv := val
			res.TokenizationParameter[tk] = tv
		}
	}
	if v.CardNetworkParameters != nil {
		res.CardNetworkParameters = make([]*CardNetworkParametersRequestBodyRequestBody, len(v.CardNetworkParameters))
		for i, val := range v.CardNetworkParameters {
			res.CardNetworkParameters[i] = marshalOrderCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody(val)
		}
	}
	if v.AllowedAuthMethods != nil {
		res.AllowedAuthMethods = make([]string, len(v.AllowedAuthMethods))
		for i, val := range v.AllowedAuthMethods {
			res.AllowedAuthMethods[i] = val
		}
	}

	return res
}

// marshalOrderCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody
// builds a value of type *CardNetworkParametersRequestBodyRequestBody from a
// value of type *order.CardNetworkParameters.
func marshalOrderCardNetworkParametersToCardNetworkParametersRequestBodyRequestBody(v *order.CardNetworkParameters) *CardNetworkParametersRequestBodyRequestBody {
	res := &CardNetworkParametersRequestBodyRequestBody{
		CardNetwork:        v.CardNetwork,
		AcquirerBin:        v.AcquirerBin,
		AcquirerMerchantID: v.AcquirerMerchantID,
	}

	return res
}

// marshalOrderRequestBodyRequestBodyToOrderOrder builds a value of type
// *order.Order from a value of type *OrderRequestBodyRequestBody.
func marshalOrderRequestBodyRequestBodyToOrderOrder(v *OrderRequestBodyRequestBody) *order.Order {
	res := &order.Order{
		OrderID:    v.OrderID,
		MerchantID: v.MerchantID,
	}
	if v.UserInformation != nil {
		res.UserInformation = marshalUserInformationRequestBodyRequestBodyToOrderUserInformation(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = marshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation(v.PaymentInformation)
	}
	if v.Item != nil {
		res.Item = make([]*order.LineItem, len(v.Item))
		for i, val := range v.Item {
			res.Item[i] = marshalLineItemRequestBodyRequestBodyToOrderLineItem(val)
		}
	}

	return res
}

// marshalUserInformationRequestBodyRequestBodyToOrderUserInformation builds a
// value of type *order.UserInformation from a value of type
// *UserInformationRequestBodyRequestBody.
func marshalUserInformationRequestBodyRequestBodyToOrderUserInformation(v *UserInformationRequestBodyRequestBody) *order.UserInformation {
	res := &order.UserInformation{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress(v.Address)
	}

	return res
}

// marshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress builds a
// value of type *order.PostalAddress from a value of type
// *PostalAddressRequestBodyRequestBody.
func marshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress(v *PostalAddressRequestBodyRequestBody) *order.PostalAddress {
	if v == nil {
		return nil
	}
	res := &order.PostalAddress{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation
// builds a value of type *order.PaymentInformation from a value of type
// *PaymentInformationRequestBodyRequestBody.
func marshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation(v *PaymentInformationRequestBodyRequestBody) *order.PaymentInformation {
	if v == nil {
		return nil
	}
	res := &order.PaymentInformation{
		PrepaymentStatus:     v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	if v.Price != nil {
		res.Price = marshalPriceRequestBodyRequestBodyToOrderPrice(v.Price)
	}
	if v.TaxAmount != nil {
		res.TaxAmount = marshalPriceRequestBodyRequestBodyToOrderPrice(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = marshalPriceRequestBodyRequestBodyToOrderPrice(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = marshalPriceRequestBodyRequestBodyToOrderPrice(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = marshalDepositRequestBodyRequestBodyToOrderDeposit(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = marshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee(v.NoShowFee)
	}

	return res
}

// marshalDepositRequestBodyRequestBodyToOrderDeposit builds a value of type
// *order.Deposit from a value of type *DepositRequestBodyRequestBody.
func marshalDepositRequestBodyRequestBodyToOrderDeposit(v *DepositRequestBodyRequestBody) *order.Deposit {
	if v == nil {
		return nil
	}
	res := &order.Deposit{
		MinAdvanceCancellationSec: v.MinAdvanceCancellationSec,
		DepositType:               v.DepositType,
	}
	if v.Deposit != nil {
		res.Deposit = marshalPriceRequestBodyRequestBodyToOrderPrice(v.Deposit)
	}

	return res
}

// marshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee builds a value of
// type *order.NoShowFee from a value of type *NoShowFeeRequestBodyRequestBody.
func marshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee(v *NoShowFeeRequestBodyRequestBody) *order.NoShowFee {
	if v == nil {
		return nil
	}
	res := &order.NoShowFee{
		FeeType: v.FeeType,
	}
	if v.Fee != nil {
		res.Fee = marshalPriceRequestBodyRequestBodyToOrderPrice(v.Fee)
	}

	return res
}

// marshalPaymentProcessingParametersRequestBodyRequestBodyToOrderPaymentProcessingParameters
// builds a value of type *order.PaymentProcessingParameters from a value of
// type *PaymentProcessingParametersRequestBodyRequestBody.
func marshalPaymentProcessingParametersRequestBodyRequestBodyToOrderPaymentProcessingParameters(v *PaymentProcessingParametersRequestBodyRequestBody) *order.PaymentProcessingParameters {
	if v == nil {
		return nil
	}
	res := &order.PaymentProcessingParameters{
		Processor:                  v.Processor,
		PaymentMethodToken:         v.PaymentMethodToken,
		UnparsedPaymentMethodToken: v.UnparsedPaymentMethodToken,
		Version:                    v.Version,
		PaymentProcessor:           v.PaymentProcessor,
	}
	if v.TokenizationConfig != nil {
		res.TokenizationConfig = marshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig(v.TokenizationConfig)
	}

	return res
}

// marshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig
// builds a value of type *order.TokenizationConfig from a value of type
// *TokenizationConfigRequestBodyRequestBody.
func marshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig(v *TokenizationConfigRequestBodyRequestBody) *order.TokenizationConfig {
	if v == nil {
		return nil
	}
	res := &order.TokenizationConfig{
		BillingInformationFormat: v.BillingInformationFormat,
		MerchantOfRecordName:     v.MerchantOfRecordName,
		PaymentCountryCode:       v.PaymentCountryCode,
	}
	if v.TokenizationParameter != nil {
		res.TokenizationParameter = make(map[string]string, len(v.TokenizationParameter))
		for key, val := range v.TokenizationParameter {
			tk := key
			tv := val
			res.TokenizationParameter[tk] = tv
		}
	}
	if v.CardNetworkParameters != nil {
		res.CardNetworkParameters = make([]*order.CardNetworkParameters, len(v.CardNetworkParameters))
		for i, val := range v.CardNetworkParameters {
			res.CardNetworkParameters[i] = marshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters(val)
		}
	}
	if v.AllowedAuthMethods != nil {
		res.AllowedAuthMethods = make([]string, len(v.AllowedAuthMethods))
		for i, val := range v.AllowedAuthMethods {
			res.AllowedAuthMethods[i] = val
		}
	}

	return res
}

// marshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters
// builds a value of type *order.CardNetworkParameters from a value of type
// *CardNetworkParametersRequestBodyRequestBody.
func marshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters(v *CardNetworkParametersRequestBodyRequestBody) *order.CardNetworkParameters {
	res := &order.CardNetworkParameters{
		CardNetwork:        v.CardNetwork,
		AcquirerBin:        v.AcquirerBin,
		AcquirerMerchantID: v.AcquirerMerchantID,
	}

	return res
}

// unmarshalOrderResponseBodyToOrderOrder builds a value of type *order.Order
// from a value of type *OrderResponseBody.
func unmarshalOrderResponseBodyToOrderOrder(v *OrderResponseBody) *order.Order {
	if v == nil {
		return nil
	}
	res := &order.Order{
		OrderID:    v.OrderID,
		MerchantID: v.MerchantID,
	}
	res.UserInformation = unmarshalUserInformationResponseBodyToOrderUserInformation(v.UserInformation)
	if v.PaymentInformation != nil {
		res.PaymentInformation = unmarshalPaymentInformationResponseBodyToOrderPaymentInformation(v.PaymentInformation)
	}
	if v.Item != nil {
		res.Item = make([]*order.LineItem, len(v.Item))
		for i, val := range v.Item {
			res.Item[i] = unmarshalLineItemResponseBodyToOrderLineItem(val)
		}
	}

	return res
}

// unmarshalUserInformationResponseBodyToOrderUserInformation builds a value of
// type *order.UserInformation from a value of type
// *UserInformationResponseBody.
func unmarshalUserInformationResponseBodyToOrderUserInformation(v *UserInformationResponseBody) *order.UserInformation {
	res := &order.UserInformation{
		UserID:       *v.UserID,
		GivenName:    *v.GivenName,
		FamilyName:   *v.FamilyName,
		Telephone:    *v.Telephone,
		Email:        *v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = unmarshalPostalAddressResponseBodyToOrderPostalAddress(v.Address)
	}

	return res
}

// unmarshalPostalAddressResponseBodyToOrderPostalAddress builds a value of
// type *order.PostalAddress from a value of type *PostalAddressResponseBody.
func unmarshalPostalAddressResponseBodyToOrderPostalAddress(v *PostalAddressResponseBody) *order.PostalAddress {
	if v == nil {
		return nil
	}
	res := &order.PostalAddress{
		Country:       *v.Country,
		Locality:      *v.Locality,
		Region:        v.Region,
		PostalCode:    *v.PostalCode,
		StreetAddress: *v.StreetAddress,
	}

	return res
}

// unmarshalPaymentInformationResponseBodyToOrderPaymentInformation builds a
// value of type *order.PaymentInformation from a value of type
// *PaymentInformationResponseBody.
func unmarshalPaymentInformationResponseBodyToOrderPaymentInformation(v *PaymentInformationResponseBody) *order.PaymentInformation {
	if v == nil {
		return nil
	}
	res := &order.PaymentInformation{
		PrepaymentStatus:     *v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   *v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	res.Price = unmarshalPriceResponseBodyToOrderPrice(v.Price)
	if v.TaxAmount != nil {
		res.TaxAmount = unmarshalPriceResponseBodyToOrderPrice(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = unmarshalPriceResponseBodyToOrderPrice(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = unmarshalPriceResponseBodyToOrderPrice(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = unmarshalDepositResponseBodyToOrderDeposit(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = unmarshalNoShowFeeResponseBodyToOrderNoShowFee(v.NoShowFee)
	}

	return res
}

// unmarshalDepositResponseBodyToOrderDeposit builds a value of type
// *order.Deposit from a value of type *DepositResponseBody.
func unmarshalDepositResponseBodyToOrderDeposit(v *DepositResponseBody) *order.Deposit {
	if v == nil {
		return nil
	}
	res := &order.Deposit{
		MinAdvanceCancellationSec: *v.MinAdvanceCancellationSec,
		DepositType:               *v.DepositType,
	}
	res.Deposit = unmarshalPriceResponseBodyToOrderPrice(v.Deposit)

	return res
}

// unmarshalNoShowFeeResponseBodyToOrderNoShowFee builds a value of type
// *order.NoShowFee from a value of type *NoShowFeeResponseBody.
func unmarshalNoShowFeeResponseBodyToOrderNoShowFee(v *NoShowFeeResponseBody) *order.NoShowFee {
	if v == nil {
		return nil
	}
	res := &order.NoShowFee{
		FeeType: *v.FeeType,
	}
	res.Fee = unmarshalPriceResponseBodyToOrderPrice(v.Fee)

	return res
}

// unmarshalOrderFailureResponseBodyToOrderOrderFailure builds a value of type
// *order.OrderFailure from a value of type *OrderFailureResponseBody.
func unmarshalOrderFailureResponseBodyToOrderOrderFailure(v *OrderFailureResponseBody) *order.OrderFailure {
	if v == nil {
		return nil
	}
	res := &order.OrderFailure{
		Cause:            *v.Cause,
		RejectedCardType: v.RejectedCardType,
		Description:      v.Description,
	}
	if v.Fulfillability != nil {
		res.Fulfillability = unmarshalOrderFulfillabilityResponseBodyToOrderOrderFulfillability(v.Fulfillability)
	}
	if v.PaymentFailure != nil {
		res.PaymentFailure = unmarshalPaymentFailureInformationResponseBodyToOrderPaymentFailureInformation(v.PaymentFailure)
	}

	return res
}

// unmarshalPaymentFailureInformationResponseBodyToOrderPaymentFailureInformation
// builds a value of type *order.PaymentFailureInformation from a value of type
// *PaymentFailureInformationResponseBody.
func unmarshalPaymentFailureInformationResponseBodyToOrderPaymentFailureInformation(v *PaymentFailureInformationResponseBody) *order.PaymentFailureInformation {
	if v == nil {
		return nil
	}
	res := &order.PaymentFailureInformation{}
	res.Threeds1Parameters = unmarshalThreeDS1ParametersResponseBodyToOrderThreeDS1Parameters(v.Threeds1Parameters)

	return res
}

// unmarshalThreeDS1ParametersResponseBodyToOrderThreeDS1Parameters builds a
// value of type *order.ThreeDS1Parameters from a value of type
// *ThreeDS1ParametersResponseBody.
func unmarshalThreeDS1ParametersResponseBodyToOrderThreeDS1Parameters(v *ThreeDS1ParametersResponseBody) *order.ThreeDS1Parameters {
	res := &order.ThreeDS1Parameters{
		AcsURL:         *v.AcsURL,
		PaReq:          *v.PaReq,
		TransactionID:  *v.TransactionID,
		MdMerchantData: *v.MdMerchantData,
	}

	return res
}

// marshalOrderOrderIdsToOrderIdsRequestBodyRequestBody builds a value of type
// *OrderIdsRequestBodyRequestBody from a value of type *order.OrderIds.
func marshalOrderOrderIdsToOrderIdsRequestBodyRequestBody(v *order.OrderIds) *OrderIdsRequestBodyRequestBody {
	if v == nil {
		return nil
	}
	res := &OrderIdsRequestBodyRequestBody{}
	if v.OrderID != nil {
		res.OrderID = make([]string, len(v.OrderID))
		for i, val := range v.OrderID {
			res.OrderID[i] = val
		}
	}

	return res
}

// marshalOrderIdsRequestBodyRequestBodyToOrderOrderIds builds a value of type
// *order.OrderIds from a value of type *OrderIdsRequestBodyRequestBody.
func marshalOrderIdsRequestBodyRequestBodyToOrderOrderIds(v *OrderIdsRequestBodyRequestBody) *order.OrderIds {
	if v == nil {
		return nil
	}
	res := &order.OrderIds{}
	if v.OrderID != nil {
		res.OrderID = make([]string, len(v.OrderID))
		for i, val := range v.OrderID {
			res.OrderID[i] = val
		}
	}

	return res
}
