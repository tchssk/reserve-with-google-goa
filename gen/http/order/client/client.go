// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order client HTTP transport
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the order service endpoint HTTP clients.
type Client struct {
	// CheckOrderFulfillability Doer is the HTTP client used to make requests to
	// the check_order_fulfillability endpoint.
	CheckOrderFulfillabilityDoer goahttp.Doer

	// CreateOrder Doer is the HTTP client used to make requests to the
	// create_order endpoint.
	CreateOrderDoer goahttp.Doer

	// ListOrders Doer is the HTTP client used to make requests to the list_orders
	// endpoint.
	ListOrdersDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the order service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CheckOrderFulfillabilityDoer: doer,
		CreateOrderDoer:              doer,
		ListOrdersDoer:               doer,
		RestoreResponseBody:          restoreBody,
		scheme:                       scheme,
		host:                         host,
		decoder:                      dec,
		encoder:                      enc,
	}
}

// CheckOrderFulfillability returns an endpoint that makes HTTP requests to the
// order service check_order_fulfillability server.
func (c *Client) CheckOrderFulfillability() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckOrderFulfillabilityRequest(c.encoder)
		decodeResponse = DecodeCheckOrderFulfillabilityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCheckOrderFulfillabilityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckOrderFulfillabilityDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "check_order_fulfillability", err)
		}
		return decodeResponse(resp)
	}
}

// CreateOrder returns an endpoint that makes HTTP requests to the order
// service create_order server.
func (c *Client) CreateOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateOrderRequest(c.encoder)
		decodeResponse = DecodeCreateOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "create_order", err)
		}
		return decodeResponse(resp)
	}
}

// ListOrders returns an endpoint that makes HTTP requests to the order service
// list_orders server.
func (c *Client) ListOrders() goa.Endpoint {
	var (
		encodeRequest  = EncodeListOrdersRequest(c.encoder)
		decodeResponse = DecodeListOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListOrdersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("order", "list_orders", err)
		}
		return decodeResponse(resp)
	}
}
