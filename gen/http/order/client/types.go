// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order HTTP client types
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	order "github.com/tchssk/reserve-with-google-goa/gen/order"
	goa "goa.design/goa/v3/pkg"
)

// CheckOrderFulfillabilityRequestBody is the type of the "order" service
// "check_order_fulfillability" endpoint HTTP request body.
type CheckOrderFulfillabilityRequestBody struct {
	MerchantID string                            `form:"merchant_id" json:"merchant_id" xml:"merchant_id"`
	Item       []*LineItemRequestBodyRequestBody `form:"item" json:"item" xml:"item"`
	CartID     *string                           `form:"cart_id,omitempty" json:"cart_id,omitempty" xml:"cart_id,omitempty"`
}

// CreateOrderRequestBody is the type of the "order" service "create_order"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	Order                       *OrderRequestBodyRequestBody                       `form:"order" json:"order" xml:"order"`
	PaymentProcessingParameters *PaymentProcessingParametersRequestBodyRequestBody `form:"payment_processing_parameters,omitempty" json:"payment_processing_parameters,omitempty" xml:"payment_processing_parameters,omitempty"`
	IdempotencyToken            string                                             `form:"idempotency_token" json:"idempotency_token" xml:"idempotency_token"`
}

// ListOrdersRequestBody is the type of the "order" service "list_orders"
// endpoint HTTP request body.
type ListOrdersRequestBody struct {
	UserID   *string                         `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	OrderIds *OrderIdsRequestBodyRequestBody `form:"order_ids,omitempty" json:"order_ids,omitempty" xml:"order_ids,omitempty"`
}

// CheckOrderFulfillabilityResponseBody is the type of the "order" service
// "check_order_fulfillability" endpoint HTTP response body.
type CheckOrderFulfillabilityResponseBody struct {
	Fulfillability    *OrderFulfillabilityResponseBody `form:"fulfillability,omitempty" json:"fulfillability,omitempty" xml:"fulfillability,omitempty"`
	FeesAndTaxes      *PriceResponseBody               `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Fees              *FeesResponseBody                `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	CartExpirationSec *int64                           `form:"cart_expiration_sec,omitempty" json:"cart_expiration_sec,omitempty" xml:"cart_expiration_sec,omitempty"`
}

// CreateOrderResponseBody is the type of the "order" service "create_order"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	Order        *OrderResponseBody        `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	OrderFailure *OrderFailureResponseBody `form:"order_failure,omitempty" json:"order_failure,omitempty" xml:"order_failure,omitempty"`
}

// ListOrdersResponseBody is the type of the "order" service "list_orders"
// endpoint HTTP response body.
type ListOrdersResponseBody struct {
	Order []*OrderResponseBody `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// CheckOrderFulfillabilityBadRequestResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "bad_request" error.
type CheckOrderFulfillabilityBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityUnauthorizedResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "unauthorized" error.
type CheckOrderFulfillabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityForbiddenResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "forbidden" error.
type CheckOrderFulfillabilityForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityNotFoundResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "not_found" error.
type CheckOrderFulfillabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityConflictResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "conflict" error.
type CheckOrderFulfillabilityConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityTooManyRequestsResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "too_many_requests" error.
type CheckOrderFulfillabilityTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityClientClosedRequestResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "client_closed_request" error.
type CheckOrderFulfillabilityClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityInternalServerErrorResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "internal_server_error" error.
type CheckOrderFulfillabilityInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityNotImplementedResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "not_implemented" error.
type CheckOrderFulfillabilityNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityServiceUnavailableResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "service_unavailable" error.
type CheckOrderFulfillabilityServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CheckOrderFulfillabilityGatewayTimeoutResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "gateway_timeout" error.
type CheckOrderFulfillabilityGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderBadRequestResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "bad_request" error.
type CreateOrderBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderUnauthorizedResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "unauthorized" error.
type CreateOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderForbiddenResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "forbidden" error.
type CreateOrderForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderNotFoundResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "not_found" error.
type CreateOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderConflictResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "conflict" error.
type CreateOrderConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderTooManyRequestsResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "too_many_requests" error.
type CreateOrderTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderClientClosedRequestResponseBody is the type of the "order"
// service "create_order" endpoint HTTP response body for the
// "client_closed_request" error.
type CreateOrderClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderInternalServerErrorResponseBody is the type of the "order"
// service "create_order" endpoint HTTP response body for the
// "internal_server_error" error.
type CreateOrderInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderNotImplementedResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "not_implemented" error.
type CreateOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderServiceUnavailableResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "service_unavailable"
// error.
type CreateOrderServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateOrderGatewayTimeoutResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "gateway_timeout" error.
type CreateOrderGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersBadRequestResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "bad_request" error.
type ListOrdersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersUnauthorizedResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "unauthorized" error.
type ListOrdersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersForbiddenResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "forbidden" error.
type ListOrdersForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersNotFoundResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "not_found" error.
type ListOrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersConflictResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "conflict" error.
type ListOrdersConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersTooManyRequestsResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "too_many_requests" error.
type ListOrdersTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersClientClosedRequestResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "client_closed_request"
// error.
type ListOrdersClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersInternalServerErrorResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "internal_server_error"
// error.
type ListOrdersInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersNotImplementedResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "not_implemented" error.
type ListOrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersServiceUnavailableResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "service_unavailable"
// error.
type ListOrdersServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListOrdersGatewayTimeoutResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "gateway_timeout" error.
type ListOrdersGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LineItemRequestBodyRequestBody is used to define fields on request body
// types.
type LineItemRequestBodyRequestBody struct {
	ServiceID         string                                   `form:"service_id" json:"service_id" xml:"service_id"`
	StartSec          int64                                    `form:"start_sec" json:"start_sec" xml:"start_sec"`
	DurationSec       int64                                    `form:"duration_sec" json:"duration_sec" xml:"duration_sec"`
	Tickets           []*OrderedTicketsRequestBodyRequestBody  `form:"tickets,omitempty" json:"tickets,omitempty" xml:"tickets,omitempty"`
	Price             *PriceRequestBodyRequestBody             `form:"price" json:"price" xml:"price"`
	Status            *string                                  `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	IntakeFormAnswers *IntakeFormAnswersRequestBodyRequestBody `form:"intake_form_answers,omitempty" json:"intake_form_answers,omitempty" xml:"intake_form_answers,omitempty"`
	WarningReason     *string                                  `form:"warning_reason,omitempty" json:"warning_reason,omitempty" xml:"warning_reason,omitempty"`
}

// OrderedTicketsRequestBodyRequestBody is used to define fields on request
// body types.
type OrderedTicketsRequestBodyRequestBody struct {
	TicketID string `form:"ticket_id" json:"ticket_id" xml:"ticket_id"`
	Count    int32  `form:"count" json:"count" xml:"count"`
}

// PriceRequestBodyRequestBody is used to define fields on request body types.
type PriceRequestBodyRequestBody struct {
	PriceMicros      int64   `form:"price_micros" json:"price_micros" xml:"price_micros"`
	CurrencyCode     string  `form:"currency_code" json:"currency_code" xml:"currency_code"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// IntakeFormAnswersRequestBodyRequestBody is used to define fields on request
// body types.
type IntakeFormAnswersRequestBodyRequestBody struct {
	Answer []*IntakeFormFieldAnswerRequestBodyRequestBody `form:"answer" json:"answer" xml:"answer"`
}

// IntakeFormFieldAnswerRequestBodyRequestBody is used to define fields on
// request body types.
type IntakeFormFieldAnswerRequestBodyRequestBody struct {
	ID       string   `form:"id" json:"id" xml:"id"`
	Response []string `form:"response" json:"response" xml:"response"`
}

// OrderFulfillabilityResponseBody is used to define fields on response body
// types.
type OrderFulfillabilityResponseBody struct {
	Result              *string                               `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	ItemFulfillability  []*LineItemFulfillabilityResponseBody `form:"item_fulfillability,omitempty" json:"item_fulfillability,omitempty" xml:"item_fulfillability,omitempty"`
	UnfulfillableReason *string                               `form:"unfulfillable_reason,omitempty" json:"unfulfillable_reason,omitempty" xml:"unfulfillable_reason,omitempty"`
}

// LineItemFulfillabilityResponseBody is used to define fields on response body
// types.
type LineItemFulfillabilityResponseBody struct {
	Item                     *LineItemResponseBody                   `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
	Result                   *string                                 `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	UnfulfillableReason      *string                                 `form:"unfulfillable_reason,omitempty" json:"unfulfillable_reason,omitempty" xml:"unfulfillable_reason,omitempty"`
	Availability             *UpdatedAvailabilityResponseBody        `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
	TicketType               []*TicketTypeResponseBody               `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	ViolatedTicketConstraint []*ViolatedTicketConstraintResponseBody `form:"violated_ticket_constraint,omitempty" json:"violated_ticket_constraint,omitempty" xml:"violated_ticket_constraint,omitempty"`
}

// LineItemResponseBody is used to define fields on response body types.
type LineItemResponseBody struct {
	ServiceID         *string                        `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec          *int64                         `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec       *int64                         `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	Tickets           []*OrderedTicketsResponseBody  `form:"tickets,omitempty" json:"tickets,omitempty" xml:"tickets,omitempty"`
	Price             *PriceResponseBody             `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Status            *string                        `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	IntakeFormAnswers *IntakeFormAnswersResponseBody `form:"intake_form_answers,omitempty" json:"intake_form_answers,omitempty" xml:"intake_form_answers,omitempty"`
	WarningReason     *string                        `form:"warning_reason,omitempty" json:"warning_reason,omitempty" xml:"warning_reason,omitempty"`
}

// OrderedTicketsResponseBody is used to define fields on response body types.
type OrderedTicketsResponseBody struct {
	TicketID *string `form:"ticket_id,omitempty" json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	Count    *int32  `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// PriceResponseBody is used to define fields on response body types.
type PriceResponseBody struct {
	PriceMicros      *int64  `form:"price_micros,omitempty" json:"price_micros,omitempty" xml:"price_micros,omitempty"`
	CurrencyCode     *string `form:"currency_code,omitempty" json:"currency_code,omitempty" xml:"currency_code,omitempty"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// IntakeFormAnswersResponseBody is used to define fields on response body
// types.
type IntakeFormAnswersResponseBody struct {
	Answer []*IntakeFormFieldAnswerResponseBody `form:"answer,omitempty" json:"answer,omitempty" xml:"answer,omitempty"`
}

// IntakeFormFieldAnswerResponseBody is used to define fields on response body
// types.
type IntakeFormFieldAnswerResponseBody struct {
	ID       *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Response []string `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// UpdatedAvailabilityResponseBody is used to define fields on response body
// types.
type UpdatedAvailabilityResponseBody struct {
	SpotsOpen *int32 `form:"spots_open,omitempty" json:"spots_open,omitempty" xml:"spots_open,omitempty"`
}

// TicketTypeResponseBody is used to define fields on response body types.
type TicketTypeResponseBody struct {
	TicketTypeID               *string                   `form:"ticket_type_id,omitempty" json:"ticket_type_id,omitempty" xml:"ticket_type_id,omitempty"`
	ShortDescription           *string                   `form:"short_description,omitempty" json:"short_description,omitempty" xml:"short_description,omitempty"`
	LocalizedShortDescription  *TextResponseBody         `form:"localized_short_description,omitempty" json:"localized_short_description,omitempty" xml:"localized_short_description,omitempty"`
	Price                      *PriceResponseBody        `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	PerTicketFee               *PerTicketFeeResponseBody `form:"per_ticket_fee,omitempty" json:"per_ticket_fee,omitempty" xml:"per_ticket_fee,omitempty"`
	OptionDescription          *string                   `form:"option_description,omitempty" json:"option_description,omitempty" xml:"option_description,omitempty"`
	LocalizedOptionDescription *TextResponseBody         `form:"localized_option_description,omitempty" json:"localized_option_description,omitempty" xml:"localized_option_description,omitempty"`
}

// TextResponseBody is used to define fields on response body types.
type TextResponseBody struct {
	Value          *string                        `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	LocalizedValue []*LocalizedStringResponseBody `form:"localized_value,omitempty" json:"localized_value,omitempty" xml:"localized_value,omitempty"`
}

// LocalizedStringResponseBody is used to define fields on response body types.
type LocalizedStringResponseBody struct {
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	Value  *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// PerTicketFeeResponseBody is used to define fields on response body types.
type PerTicketFeeResponseBody struct {
	ServiceCharge *PriceResponseBody `form:"service_charge,omitempty" json:"service_charge,omitempty" xml:"service_charge,omitempty"`
	FacilityFee   *PriceResponseBody `form:"facility_fee,omitempty" json:"facility_fee,omitempty" xml:"facility_fee,omitempty"`
	Taxes         *PriceResponseBody `form:"taxes,omitempty" json:"taxes,omitempty" xml:"taxes,omitempty"`
}

// ViolatedTicketConstraintResponseBody is used to define fields on response
// body types.
type ViolatedTicketConstraintResponseBody struct {
	MinTicketCount *int32  `form:"min_ticket_count,omitempty" json:"min_ticket_count,omitempty" xml:"min_ticket_count,omitempty"`
	MaxTicketCount *int32  `form:"max_ticket_count,omitempty" json:"max_ticket_count,omitempty" xml:"max_ticket_count,omitempty"`
	TicketID       *string `form:"ticket_id,omitempty" json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
}

// FeesResponseBody is used to define fields on response body types.
type FeesResponseBody struct {
	PerTicketFee []*SpecificPerTicketFeeResponseBody `form:"per_ticket_fee,omitempty" json:"per_ticket_fee,omitempty" xml:"per_ticket_fee,omitempty"`
	PerOrderFee  []*SpecificPerOrderFeeResponseBody  `form:"per_order_fee,omitempty" json:"per_order_fee,omitempty" xml:"per_order_fee,omitempty"`
}

// SpecificPerTicketFeeResponseBody is used to define fields on response body
// types.
type SpecificPerTicketFeeResponseBody struct {
	TicketID  *string            `form:"ticket_id,omitempty" json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	ServiceID *string            `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	FeeName   *string            `form:"fee_name,omitempty" json:"fee_name,omitempty" xml:"fee_name,omitempty"`
	FeeAmount *PriceResponseBody `form:"fee_amount,omitempty" json:"fee_amount,omitempty" xml:"fee_amount,omitempty"`
}

// SpecificPerOrderFeeResponseBody is used to define fields on response body
// types.
type SpecificPerOrderFeeResponseBody struct {
	FeeName   *string            `form:"fee_name,omitempty" json:"fee_name,omitempty" xml:"fee_name,omitempty"`
	FeeAmount *PriceResponseBody `form:"fee_amount,omitempty" json:"fee_amount,omitempty" xml:"fee_amount,omitempty"`
}

// OrderRequestBodyRequestBody is used to define fields on request body types.
type OrderRequestBodyRequestBody struct {
	OrderID            *string                                   `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserInformation    *UserInformationRequestBodyRequestBody    `form:"user_information" json:"user_information" xml:"user_information"`
	PaymentInformation *PaymentInformationRequestBodyRequestBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	MerchantID         *string                                   `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	Item               []*LineItemRequestBodyRequestBody         `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// UserInformationRequestBodyRequestBody is used to define fields on request
// body types.
type UserInformationRequestBodyRequestBody struct {
	UserID       string                               `form:"user_id" json:"user_id" xml:"user_id"`
	GivenName    string                               `form:"given_name" json:"given_name" xml:"given_name"`
	FamilyName   string                               `form:"family_name" json:"family_name" xml:"family_name"`
	Address      *PostalAddressRequestBodyRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    string                               `form:"telephone" json:"telephone" xml:"telephone"`
	Email        string                               `form:"email" json:"email" xml:"email"`
	LanguageCode *string                              `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressRequestBodyRequestBody is used to define fields on request body
// types.
type PostalAddressRequestBodyRequestBody struct {
	Country       string  `form:"country" json:"country" xml:"country"`
	Locality      string  `form:"locality" json:"locality" xml:"locality"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    string  `form:"postal_code" json:"postal_code" xml:"postal_code"`
	StreetAddress string  `form:"street_address" json:"street_address" xml:"street_address"`
}

// PaymentInformationRequestBodyRequestBody is used to define fields on request
// body types.
type PaymentInformationRequestBodyRequestBody struct {
	PrepaymentStatus     string                           `form:"prepayment_status" json:"prepayment_status" xml:"prepayment_status"`
	PaymentTransactionID *string                          `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceRequestBodyRequestBody     `form:"price" json:"price" xml:"price"`
	TaxAmount            *PriceRequestBodyRequestBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceRequestBodyRequestBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceRequestBodyRequestBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositRequestBodyRequestBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeRequestBodyRequestBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   string                           `form:"payment_processed_by" json:"payment_processed_by" xml:"payment_processed_by"`
	PaymentOptionID      *string                          `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                          `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                          `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                          `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                          `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// DepositRequestBodyRequestBody is used to define fields on request body types.
type DepositRequestBodyRequestBody struct {
	Deposit                   *PriceRequestBodyRequestBody `form:"deposit" json:"deposit" xml:"deposit"`
	MinAdvanceCancellationSec int64                        `form:"min_advance_cancellation_sec" json:"min_advance_cancellation_sec" xml:"min_advance_cancellation_sec"`
	DepositType               string                       `form:"deposit_type" json:"deposit_type" xml:"deposit_type"`
}

// NoShowFeeRequestBodyRequestBody is used to define fields on request body
// types.
type NoShowFeeRequestBodyRequestBody struct {
	Fee     *PriceRequestBodyRequestBody `form:"fee" json:"fee" xml:"fee"`
	FeeType string                       `form:"fee_type" json:"fee_type" xml:"fee_type"`
}

// PaymentProcessingParametersRequestBodyRequestBody is used to define fields
// on request body types.
type PaymentProcessingParametersRequestBodyRequestBody struct {
	Processor                  string                                    `form:"processor" json:"processor" xml:"processor"`
	PaymentMethodToken         *string                                   `form:"payment_method_token,omitempty" json:"payment_method_token,omitempty" xml:"payment_method_token,omitempty"`
	UnparsedPaymentMethodToken *string                                   `form:"unparsed_payment_method_token,omitempty" json:"unparsed_payment_method_token,omitempty" xml:"unparsed_payment_method_token,omitempty"`
	Version                    *string                                   `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	PaymentProcessor           string                                    `form:"payment_processor" json:"payment_processor" xml:"payment_processor"`
	TokenizationConfig         *TokenizationConfigRequestBodyRequestBody `form:"tokenization_config,omitempty" json:"tokenization_config,omitempty" xml:"tokenization_config,omitempty"`
}

// TokenizationConfigRequestBodyRequestBody is used to define fields on request
// body types.
type TokenizationConfigRequestBodyRequestBody struct {
	TokenizationParameter    map[string]string                              `form:"tokenization_parameter" json:"tokenization_parameter" xml:"tokenization_parameter"`
	BillingInformationFormat string                                         `form:"billing_information_format" json:"billing_information_format" xml:"billing_information_format"`
	MerchantOfRecordName     string                                         `form:"merchant_of_record_name" json:"merchant_of_record_name" xml:"merchant_of_record_name"`
	PaymentCountryCode       string                                         `form:"payment_country_code" json:"payment_country_code" xml:"payment_country_code"`
	CardNetworkParameters    []*CardNetworkParametersRequestBodyRequestBody `form:"card_network_parameters" json:"card_network_parameters" xml:"card_network_parameters"`
	AllowedAuthMethods       []string                                       `form:"allowed_auth_methods" json:"allowed_auth_methods" xml:"allowed_auth_methods"`
}

// CardNetworkParametersRequestBodyRequestBody is used to define fields on
// request body types.
type CardNetworkParametersRequestBodyRequestBody struct {
	CardNetwork        string `form:"card_network" json:"card_network" xml:"card_network"`
	AcquirerBin        string `form:"acquirer_bin" json:"acquirer_bin" xml:"acquirer_bin"`
	AcquirerMerchantID string `form:"acquirer_merchant_id" json:"acquirer_merchant_id" xml:"acquirer_merchant_id"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	OrderID            *string                         `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserInformation    *UserInformationResponseBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	PaymentInformation *PaymentInformationResponseBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	MerchantID         *string                         `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	Item               []*LineItemResponseBody         `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// UserInformationResponseBody is used to define fields on response body types.
type UserInformationResponseBody struct {
	UserID       *string                    `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	GivenName    *string                    `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	FamilyName   *string                    `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	Address      *PostalAddressResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    *string                    `form:"telephone,omitempty" json:"telephone,omitempty" xml:"telephone,omitempty"`
	Email        *string                    `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	LanguageCode *string                    `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressResponseBody is used to define fields on response body types.
type PostalAddressResponseBody struct {
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Locality      *string `form:"locality,omitempty" json:"locality,omitempty" xml:"locality,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    *string `form:"postal_code,omitempty" json:"postal_code,omitempty" xml:"postal_code,omitempty"`
	StreetAddress *string `form:"street_address,omitempty" json:"street_address,omitempty" xml:"street_address,omitempty"`
}

// PaymentInformationResponseBody is used to define fields on response body
// types.
type PaymentInformationResponseBody struct {
	PrepaymentStatus     *string                `form:"prepayment_status,omitempty" json:"prepayment_status,omitempty" xml:"prepayment_status,omitempty"`
	PaymentTransactionID *string                `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceResponseBody     `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	TaxAmount            *PriceResponseBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceResponseBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceResponseBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositResponseBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeResponseBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   *string                `form:"payment_processed_by,omitempty" json:"payment_processed_by,omitempty" xml:"payment_processed_by,omitempty"`
	PaymentOptionID      *string                `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// DepositResponseBody is used to define fields on response body types.
type DepositResponseBody struct {
	Deposit                   *PriceResponseBody `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	MinAdvanceCancellationSec *int64             `form:"min_advance_cancellation_sec,omitempty" json:"min_advance_cancellation_sec,omitempty" xml:"min_advance_cancellation_sec,omitempty"`
	DepositType               *string            `form:"deposit_type,omitempty" json:"deposit_type,omitempty" xml:"deposit_type,omitempty"`
}

// NoShowFeeResponseBody is used to define fields on response body types.
type NoShowFeeResponseBody struct {
	Fee     *PriceResponseBody `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	FeeType *string            `form:"fee_type,omitempty" json:"fee_type,omitempty" xml:"fee_type,omitempty"`
}

// OrderFailureResponseBody is used to define fields on response body types.
type OrderFailureResponseBody struct {
	Cause            *string                                `form:"cause,omitempty" json:"cause,omitempty" xml:"cause,omitempty"`
	Fulfillability   *OrderFulfillabilityResponseBody       `form:"fulfillability,omitempty" json:"fulfillability,omitempty" xml:"fulfillability,omitempty"`
	RejectedCardType *string                                `form:"rejected_card_type,omitempty" json:"rejected_card_type,omitempty" xml:"rejected_card_type,omitempty"`
	Description      *string                                `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	PaymentFailure   *PaymentFailureInformationResponseBody `form:"payment_failure,omitempty" json:"payment_failure,omitempty" xml:"payment_failure,omitempty"`
}

// PaymentFailureInformationResponseBody is used to define fields on response
// body types.
type PaymentFailureInformationResponseBody struct {
	Threeds1Parameters *ThreeDS1ParametersResponseBody `form:"threeds1_parameters,omitempty" json:"threeds1_parameters,omitempty" xml:"threeds1_parameters,omitempty"`
}

// ThreeDS1ParametersResponseBody is used to define fields on response body
// types.
type ThreeDS1ParametersResponseBody struct {
	AcsURL         *string `form:"acs_url,omitempty" json:"acs_url,omitempty" xml:"acs_url,omitempty"`
	PaReq          *string `form:"pa_req,omitempty" json:"pa_req,omitempty" xml:"pa_req,omitempty"`
	TransactionID  *string `form:"transaction_id,omitempty" json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	MdMerchantData *string `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// OrderIdsRequestBodyRequestBody is used to define fields on request body
// types.
type OrderIdsRequestBodyRequestBody struct {
	OrderID []string `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
}

// NewCheckOrderFulfillabilityRequestBody builds the HTTP request body from the
// payload of the "check_order_fulfillability" endpoint of the "order" service.
func NewCheckOrderFulfillabilityRequestBody(p *order.CheckOrderFulfillabilityPayload) *CheckOrderFulfillabilityRequestBody {
	body := &CheckOrderFulfillabilityRequestBody{
		MerchantID: p.Body.MerchantID,
		CartID:     p.Body.CartID,
	}
	if p.Body.Item != nil {
		body.Item = make([]*LineItemRequestBodyRequestBody, len(p.Body.Item))
		for i, val := range p.Body.Item {
			body.Item[i] = marshalOrderLineItemToLineItemRequestBodyRequestBody(val)
		}
	}
	return body
}

// NewCreateOrderRequestBody builds the HTTP request body from the payload of
// the "create_order" endpoint of the "order" service.
func NewCreateOrderRequestBody(p *order.CreateOrderPayload) *CreateOrderRequestBody {
	body := &CreateOrderRequestBody{
		IdempotencyToken: p.Body.IdempotencyToken,
	}
	if p.Body.Order != nil {
		body.Order = marshalOrderOrderToOrderRequestBodyRequestBody(p.Body.Order)
	}
	if p.Body.PaymentProcessingParameters != nil {
		body.PaymentProcessingParameters = marshalOrderPaymentProcessingParametersToPaymentProcessingParametersRequestBodyRequestBody(p.Body.PaymentProcessingParameters)
	}
	return body
}

// NewListOrdersRequestBody builds the HTTP request body from the payload of
// the "list_orders" endpoint of the "order" service.
func NewListOrdersRequestBody(p *order.ListOrdersPayload) *ListOrdersRequestBody {
	body := &ListOrdersRequestBody{
		UserID: p.Body.UserID,
	}
	if p.Body.OrderIds != nil {
		body.OrderIds = marshalOrderOrderIdsToOrderIdsRequestBodyRequestBody(p.Body.OrderIds)
	}
	return body
}

// NewCheckOrderFulfillabilityResponseOK builds a "order" service
// "check_order_fulfillability" endpoint result from a HTTP "OK" response.
func NewCheckOrderFulfillabilityResponseOK(body *CheckOrderFulfillabilityResponseBody) *order.CheckOrderFulfillabilityResponse {
	v := &order.CheckOrderFulfillabilityResponse{
		CartExpirationSec: body.CartExpirationSec,
	}
	if body.Fulfillability != nil {
		v.Fulfillability = unmarshalOrderFulfillabilityResponseBodyToOrderOrderFulfillability(body.Fulfillability)
	}
	if body.FeesAndTaxes != nil {
		v.FeesAndTaxes = unmarshalPriceResponseBodyToOrderPrice(body.FeesAndTaxes)
	}
	if body.Fees != nil {
		v.Fees = unmarshalFeesResponseBodyToOrderFees(body.Fees)
	}

	return v
}

// NewCheckOrderFulfillabilityBadRequest builds a order service
// check_order_fulfillability endpoint bad_request error.
func NewCheckOrderFulfillabilityBadRequest(body *CheckOrderFulfillabilityBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityUnauthorized builds a order service
// check_order_fulfillability endpoint unauthorized error.
func NewCheckOrderFulfillabilityUnauthorized(body *CheckOrderFulfillabilityUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityForbidden builds a order service
// check_order_fulfillability endpoint forbidden error.
func NewCheckOrderFulfillabilityForbidden(body *CheckOrderFulfillabilityForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityNotFound builds a order service
// check_order_fulfillability endpoint not_found error.
func NewCheckOrderFulfillabilityNotFound(body *CheckOrderFulfillabilityNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityConflict builds a order service
// check_order_fulfillability endpoint conflict error.
func NewCheckOrderFulfillabilityConflict(body *CheckOrderFulfillabilityConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityTooManyRequests builds a order service
// check_order_fulfillability endpoint too_many_requests error.
func NewCheckOrderFulfillabilityTooManyRequests(body *CheckOrderFulfillabilityTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityClientClosedRequest builds a order service
// check_order_fulfillability endpoint client_closed_request error.
func NewCheckOrderFulfillabilityClientClosedRequest(body *CheckOrderFulfillabilityClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityInternalServerError builds a order service
// check_order_fulfillability endpoint internal_server_error error.
func NewCheckOrderFulfillabilityInternalServerError(body *CheckOrderFulfillabilityInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityNotImplemented builds a order service
// check_order_fulfillability endpoint not_implemented error.
func NewCheckOrderFulfillabilityNotImplemented(body *CheckOrderFulfillabilityNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityServiceUnavailable builds a order service
// check_order_fulfillability endpoint service_unavailable error.
func NewCheckOrderFulfillabilityServiceUnavailable(body *CheckOrderFulfillabilityServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCheckOrderFulfillabilityGatewayTimeout builds a order service
// check_order_fulfillability endpoint gateway_timeout error.
func NewCheckOrderFulfillabilityGatewayTimeout(body *CheckOrderFulfillabilityGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderResponseOK builds a "order" service "create_order" endpoint
// result from a HTTP "OK" response.
func NewCreateOrderResponseOK(body *CreateOrderResponseBody) *order.CreateOrderResponse {
	v := &order.CreateOrderResponse{}
	if body.Order != nil {
		v.Order = unmarshalOrderResponseBodyToOrderOrder(body.Order)
	}
	if body.OrderFailure != nil {
		v.OrderFailure = unmarshalOrderFailureResponseBodyToOrderOrderFailure(body.OrderFailure)
	}

	return v
}

// NewCreateOrderBadRequest builds a order service create_order endpoint
// bad_request error.
func NewCreateOrderBadRequest(body *CreateOrderBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderUnauthorized builds a order service create_order endpoint
// unauthorized error.
func NewCreateOrderUnauthorized(body *CreateOrderUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderForbidden builds a order service create_order endpoint
// forbidden error.
func NewCreateOrderForbidden(body *CreateOrderForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderNotFound builds a order service create_order endpoint
// not_found error.
func NewCreateOrderNotFound(body *CreateOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderConflict builds a order service create_order endpoint conflict
// error.
func NewCreateOrderConflict(body *CreateOrderConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderTooManyRequests builds a order service create_order endpoint
// too_many_requests error.
func NewCreateOrderTooManyRequests(body *CreateOrderTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderClientClosedRequest builds a order service create_order
// endpoint client_closed_request error.
func NewCreateOrderClientClosedRequest(body *CreateOrderClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderInternalServerError builds a order service create_order
// endpoint internal_server_error error.
func NewCreateOrderInternalServerError(body *CreateOrderInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderNotImplemented builds a order service create_order endpoint
// not_implemented error.
func NewCreateOrderNotImplemented(body *CreateOrderNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderServiceUnavailable builds a order service create_order
// endpoint service_unavailable error.
func NewCreateOrderServiceUnavailable(body *CreateOrderServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderGatewayTimeout builds a order service create_order endpoint
// gateway_timeout error.
func NewCreateOrderGatewayTimeout(body *CreateOrderGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersResponseOK builds a "order" service "list_orders" endpoint
// result from a HTTP "OK" response.
func NewListOrdersResponseOK(body *ListOrdersResponseBody) *order.ListOrdersResponse {
	v := &order.ListOrdersResponse{}
	v.Order = make([]*order.Order, len(body.Order))
	for i, val := range body.Order {
		v.Order[i] = unmarshalOrderResponseBodyToOrderOrder(val)
	}

	return v
}

// NewListOrdersBadRequest builds a order service list_orders endpoint
// bad_request error.
func NewListOrdersBadRequest(body *ListOrdersBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersUnauthorized builds a order service list_orders endpoint
// unauthorized error.
func NewListOrdersUnauthorized(body *ListOrdersUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersForbidden builds a order service list_orders endpoint forbidden
// error.
func NewListOrdersForbidden(body *ListOrdersForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersNotFound builds a order service list_orders endpoint not_found
// error.
func NewListOrdersNotFound(body *ListOrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersConflict builds a order service list_orders endpoint conflict
// error.
func NewListOrdersConflict(body *ListOrdersConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersTooManyRequests builds a order service list_orders endpoint
// too_many_requests error.
func NewListOrdersTooManyRequests(body *ListOrdersTooManyRequestsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersClientClosedRequest builds a order service list_orders endpoint
// client_closed_request error.
func NewListOrdersClientClosedRequest(body *ListOrdersClientClosedRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersInternalServerError builds a order service list_orders endpoint
// internal_server_error error.
func NewListOrdersInternalServerError(body *ListOrdersInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersNotImplemented builds a order service list_orders endpoint
// not_implemented error.
func NewListOrdersNotImplemented(body *ListOrdersNotImplementedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersServiceUnavailable builds a order service list_orders endpoint
// service_unavailable error.
func NewListOrdersServiceUnavailable(body *ListOrdersServiceUnavailableResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListOrdersGatewayTimeout builds a order service list_orders endpoint
// gateway_timeout error.
func NewListOrdersGatewayTimeout(body *ListOrdersGatewayTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCheckOrderFulfillabilityResponseBody runs the validations defined on
// check_order_fulfillability_response_body
func ValidateCheckOrderFulfillabilityResponseBody(body *CheckOrderFulfillabilityResponseBody) (err error) {
	if body.Fulfillability != nil {
		if err2 := ValidateOrderFulfillabilityResponseBody(body.Fulfillability); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeesAndTaxes != nil {
		if err2 := ValidatePriceResponseBody(body.FeesAndTaxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Fees != nil {
		if err2 := ValidateFeesResponseBody(body.Fees); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateOrderResponseBody runs the validations defined on
// create_order_response_body
func ValidateCreateOrderResponseBody(body *CreateOrderResponseBody) (err error) {
	if body.Order != nil {
		if err2 := ValidateOrderResponseBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.OrderFailure != nil {
		if err2 := ValidateOrderFailureResponseBody(body.OrderFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListOrdersResponseBody runs the validations defined on
// list_orders_response_body
func ValidateListOrdersResponseBody(body *ListOrdersResponseBody) (err error) {
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	for _, e := range body.Order {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCheckOrderFulfillabilityBadRequestResponseBody runs the validations
// defined on check_order_fulfillability_bad_request_response_body
func ValidateCheckOrderFulfillabilityBadRequestResponseBody(body *CheckOrderFulfillabilityBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityUnauthorizedResponseBody runs the
// validations defined on check_order_fulfillability_unauthorized_response_body
func ValidateCheckOrderFulfillabilityUnauthorizedResponseBody(body *CheckOrderFulfillabilityUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityForbiddenResponseBody runs the validations
// defined on check_order_fulfillability_forbidden_response_body
func ValidateCheckOrderFulfillabilityForbiddenResponseBody(body *CheckOrderFulfillabilityForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityNotFoundResponseBody runs the validations
// defined on check_order_fulfillability_not_found_response_body
func ValidateCheckOrderFulfillabilityNotFoundResponseBody(body *CheckOrderFulfillabilityNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityConflictResponseBody runs the validations
// defined on check_order_fulfillability_conflict_response_body
func ValidateCheckOrderFulfillabilityConflictResponseBody(body *CheckOrderFulfillabilityConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityTooManyRequestsResponseBody runs the
// validations defined on
// check_order_fulfillability_too_many_requests_response_body
func ValidateCheckOrderFulfillabilityTooManyRequestsResponseBody(body *CheckOrderFulfillabilityTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityClientClosedRequestResponseBody runs the
// validations defined on
// check_order_fulfillability_client_closed_request_response_body
func ValidateCheckOrderFulfillabilityClientClosedRequestResponseBody(body *CheckOrderFulfillabilityClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityInternalServerErrorResponseBody runs the
// validations defined on
// check_order_fulfillability_internal_server_error_response_body
func ValidateCheckOrderFulfillabilityInternalServerErrorResponseBody(body *CheckOrderFulfillabilityInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityNotImplementedResponseBody runs the
// validations defined on
// check_order_fulfillability_not_implemented_response_body
func ValidateCheckOrderFulfillabilityNotImplementedResponseBody(body *CheckOrderFulfillabilityNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityServiceUnavailableResponseBody runs the
// validations defined on
// check_order_fulfillability_service_unavailable_response_body
func ValidateCheckOrderFulfillabilityServiceUnavailableResponseBody(body *CheckOrderFulfillabilityServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCheckOrderFulfillabilityGatewayTimeoutResponseBody runs the
// validations defined on
// check_order_fulfillability_gateway_timeout_response_body
func ValidateCheckOrderFulfillabilityGatewayTimeoutResponseBody(body *CheckOrderFulfillabilityGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderBadRequestResponseBody runs the validations defined on
// create_order_bad_request_response_body
func ValidateCreateOrderBadRequestResponseBody(body *CreateOrderBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderUnauthorizedResponseBody runs the validations defined on
// create_order_unauthorized_response_body
func ValidateCreateOrderUnauthorizedResponseBody(body *CreateOrderUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderForbiddenResponseBody runs the validations defined on
// create_order_forbidden_response_body
func ValidateCreateOrderForbiddenResponseBody(body *CreateOrderForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderNotFoundResponseBody runs the validations defined on
// create_order_not_found_response_body
func ValidateCreateOrderNotFoundResponseBody(body *CreateOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderConflictResponseBody runs the validations defined on
// create_order_conflict_response_body
func ValidateCreateOrderConflictResponseBody(body *CreateOrderConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderTooManyRequestsResponseBody runs the validations defined
// on create_order_too_many_requests_response_body
func ValidateCreateOrderTooManyRequestsResponseBody(body *CreateOrderTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderClientClosedRequestResponseBody runs the validations
// defined on create_order_client_closed_request_response_body
func ValidateCreateOrderClientClosedRequestResponseBody(body *CreateOrderClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderInternalServerErrorResponseBody runs the validations
// defined on create_order_internal_server_error_response_body
func ValidateCreateOrderInternalServerErrorResponseBody(body *CreateOrderInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderNotImplementedResponseBody runs the validations defined
// on create_order_not_implemented_response_body
func ValidateCreateOrderNotImplementedResponseBody(body *CreateOrderNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderServiceUnavailableResponseBody runs the validations
// defined on create_order_service_unavailable_response_body
func ValidateCreateOrderServiceUnavailableResponseBody(body *CreateOrderServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateOrderGatewayTimeoutResponseBody runs the validations defined
// on create_order_gateway_timeout_response_body
func ValidateCreateOrderGatewayTimeoutResponseBody(body *CreateOrderGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersBadRequestResponseBody runs the validations defined on
// list_orders_bad_request_response_body
func ValidateListOrdersBadRequestResponseBody(body *ListOrdersBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersUnauthorizedResponseBody runs the validations defined on
// list_orders_unauthorized_response_body
func ValidateListOrdersUnauthorizedResponseBody(body *ListOrdersUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersForbiddenResponseBody runs the validations defined on
// list_orders_forbidden_response_body
func ValidateListOrdersForbiddenResponseBody(body *ListOrdersForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersNotFoundResponseBody runs the validations defined on
// list_orders_not_found_response_body
func ValidateListOrdersNotFoundResponseBody(body *ListOrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersConflictResponseBody runs the validations defined on
// list_orders_conflict_response_body
func ValidateListOrdersConflictResponseBody(body *ListOrdersConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersTooManyRequestsResponseBody runs the validations defined
// on list_orders_too_many_requests_response_body
func ValidateListOrdersTooManyRequestsResponseBody(body *ListOrdersTooManyRequestsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersClientClosedRequestResponseBody runs the validations
// defined on list_orders_client_closed_request_response_body
func ValidateListOrdersClientClosedRequestResponseBody(body *ListOrdersClientClosedRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersInternalServerErrorResponseBody runs the validations
// defined on list_orders_internal_server_error_response_body
func ValidateListOrdersInternalServerErrorResponseBody(body *ListOrdersInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersNotImplementedResponseBody runs the validations defined on
// list_orders_not_implemented_response_body
func ValidateListOrdersNotImplementedResponseBody(body *ListOrdersNotImplementedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersServiceUnavailableResponseBody runs the validations
// defined on list_orders_service_unavailable_response_body
func ValidateListOrdersServiceUnavailableResponseBody(body *ListOrdersServiceUnavailableResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListOrdersGatewayTimeoutResponseBody runs the validations defined on
// list_orders_gateway_timeout_response_body
func ValidateListOrdersGatewayTimeoutResponseBody(body *ListOrdersGatewayTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLineItemRequestBodyRequestBody runs the validations defined on
// LineItemRequestBodyRequestBody
func ValidateLineItemRequestBodyRequestBody(body *LineItemRequestBodyRequestBody) (err error) {
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.IntakeFormAnswers != nil {
		if err2 := ValidateIntakeFormAnswersRequestBodyRequestBody(body.IntakeFormAnswers); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WarningReason != nil {
		if !(*body.WarningReason == "UNSPECIFIED_WARNING_REASON" || *body.WarningReason == "PRICE_INCREASE" || *body.WarningReason == "PRICE_DECREASE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.warning_reason", *body.WarningReason, []interface{}{"UNSPECIFIED_WARNING_REASON", "PRICE_INCREASE", "PRICE_DECREASE"}))
		}
	}
	return
}

// ValidateIntakeFormAnswersRequestBodyRequestBody runs the validations defined
// on IntakeFormAnswersRequestBodyRequestBody
func ValidateIntakeFormAnswersRequestBodyRequestBody(body *IntakeFormAnswersRequestBodyRequestBody) (err error) {
	if body.Answer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answer", "body"))
	}
	return
}

// ValidateIntakeFormFieldAnswerRequestBodyRequestBody runs the validations
// defined on IntakeFormFieldAnswerRequestBodyRequestBody
func ValidateIntakeFormFieldAnswerRequestBodyRequestBody(body *IntakeFormFieldAnswerRequestBodyRequestBody) (err error) {
	if body.Response == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
	}
	return
}

// ValidateOrderFulfillabilityResponseBody runs the validations defined on
// OrderFulfillabilityResponseBody
func ValidateOrderFulfillabilityResponseBody(body *OrderFulfillabilityResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	if body.ItemFulfillability == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item_fulfillability", "body"))
	}
	if body.Result != nil {
		if !(*body.Result == "ORDER_FULFILLABILITY_RESULT_UNSPECIFIED" || *body.Result == "CAN_FULFILL" || *body.Result == "UNFULFILLABLE_LINE_ITEM" || *body.Result == "UNFULFILLABLE_SERVICE_COMBINATION" || *body.Result == "ORDER_UNFULFILLABLE_OTHER_REASON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.result", *body.Result, []interface{}{"ORDER_FULFILLABILITY_RESULT_UNSPECIFIED", "CAN_FULFILL", "UNFULFILLABLE_LINE_ITEM", "UNFULFILLABLE_SERVICE_COMBINATION", "ORDER_UNFULFILLABLE_OTHER_REASON"}))
		}
	}
	for _, e := range body.ItemFulfillability {
		if e != nil {
			if err2 := ValidateLineItemFulfillabilityResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLineItemFulfillabilityResponseBody runs the validations defined on
// LineItemFulfillabilityResponseBody
func ValidateLineItemFulfillabilityResponseBody(body *LineItemFulfillabilityResponseBody) (err error) {
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	if body.Item != nil {
		if err2 := ValidateLineItemResponseBody(body.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Result != nil {
		if !(*body.Result == "ITEM_FULFILLABILITY_RESULT_UNSPECIFIED" || *body.Result == "CAN_FULFILL" || *body.Result == "SLOT_UNAVAILABLE" || *body.Result == "CHILD_TICKETS_WITHOUT_ADULT" || *body.Result == "UNFULFILLABLE_TICKET_COMBINATION" || *body.Result == "INCORRECT_PRICE" || *body.Result == "TICKET_CONSTRAINT_VIOLATED" || *body.Result == "ITEM_UNFULFILLABLE_OTHER_REASON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.result", *body.Result, []interface{}{"ITEM_FULFILLABILITY_RESULT_UNSPECIFIED", "CAN_FULFILL", "SLOT_UNAVAILABLE", "CHILD_TICKETS_WITHOUT_ADULT", "UNFULFILLABLE_TICKET_COMBINATION", "INCORRECT_PRICE", "TICKET_CONSTRAINT_VIOLATED", "ITEM_UNFULFILLABLE_OTHER_REASON"}))
		}
	}
	if body.Availability != nil {
		if err2 := ValidateUpdatedAvailabilityResponseBody(body.Availability); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.TicketType {
		if e != nil {
			if err2 := ValidateTicketTypeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.ViolatedTicketConstraint {
		if e != nil {
			if err2 := ValidateViolatedTicketConstraintResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLineItemResponseBody runs the validations defined on
// LineItemResponseBody
func ValidateLineItemResponseBody(body *LineItemResponseBody) (err error) {
	if body.ServiceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_id", "body"))
	}
	if body.StartSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_sec", "body"))
	}
	if body.DurationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration_sec", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	for _, e := range body.Tickets {
		if e != nil {
			if err2 := ValidateOrderedTicketsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceResponseBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.IntakeFormAnswers != nil {
		if err2 := ValidateIntakeFormAnswersResponseBody(body.IntakeFormAnswers); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WarningReason != nil {
		if !(*body.WarningReason == "UNSPECIFIED_WARNING_REASON" || *body.WarningReason == "PRICE_INCREASE" || *body.WarningReason == "PRICE_DECREASE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.warning_reason", *body.WarningReason, []interface{}{"UNSPECIFIED_WARNING_REASON", "PRICE_INCREASE", "PRICE_DECREASE"}))
		}
	}
	return
}

// ValidateOrderedTicketsResponseBody runs the validations defined on
// OrderedTicketsResponseBody
func ValidateOrderedTicketsResponseBody(body *OrderedTicketsResponseBody) (err error) {
	if body.TicketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ticket_id", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}

// ValidatePriceResponseBody runs the validations defined on PriceResponseBody
func ValidatePriceResponseBody(body *PriceResponseBody) (err error) {
	if body.PriceMicros == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price_micros", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_code", "body"))
	}
	return
}

// ValidateIntakeFormAnswersResponseBody runs the validations defined on
// IntakeFormAnswersResponseBody
func ValidateIntakeFormAnswersResponseBody(body *IntakeFormAnswersResponseBody) (err error) {
	if body.Answer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answer", "body"))
	}
	for _, e := range body.Answer {
		if e != nil {
			if err2 := ValidateIntakeFormFieldAnswerResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateIntakeFormFieldAnswerResponseBody runs the validations defined on
// IntakeFormFieldAnswerResponseBody
func ValidateIntakeFormFieldAnswerResponseBody(body *IntakeFormFieldAnswerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Response == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
	}
	return
}

// ValidateUpdatedAvailabilityResponseBody runs the validations defined on
// UpdatedAvailabilityResponseBody
func ValidateUpdatedAvailabilityResponseBody(body *UpdatedAvailabilityResponseBody) (err error) {
	if body.SpotsOpen == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spots_open", "body"))
	}
	return
}

// ValidateTicketTypeResponseBody runs the validations defined on
// TicketTypeResponseBody
func ValidateTicketTypeResponseBody(body *TicketTypeResponseBody) (err error) {
	if body.TicketTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ticket_type_id", "body"))
	}
	if body.ShortDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("short_description", "body"))
	}
	if body.LocalizedShortDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("localized_short_description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.OptionDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_description", "body"))
	}
	if body.LocalizedShortDescription != nil {
		if err2 := ValidateTextResponseBody(body.LocalizedShortDescription); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceResponseBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PerTicketFee != nil {
		if err2 := ValidatePerTicketFeeResponseBody(body.PerTicketFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.LocalizedOptionDescription != nil {
		if err2 := ValidateTextResponseBody(body.LocalizedOptionDescription); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTextResponseBody runs the validations defined on TextResponseBody
func ValidateTextResponseBody(body *TextResponseBody) (err error) {
	for _, e := range body.LocalizedValue {
		if e != nil {
			if err2 := ValidateLocalizedStringResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLocalizedStringResponseBody runs the validations defined on
// LocalizedStringResponseBody
func ValidateLocalizedStringResponseBody(body *LocalizedStringResponseBody) (err error) {
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}

// ValidatePerTicketFeeResponseBody runs the validations defined on
// PerTicketFeeResponseBody
func ValidatePerTicketFeeResponseBody(body *PerTicketFeeResponseBody) (err error) {
	if body.ServiceCharge == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_charge", "body"))
	}
	if body.FacilityFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("facility_fee", "body"))
	}
	if body.Taxes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taxes", "body"))
	}
	if body.ServiceCharge != nil {
		if err2 := ValidatePriceResponseBody(body.ServiceCharge); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FacilityFee != nil {
		if err2 := ValidatePriceResponseBody(body.FacilityFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Taxes != nil {
		if err2 := ValidatePriceResponseBody(body.Taxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateViolatedTicketConstraintResponseBody runs the validations defined on
// ViolatedTicketConstraintResponseBody
func ValidateViolatedTicketConstraintResponseBody(body *ViolatedTicketConstraintResponseBody) (err error) {
	if body.MinTicketCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_ticket_count", "body"))
	}
	if body.MaxTicketCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("max_ticket_count", "body"))
	}
	if body.TicketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ticket_id", "body"))
	}
	return
}

// ValidateFeesResponseBody runs the validations defined on FeesResponseBody
func ValidateFeesResponseBody(body *FeesResponseBody) (err error) {
	if body.PerTicketFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("per_ticket_fee", "body"))
	}
	if body.PerOrderFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("per_order_fee", "body"))
	}
	for _, e := range body.PerTicketFee {
		if e != nil {
			if err2 := ValidateSpecificPerTicketFeeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.PerOrderFee {
		if e != nil {
			if err2 := ValidateSpecificPerOrderFeeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSpecificPerTicketFeeResponseBody runs the validations defined on
// SpecificPerTicketFeeResponseBody
func ValidateSpecificPerTicketFeeResponseBody(body *SpecificPerTicketFeeResponseBody) (err error) {
	if body.TicketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ticket_id", "body"))
	}
	if body.ServiceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_id", "body"))
	}
	if body.FeeName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_name", "body"))
	}
	if body.FeeAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_amount", "body"))
	}
	if body.FeeAmount != nil {
		if err2 := ValidatePriceResponseBody(body.FeeAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSpecificPerOrderFeeResponseBody runs the validations defined on
// SpecificPerOrderFeeResponseBody
func ValidateSpecificPerOrderFeeResponseBody(body *SpecificPerOrderFeeResponseBody) (err error) {
	if body.FeeName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_name", "body"))
	}
	if body.FeeAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_amount", "body"))
	}
	if body.FeeAmount != nil {
		if err2 := ValidatePriceResponseBody(body.FeeAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrderRequestBodyRequestBody runs the validations defined on
// OrderRequestBodyRequestBody
func ValidateOrderRequestBodyRequestBody(body *OrderRequestBodyRequestBody) (err error) {
	if body.UserInformation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Item {
		if e != nil {
			if err2 := ValidateLineItemRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePaymentInformationRequestBodyRequestBody runs the validations
// defined on PaymentInformationRequestBodyRequestBody
func ValidatePaymentInformationRequestBodyRequestBody(body *PaymentInformationRequestBodyRequestBody) (err error) {
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if !(body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeRequestBodyRequestBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
	}
	return
}

// ValidateDepositRequestBodyRequestBody runs the validations defined on
// DepositRequestBodyRequestBody
func ValidateDepositRequestBodyRequestBody(body *DepositRequestBodyRequestBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if !(body.DepositType == "FIXED_RATE_DEFAULT" || body.DepositType == "PER_PERSON") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
	}
	return
}

// ValidateNoShowFeeRequestBodyRequestBody runs the validations defined on
// NoShowFeeRequestBodyRequestBody
func ValidateNoShowFeeRequestBodyRequestBody(body *NoShowFeeRequestBodyRequestBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if !(body.FeeType == "FIXED_RATE_DEFAULT" || body.FeeType == "PER_PERSON") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
	}
	return
}

// ValidatePaymentProcessingParametersRequestBodyRequestBody runs the
// validations defined on PaymentProcessingParametersRequestBodyRequestBody
func ValidatePaymentProcessingParametersRequestBodyRequestBody(body *PaymentProcessingParametersRequestBodyRequestBody) (err error) {
	if !(body.Processor == "PAYMENT_PROCESSOR_UNSPECIFIED" || body.Processor == "PROCESSOR_STRIPE" || body.Processor == "PROCESSOR_BRAINTREE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.processor", body.Processor, []interface{}{"PAYMENT_PROCESSOR_UNSPECIFIED", "PROCESSOR_STRIPE", "PROCESSOR_BRAINTREE"}))
	}
	if body.TokenizationConfig != nil {
		if err2 := ValidateTokenizationConfigRequestBodyRequestBody(body.TokenizationConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenizationConfigRequestBodyRequestBody runs the validations
// defined on TokenizationConfigRequestBodyRequestBody
func ValidateTokenizationConfigRequestBodyRequestBody(body *TokenizationConfigRequestBodyRequestBody) (err error) {
	if body.TokenizationParameter == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tokenization_parameter", "body"))
	}
	if body.CardNetworkParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network_parameters", "body"))
	}
	if body.AllowedAuthMethods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_auth_methods", "body"))
	}
	if !(body.BillingInformationFormat == "BILLING_INFORMATION_FORMAT_UNSPECIFIED" || body.BillingInformationFormat == "MIN" || body.BillingInformationFormat == "FULL") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.billing_information_format", body.BillingInformationFormat, []interface{}{"BILLING_INFORMATION_FORMAT_UNSPECIFIED", "MIN", "FULL"}))
	}
	for _, e := range body.CardNetworkParameters {
		if e != nil {
			if err2 := ValidateCardNetworkParametersRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.AllowedAuthMethods {
		if !(e == "AUTH_METHOD_UNSPECIFIED" || e == "PAN_ONLY" || e == "CRYPTOGRAM_3DS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.allowed_auth_methods[*]", e, []interface{}{"AUTH_METHOD_UNSPECIFIED", "PAN_ONLY", "CRYPTOGRAM_3DS"}))
		}
	}
	return
}

// ValidateCardNetworkParametersRequestBodyRequestBody runs the validations
// defined on CardNetworkParametersRequestBodyRequestBody
func ValidateCardNetworkParametersRequestBodyRequestBody(body *CardNetworkParametersRequestBodyRequestBody) (err error) {
	if !(body.CardNetwork == "CREDIT_CARD_TYPE_UNSPECIFIED" || body.CardNetwork == "VISA" || body.CardNetwork == "MASTERCARD" || body.CardNetwork == "AMERICAN_EXPRESS" || body.CardNetwork == "DISCOVER" || body.CardNetwork == "JCB") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.card_network", body.CardNetwork, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
	}
	return
}

// ValidateOrderResponseBody runs the validations defined on OrderResponseBody
func ValidateOrderResponseBody(body *OrderResponseBody) (err error) {
	if body.UserInformation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
	}
	if body.UserInformation != nil {
		if err2 := ValidateUserInformationResponseBody(body.UserInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationResponseBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Item {
		if e != nil {
			if err2 := ValidateLineItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUserInformationResponseBody runs the validations defined on
// UserInformationResponseBody
func ValidateUserInformationResponseBody(body *UserInformationResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.GivenName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("given_name", "body"))
	}
	if body.FamilyName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("family_name", "body"))
	}
	if body.Telephone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("telephone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Address != nil {
		if err2 := ValidatePostalAddressResponseBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePostalAddressResponseBody runs the validations defined on
// PostalAddressResponseBody
func ValidatePostalAddressResponseBody(body *PostalAddressResponseBody) (err error) {
	if body.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country", "body"))
	}
	if body.Locality == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locality", "body"))
	}
	if body.PostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postal_code", "body"))
	}
	if body.StreetAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("street_address", "body"))
	}
	return
}

// ValidatePaymentInformationResponseBody runs the validations defined on
// PaymentInformationResponseBody
func ValidatePaymentInformationResponseBody(body *PaymentInformationResponseBody) (err error) {
	if body.PrepaymentStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prepayment_status", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.PaymentProcessedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processed_by", "body"))
	}
	if body.PrepaymentStatus != nil {
		if !(*body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || *body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || *body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", *body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceResponseBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.TaxAmount != nil {
		if err2 := ValidatePriceResponseBody(body.TaxAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Fees != nil {
		if err2 := ValidatePriceResponseBody(body.Fees); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeesAndTaxes != nil {
		if err2 := ValidatePriceResponseBody(body.FeesAndTaxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositResponseBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeResponseBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessedBy != nil {
		if !(*body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || *body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || *body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", *body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
		}
	}
	return
}

// ValidateDepositResponseBody runs the validations defined on
// DepositResponseBody
func ValidateDepositResponseBody(body *DepositResponseBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if body.MinAdvanceCancellationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_advance_cancellation_sec", "body"))
	}
	if body.DepositType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit_type", "body"))
	}
	if body.Deposit != nil {
		if err2 := ValidatePriceResponseBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DepositType != nil {
		if !(*body.DepositType == "FIXED_RATE_DEFAULT" || *body.DepositType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", *body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateNoShowFeeResponseBody runs the validations defined on
// NoShowFeeResponseBody
func ValidateNoShowFeeResponseBody(body *NoShowFeeResponseBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if body.FeeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_type", "body"))
	}
	if body.Fee != nil {
		if err2 := ValidatePriceResponseBody(body.Fee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeeType != nil {
		if !(*body.FeeType == "FIXED_RATE_DEFAULT" || *body.FeeType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", *body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateOrderFailureResponseBody runs the validations defined on
// OrderFailureResponseBody
func ValidateOrderFailureResponseBody(body *OrderFailureResponseBody) (err error) {
	if body.Cause == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cause", "body"))
	}
	if body.Cause != nil {
		if !(*body.Cause == "CAUSE_UNSPECIFIED" || *body.Cause == "ORDER_UNFULFILLABLE" || *body.Cause == "PAYMENT_ERROR_CARD_TYPE_REJECTED" || *body.Cause == "PAYMENT_ERROR_CARD_DECLINED" || *body.Cause == "PAYMENT_ERROR" || *body.Cause == "INCORRECT_FEE_TOTAL" || *body.Cause == "PAYMENT_REQUIRES_3DS1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.cause", *body.Cause, []interface{}{"CAUSE_UNSPECIFIED", "ORDER_UNFULFILLABLE", "PAYMENT_ERROR_CARD_TYPE_REJECTED", "PAYMENT_ERROR_CARD_DECLINED", "PAYMENT_ERROR", "INCORRECT_FEE_TOTAL", "PAYMENT_REQUIRES_3DS1"}))
		}
	}
	if body.Fulfillability != nil {
		if err2 := ValidateOrderFulfillabilityResponseBody(body.Fulfillability); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.RejectedCardType != nil {
		if !(*body.RejectedCardType == "CREDIT_CARD_TYPE_UNSPECIFIED" || *body.RejectedCardType == "VISA" || *body.RejectedCardType == "MASTERCARD" || *body.RejectedCardType == "AMERICAN_EXPRESS" || *body.RejectedCardType == "DISCOVER" || *body.RejectedCardType == "JCB") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.rejected_card_type", *body.RejectedCardType, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
		}
	}
	if body.PaymentFailure != nil {
		if err2 := ValidatePaymentFailureInformationResponseBody(body.PaymentFailure); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePaymentFailureInformationResponseBody runs the validations defined
// on PaymentFailureInformationResponseBody
func ValidatePaymentFailureInformationResponseBody(body *PaymentFailureInformationResponseBody) (err error) {
	if body.Threeds1Parameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("threeds1_parameters", "body"))
	}
	if body.Threeds1Parameters != nil {
		if err2 := ValidateThreeDS1ParametersResponseBody(body.Threeds1Parameters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateThreeDS1ParametersResponseBody runs the validations defined on
// ThreeDS1ParametersResponseBody
func ValidateThreeDS1ParametersResponseBody(body *ThreeDS1ParametersResponseBody) (err error) {
	if body.AcsURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acs_url", "body"))
	}
	if body.PaReq == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pa_req", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transaction_id", "body"))
	}
	if body.MdMerchantData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("md_merchant_data", "body"))
	}
	return
}
