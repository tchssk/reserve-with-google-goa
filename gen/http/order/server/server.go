// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order HTTP server
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package server

import (
	"context"
	"net/http"

	order "github.com/tchssk/reserve-with-google-goa/gen/order"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the order service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	CheckOrderFulfillability http.Handler
	CreateOrder              http.Handler
	ListOrders               http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the order service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *order.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CheckOrderFulfillability", "POST", "/v3/CheckOrderFulfillability"},
			{"CreateOrder", "POST", "/v3/CreateOrder"},
			{"ListOrders", "POST", "/v3/ListOrders"},
		},
		CheckOrderFulfillability: NewCheckOrderFulfillabilityHandler(e.CheckOrderFulfillability, mux, decoder, encoder, errhandler, formatter),
		CreateOrder:              NewCreateOrderHandler(e.CreateOrder, mux, decoder, encoder, errhandler, formatter),
		ListOrders:               NewListOrdersHandler(e.ListOrders, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "order" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CheckOrderFulfillability = m(s.CheckOrderFulfillability)
	s.CreateOrder = m(s.CreateOrder)
	s.ListOrders = m(s.ListOrders)
}

// Mount configures the mux to serve the order endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCheckOrderFulfillabilityHandler(mux, h.CheckOrderFulfillability)
	MountCreateOrderHandler(mux, h.CreateOrder)
	MountListOrdersHandler(mux, h.ListOrders)
}

// MountCheckOrderFulfillabilityHandler configures the mux to serve the "order"
// service "check_order_fulfillability" endpoint.
func MountCheckOrderFulfillabilityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/CheckOrderFulfillability", f)
}

// NewCheckOrderFulfillabilityHandler creates a HTTP handler which loads the
// HTTP request and calls the "order" service "check_order_fulfillability"
// endpoint.
func NewCheckOrderFulfillabilityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCheckOrderFulfillabilityRequest(mux, decoder)
		encodeResponse = EncodeCheckOrderFulfillabilityResponse(encoder)
		encodeError    = EncodeCheckOrderFulfillabilityError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "check_order_fulfillability")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateOrderHandler configures the mux to serve the "order" service
// "create_order" endpoint.
func MountCreateOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/CreateOrder", f)
}

// NewCreateOrderHandler creates a HTTP handler which loads the HTTP request
// and calls the "order" service "create_order" endpoint.
func NewCreateOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateOrderRequest(mux, decoder)
		encodeResponse = EncodeCreateOrderResponse(encoder)
		encodeError    = EncodeCreateOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_order")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListOrdersHandler configures the mux to serve the "order" service
// "list_orders" endpoint.
func MountListOrdersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v3/ListOrders", f)
}

// NewListOrdersHandler creates a HTTP handler which loads the HTTP request and
// calls the "order" service "list_orders" endpoint.
func NewListOrdersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListOrdersRequest(mux, decoder)
		encodeResponse = EncodeListOrdersResponse(encoder)
		encodeError    = EncodeListOrdersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_orders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "order")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
