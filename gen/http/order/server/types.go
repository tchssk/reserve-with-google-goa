// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order HTTP server types
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package server

import (
	order "github.com/tchssk/reserve-with-google-goa/gen/order"
	goa "goa.design/goa/v3/pkg"
)

// CheckOrderFulfillabilityRequestBody is the type of the "order" service
// "check_order_fulfillability" endpoint HTTP request body.
type CheckOrderFulfillabilityRequestBody struct {
	MerchantID *string                           `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	Item       []*LineItemRequestBodyRequestBody `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
	CartID     *string                           `form:"cart_id,omitempty" json:"cart_id,omitempty" xml:"cart_id,omitempty"`
}

// CreateOrderRequestBody is the type of the "order" service "create_order"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	Order                       *OrderRequestBodyRequestBody                       `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	PaymentProcessingParameters *PaymentProcessingParametersRequestBodyRequestBody `form:"payment_processing_parameters,omitempty" json:"payment_processing_parameters,omitempty" xml:"payment_processing_parameters,omitempty"`
	IdempotencyToken            *string                                            `form:"idempotency_token,omitempty" json:"idempotency_token,omitempty" xml:"idempotency_token,omitempty"`
}

// ListOrdersRequestBody is the type of the "order" service "list_orders"
// endpoint HTTP request body.
type ListOrdersRequestBody struct {
	UserID   *string                         `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	OrderIds *OrderIdsRequestBodyRequestBody `form:"order_ids,omitempty" json:"order_ids,omitempty" xml:"order_ids,omitempty"`
}

// CheckOrderFulfillabilityResponseBody is the type of the "order" service
// "check_order_fulfillability" endpoint HTTP response body.
type CheckOrderFulfillabilityResponseBody struct {
	Fulfillability    *OrderFulfillabilityResponseBody `form:"fulfillability,omitempty" json:"fulfillability,omitempty" xml:"fulfillability,omitempty"`
	FeesAndTaxes      *PriceResponseBody               `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Fees              *FeesResponseBody                `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	CartExpirationSec *int64                           `form:"cart_expiration_sec,omitempty" json:"cart_expiration_sec,omitempty" xml:"cart_expiration_sec,omitempty"`
}

// CreateOrderResponseBody is the type of the "order" service "create_order"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	Order        *OrderResponseBody        `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	OrderFailure *OrderFailureResponseBody `form:"order_failure,omitempty" json:"order_failure,omitempty" xml:"order_failure,omitempty"`
}

// ListOrdersResponseBody is the type of the "order" service "list_orders"
// endpoint HTTP response body.
type ListOrdersResponseBody struct {
	Order []*OrderResponseBody `form:"order" json:"order" xml:"order"`
}

// CheckOrderFulfillabilityBadRequestResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "bad_request" error.
type CheckOrderFulfillabilityBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityUnauthorizedResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "unauthorized" error.
type CheckOrderFulfillabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityForbiddenResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "forbidden" error.
type CheckOrderFulfillabilityForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityNotFoundResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "not_found" error.
type CheckOrderFulfillabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityConflictResponseBody is the type of the "order"
// service "check_order_fulfillability" endpoint HTTP response body for the
// "conflict" error.
type CheckOrderFulfillabilityConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityTooManyRequestsResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "too_many_requests" error.
type CheckOrderFulfillabilityTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityClientClosedRequestResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "client_closed_request" error.
type CheckOrderFulfillabilityClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityInternalServerErrorResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "internal_server_error" error.
type CheckOrderFulfillabilityInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityNotImplementedResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "not_implemented" error.
type CheckOrderFulfillabilityNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityServiceUnavailableResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "service_unavailable" error.
type CheckOrderFulfillabilityServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckOrderFulfillabilityGatewayTimeoutResponseBody is the type of the
// "order" service "check_order_fulfillability" endpoint HTTP response body for
// the "gateway_timeout" error.
type CheckOrderFulfillabilityGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderBadRequestResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "bad_request" error.
type CreateOrderBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderUnauthorizedResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "unauthorized" error.
type CreateOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderForbiddenResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "forbidden" error.
type CreateOrderForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderNotFoundResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "not_found" error.
type CreateOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderConflictResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "conflict" error.
type CreateOrderConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderTooManyRequestsResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "too_many_requests" error.
type CreateOrderTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderClientClosedRequestResponseBody is the type of the "order"
// service "create_order" endpoint HTTP response body for the
// "client_closed_request" error.
type CreateOrderClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderInternalServerErrorResponseBody is the type of the "order"
// service "create_order" endpoint HTTP response body for the
// "internal_server_error" error.
type CreateOrderInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderNotImplementedResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "not_implemented" error.
type CreateOrderNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderServiceUnavailableResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "service_unavailable"
// error.
type CreateOrderServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderGatewayTimeoutResponseBody is the type of the "order" service
// "create_order" endpoint HTTP response body for the "gateway_timeout" error.
type CreateOrderGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersBadRequestResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "bad_request" error.
type ListOrdersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersUnauthorizedResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "unauthorized" error.
type ListOrdersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersForbiddenResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "forbidden" error.
type ListOrdersForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersNotFoundResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "not_found" error.
type ListOrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersConflictResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "conflict" error.
type ListOrdersConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersTooManyRequestsResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "too_many_requests" error.
type ListOrdersTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersClientClosedRequestResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "client_closed_request"
// error.
type ListOrdersClientClosedRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersInternalServerErrorResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "internal_server_error"
// error.
type ListOrdersInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersNotImplementedResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "not_implemented" error.
type ListOrdersNotImplementedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersServiceUnavailableResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "service_unavailable"
// error.
type ListOrdersServiceUnavailableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListOrdersGatewayTimeoutResponseBody is the type of the "order" service
// "list_orders" endpoint HTTP response body for the "gateway_timeout" error.
type ListOrdersGatewayTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrderFulfillabilityResponseBody is used to define fields on response body
// types.
type OrderFulfillabilityResponseBody struct {
	Result              string                                `form:"result" json:"result" xml:"result"`
	ItemFulfillability  []*LineItemFulfillabilityResponseBody `form:"item_fulfillability" json:"item_fulfillability" xml:"item_fulfillability"`
	UnfulfillableReason *string                               `form:"unfulfillable_reason,omitempty" json:"unfulfillable_reason,omitempty" xml:"unfulfillable_reason,omitempty"`
}

// LineItemFulfillabilityResponseBody is used to define fields on response body
// types.
type LineItemFulfillabilityResponseBody struct {
	Item                     *LineItemResponseBody                   `form:"item" json:"item" xml:"item"`
	Result                   string                                  `form:"result" json:"result" xml:"result"`
	UnfulfillableReason      *string                                 `form:"unfulfillable_reason,omitempty" json:"unfulfillable_reason,omitempty" xml:"unfulfillable_reason,omitempty"`
	Availability             *UpdatedAvailabilityResponseBody        `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
	TicketType               []*TicketTypeResponseBody               `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	ViolatedTicketConstraint []*ViolatedTicketConstraintResponseBody `form:"violated_ticket_constraint,omitempty" json:"violated_ticket_constraint,omitempty" xml:"violated_ticket_constraint,omitempty"`
}

// LineItemResponseBody is used to define fields on response body types.
type LineItemResponseBody struct {
	ServiceID         string                         `form:"service_id" json:"service_id" xml:"service_id"`
	StartSec          int64                          `form:"start_sec" json:"start_sec" xml:"start_sec"`
	DurationSec       int64                          `form:"duration_sec" json:"duration_sec" xml:"duration_sec"`
	Tickets           []*OrderedTicketsResponseBody  `form:"tickets,omitempty" json:"tickets,omitempty" xml:"tickets,omitempty"`
	Price             *PriceResponseBody             `form:"price" json:"price" xml:"price"`
	Status            *string                        `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	IntakeFormAnswers *IntakeFormAnswersResponseBody `form:"intake_form_answers,omitempty" json:"intake_form_answers,omitempty" xml:"intake_form_answers,omitempty"`
	WarningReason     *string                        `form:"warning_reason,omitempty" json:"warning_reason,omitempty" xml:"warning_reason,omitempty"`
}

// OrderedTicketsResponseBody is used to define fields on response body types.
type OrderedTicketsResponseBody struct {
	TicketID string `form:"ticket_id" json:"ticket_id" xml:"ticket_id"`
	Count    int32  `form:"count" json:"count" xml:"count"`
}

// PriceResponseBody is used to define fields on response body types.
type PriceResponseBody struct {
	PriceMicros      int64   `form:"price_micros" json:"price_micros" xml:"price_micros"`
	CurrencyCode     string  `form:"currency_code" json:"currency_code" xml:"currency_code"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// IntakeFormAnswersResponseBody is used to define fields on response body
// types.
type IntakeFormAnswersResponseBody struct {
	Answer []*IntakeFormFieldAnswerResponseBody `form:"answer,omitempty" json:"answer,omitempty" xml:"answer,omitempty"`
}

// IntakeFormFieldAnswerResponseBody is used to define fields on response body
// types.
type IntakeFormFieldAnswerResponseBody struct {
	ID       string   `form:"id" json:"id" xml:"id"`
	Response []string `form:"response" json:"response" xml:"response"`
}

// UpdatedAvailabilityResponseBody is used to define fields on response body
// types.
type UpdatedAvailabilityResponseBody struct {
	SpotsOpen int32 `form:"spots_open" json:"spots_open" xml:"spots_open"`
}

// TicketTypeResponseBody is used to define fields on response body types.
type TicketTypeResponseBody struct {
	TicketTypeID               string                    `form:"ticket_type_id" json:"ticket_type_id" xml:"ticket_type_id"`
	ShortDescription           string                    `form:"short_description" json:"short_description" xml:"short_description"`
	LocalizedShortDescription  *TextResponseBody         `form:"localized_short_description" json:"localized_short_description" xml:"localized_short_description"`
	Price                      *PriceResponseBody        `form:"price" json:"price" xml:"price"`
	PerTicketFee               *PerTicketFeeResponseBody `form:"per_ticket_fee,omitempty" json:"per_ticket_fee,omitempty" xml:"per_ticket_fee,omitempty"`
	OptionDescription          string                    `form:"option_description" json:"option_description" xml:"option_description"`
	LocalizedOptionDescription *TextResponseBody         `form:"localized_option_description,omitempty" json:"localized_option_description,omitempty" xml:"localized_option_description,omitempty"`
}

// TextResponseBody is used to define fields on response body types.
type TextResponseBody struct {
	Value          *string                        `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	LocalizedValue []*LocalizedStringResponseBody `form:"localized_value,omitempty" json:"localized_value,omitempty" xml:"localized_value,omitempty"`
}

// LocalizedStringResponseBody is used to define fields on response body types.
type LocalizedStringResponseBody struct {
	Locale string `form:"locale" json:"locale" xml:"locale"`
	Value  string `form:"value" json:"value" xml:"value"`
}

// PerTicketFeeResponseBody is used to define fields on response body types.
type PerTicketFeeResponseBody struct {
	ServiceCharge *PriceResponseBody `form:"service_charge" json:"service_charge" xml:"service_charge"`
	FacilityFee   *PriceResponseBody `form:"facility_fee" json:"facility_fee" xml:"facility_fee"`
	Taxes         *PriceResponseBody `form:"taxes" json:"taxes" xml:"taxes"`
}

// ViolatedTicketConstraintResponseBody is used to define fields on response
// body types.
type ViolatedTicketConstraintResponseBody struct {
	MinTicketCount int32  `form:"min_ticket_count" json:"min_ticket_count" xml:"min_ticket_count"`
	MaxTicketCount int32  `form:"max_ticket_count" json:"max_ticket_count" xml:"max_ticket_count"`
	TicketID       string `form:"ticket_id" json:"ticket_id" xml:"ticket_id"`
}

// FeesResponseBody is used to define fields on response body types.
type FeesResponseBody struct {
	PerTicketFee []*SpecificPerTicketFeeResponseBody `form:"per_ticket_fee" json:"per_ticket_fee" xml:"per_ticket_fee"`
	PerOrderFee  []*SpecificPerOrderFeeResponseBody  `form:"per_order_fee" json:"per_order_fee" xml:"per_order_fee"`
}

// SpecificPerTicketFeeResponseBody is used to define fields on response body
// types.
type SpecificPerTicketFeeResponseBody struct {
	TicketID  string             `form:"ticket_id" json:"ticket_id" xml:"ticket_id"`
	ServiceID string             `form:"service_id" json:"service_id" xml:"service_id"`
	FeeName   string             `form:"fee_name" json:"fee_name" xml:"fee_name"`
	FeeAmount *PriceResponseBody `form:"fee_amount" json:"fee_amount" xml:"fee_amount"`
}

// SpecificPerOrderFeeResponseBody is used to define fields on response body
// types.
type SpecificPerOrderFeeResponseBody struct {
	FeeName   string             `form:"fee_name" json:"fee_name" xml:"fee_name"`
	FeeAmount *PriceResponseBody `form:"fee_amount" json:"fee_amount" xml:"fee_amount"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	OrderID            *string                         `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserInformation    *UserInformationResponseBody    `form:"user_information" json:"user_information" xml:"user_information"`
	PaymentInformation *PaymentInformationResponseBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	MerchantID         *string                         `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	Item               []*LineItemResponseBody         `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// UserInformationResponseBody is used to define fields on response body types.
type UserInformationResponseBody struct {
	UserID       string                     `form:"user_id" json:"user_id" xml:"user_id"`
	GivenName    string                     `form:"given_name" json:"given_name" xml:"given_name"`
	FamilyName   string                     `form:"family_name" json:"family_name" xml:"family_name"`
	Address      *PostalAddressResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    string                     `form:"telephone" json:"telephone" xml:"telephone"`
	Email        string                     `form:"email" json:"email" xml:"email"`
	LanguageCode *string                    `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressResponseBody is used to define fields on response body types.
type PostalAddressResponseBody struct {
	Country       string  `form:"country" json:"country" xml:"country"`
	Locality      string  `form:"locality" json:"locality" xml:"locality"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    string  `form:"postal_code" json:"postal_code" xml:"postal_code"`
	StreetAddress string  `form:"street_address" json:"street_address" xml:"street_address"`
}

// PaymentInformationResponseBody is used to define fields on response body
// types.
type PaymentInformationResponseBody struct {
	PrepaymentStatus     string                 `form:"prepayment_status" json:"prepayment_status" xml:"prepayment_status"`
	PaymentTransactionID *string                `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceResponseBody     `form:"price" json:"price" xml:"price"`
	TaxAmount            *PriceResponseBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceResponseBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceResponseBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositResponseBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeResponseBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   string                 `form:"payment_processed_by" json:"payment_processed_by" xml:"payment_processed_by"`
	PaymentOptionID      *string                `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// DepositResponseBody is used to define fields on response body types.
type DepositResponseBody struct {
	Deposit                   *PriceResponseBody `form:"deposit" json:"deposit" xml:"deposit"`
	MinAdvanceCancellationSec int64              `form:"min_advance_cancellation_sec" json:"min_advance_cancellation_sec" xml:"min_advance_cancellation_sec"`
	DepositType               string             `form:"deposit_type" json:"deposit_type" xml:"deposit_type"`
}

// NoShowFeeResponseBody is used to define fields on response body types.
type NoShowFeeResponseBody struct {
	Fee     *PriceResponseBody `form:"fee" json:"fee" xml:"fee"`
	FeeType string             `form:"fee_type" json:"fee_type" xml:"fee_type"`
}

// OrderFailureResponseBody is used to define fields on response body types.
type OrderFailureResponseBody struct {
	Cause            string                                 `form:"cause" json:"cause" xml:"cause"`
	Fulfillability   *OrderFulfillabilityResponseBody       `form:"fulfillability,omitempty" json:"fulfillability,omitempty" xml:"fulfillability,omitempty"`
	RejectedCardType *string                                `form:"rejected_card_type,omitempty" json:"rejected_card_type,omitempty" xml:"rejected_card_type,omitempty"`
	Description      *string                                `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	PaymentFailure   *PaymentFailureInformationResponseBody `form:"payment_failure,omitempty" json:"payment_failure,omitempty" xml:"payment_failure,omitempty"`
}

// PaymentFailureInformationResponseBody is used to define fields on response
// body types.
type PaymentFailureInformationResponseBody struct {
	Threeds1Parameters *ThreeDS1ParametersResponseBody `form:"threeds1_parameters" json:"threeds1_parameters" xml:"threeds1_parameters"`
}

// ThreeDS1ParametersResponseBody is used to define fields on response body
// types.
type ThreeDS1ParametersResponseBody struct {
	AcsURL         string `form:"acs_url" json:"acs_url" xml:"acs_url"`
	PaReq          string `form:"pa_req" json:"pa_req" xml:"pa_req"`
	TransactionID  string `form:"transaction_id" json:"transaction_id" xml:"transaction_id"`
	MdMerchantData string `form:"md_merchant_data" json:"md_merchant_data" xml:"md_merchant_data"`
}

// LineItemRequestBodyRequestBody is used to define fields on request body
// types.
type LineItemRequestBodyRequestBody struct {
	ServiceID         *string                                  `form:"service_id,omitempty" json:"service_id,omitempty" xml:"service_id,omitempty"`
	StartSec          *int64                                   `form:"start_sec,omitempty" json:"start_sec,omitempty" xml:"start_sec,omitempty"`
	DurationSec       *int64                                   `form:"duration_sec,omitempty" json:"duration_sec,omitempty" xml:"duration_sec,omitempty"`
	Tickets           []*OrderedTicketsRequestBodyRequestBody  `form:"tickets,omitempty" json:"tickets,omitempty" xml:"tickets,omitempty"`
	Price             *PriceRequestBodyRequestBody             `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Status            *string                                  `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	IntakeFormAnswers *IntakeFormAnswersRequestBodyRequestBody `form:"intake_form_answers,omitempty" json:"intake_form_answers,omitempty" xml:"intake_form_answers,omitempty"`
	WarningReason     *string                                  `form:"warning_reason,omitempty" json:"warning_reason,omitempty" xml:"warning_reason,omitempty"`
}

// OrderedTicketsRequestBodyRequestBody is used to define fields on request
// body types.
type OrderedTicketsRequestBodyRequestBody struct {
	TicketID *string `form:"ticket_id,omitempty" json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	Count    *int32  `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// PriceRequestBodyRequestBody is used to define fields on request body types.
type PriceRequestBodyRequestBody struct {
	PriceMicros      *int64  `form:"price_micros,omitempty" json:"price_micros,omitempty" xml:"price_micros,omitempty"`
	CurrencyCode     *string `form:"currency_code,omitempty" json:"currency_code,omitempty" xml:"currency_code,omitempty"`
	PricingOptionTag *string `form:"pricing_option_tag,omitempty" json:"pricing_option_tag,omitempty" xml:"pricing_option_tag,omitempty"`
}

// IntakeFormAnswersRequestBodyRequestBody is used to define fields on request
// body types.
type IntakeFormAnswersRequestBodyRequestBody struct {
	Answer []*IntakeFormFieldAnswerRequestBodyRequestBody `form:"answer,omitempty" json:"answer,omitempty" xml:"answer,omitempty"`
}

// IntakeFormFieldAnswerRequestBodyRequestBody is used to define fields on
// request body types.
type IntakeFormFieldAnswerRequestBodyRequestBody struct {
	ID       *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Response []string `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// OrderRequestBodyRequestBody is used to define fields on request body types.
type OrderRequestBodyRequestBody struct {
	OrderID            *string                                   `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserInformation    *UserInformationRequestBodyRequestBody    `form:"user_information,omitempty" json:"user_information,omitempty" xml:"user_information,omitempty"`
	PaymentInformation *PaymentInformationRequestBodyRequestBody `form:"payment_information,omitempty" json:"payment_information,omitempty" xml:"payment_information,omitempty"`
	MerchantID         *string                                   `form:"merchant_id,omitempty" json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	Item               []*LineItemRequestBodyRequestBody         `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
}

// UserInformationRequestBodyRequestBody is used to define fields on request
// body types.
type UserInformationRequestBodyRequestBody struct {
	UserID       *string                              `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	GivenName    *string                              `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	FamilyName   *string                              `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	Address      *PostalAddressRequestBodyRequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Telephone    *string                              `form:"telephone,omitempty" json:"telephone,omitempty" xml:"telephone,omitempty"`
	Email        *string                              `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	LanguageCode *string                              `form:"language_code,omitempty" json:"language_code,omitempty" xml:"language_code,omitempty"`
}

// PostalAddressRequestBodyRequestBody is used to define fields on request body
// types.
type PostalAddressRequestBodyRequestBody struct {
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Locality      *string `form:"locality,omitempty" json:"locality,omitempty" xml:"locality,omitempty"`
	Region        *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	PostalCode    *string `form:"postal_code,omitempty" json:"postal_code,omitempty" xml:"postal_code,omitempty"`
	StreetAddress *string `form:"street_address,omitempty" json:"street_address,omitempty" xml:"street_address,omitempty"`
}

// PaymentInformationRequestBodyRequestBody is used to define fields on request
// body types.
type PaymentInformationRequestBodyRequestBody struct {
	PrepaymentStatus     *string                          `form:"prepayment_status,omitempty" json:"prepayment_status,omitempty" xml:"prepayment_status,omitempty"`
	PaymentTransactionID *string                          `form:"payment_transaction_id,omitempty" json:"payment_transaction_id,omitempty" xml:"payment_transaction_id,omitempty"`
	Price                *PriceRequestBodyRequestBody     `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	TaxAmount            *PriceRequestBodyRequestBody     `form:"tax_amount,omitempty" json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	Fees                 *PriceRequestBodyRequestBody     `form:"fees,omitempty" json:"fees,omitempty" xml:"fees,omitempty"`
	FeesAndTaxes         *PriceRequestBodyRequestBody     `form:"fees_and_taxes,omitempty" json:"fees_and_taxes,omitempty" xml:"fees_and_taxes,omitempty"`
	Deposit              *DepositRequestBodyRequestBody   `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	NoShowFee            *NoShowFeeRequestBodyRequestBody `form:"no_show_fee,omitempty" json:"no_show_fee,omitempty" xml:"no_show_fee,omitempty"`
	PaymentProcessedBy   *string                          `form:"payment_processed_by,omitempty" json:"payment_processed_by,omitempty" xml:"payment_processed_by,omitempty"`
	PaymentOptionID      *string                          `form:"payment_option_id,omitempty" json:"payment_option_id,omitempty" xml:"payment_option_id,omitempty"`
	UserPaymentOptionID  *string                          `form:"user_payment_option_id,omitempty" json:"user_payment_option_id,omitempty" xml:"user_payment_option_id,omitempty"`
	FraudSignals         *string                          `form:"fraud_signals,omitempty" json:"fraud_signals,omitempty" xml:"fraud_signals,omitempty"`
	PaResponse           *string                          `form:"pa_response,omitempty" json:"pa_response,omitempty" xml:"pa_response,omitempty"`
	MdMerchantData       *string                          `form:"md_merchant_data,omitempty" json:"md_merchant_data,omitempty" xml:"md_merchant_data,omitempty"`
}

// DepositRequestBodyRequestBody is used to define fields on request body types.
type DepositRequestBodyRequestBody struct {
	Deposit                   *PriceRequestBodyRequestBody `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
	MinAdvanceCancellationSec *int64                       `form:"min_advance_cancellation_sec,omitempty" json:"min_advance_cancellation_sec,omitempty" xml:"min_advance_cancellation_sec,omitempty"`
	DepositType               *string                      `form:"deposit_type,omitempty" json:"deposit_type,omitempty" xml:"deposit_type,omitempty"`
}

// NoShowFeeRequestBodyRequestBody is used to define fields on request body
// types.
type NoShowFeeRequestBodyRequestBody struct {
	Fee     *PriceRequestBodyRequestBody `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	FeeType *string                      `form:"fee_type,omitempty" json:"fee_type,omitempty" xml:"fee_type,omitempty"`
}

// PaymentProcessingParametersRequestBodyRequestBody is used to define fields
// on request body types.
type PaymentProcessingParametersRequestBodyRequestBody struct {
	Processor                  *string                                   `form:"processor,omitempty" json:"processor,omitempty" xml:"processor,omitempty"`
	PaymentMethodToken         *string                                   `form:"payment_method_token,omitempty" json:"payment_method_token,omitempty" xml:"payment_method_token,omitempty"`
	UnparsedPaymentMethodToken *string                                   `form:"unparsed_payment_method_token,omitempty" json:"unparsed_payment_method_token,omitempty" xml:"unparsed_payment_method_token,omitempty"`
	Version                    *string                                   `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	PaymentProcessor           *string                                   `form:"payment_processor,omitempty" json:"payment_processor,omitempty" xml:"payment_processor,omitempty"`
	TokenizationConfig         *TokenizationConfigRequestBodyRequestBody `form:"tokenization_config,omitempty" json:"tokenization_config,omitempty" xml:"tokenization_config,omitempty"`
}

// TokenizationConfigRequestBodyRequestBody is used to define fields on request
// body types.
type TokenizationConfigRequestBodyRequestBody struct {
	TokenizationParameter    map[string]string                              `form:"tokenization_parameter,omitempty" json:"tokenization_parameter,omitempty" xml:"tokenization_parameter,omitempty"`
	BillingInformationFormat *string                                        `form:"billing_information_format,omitempty" json:"billing_information_format,omitempty" xml:"billing_information_format,omitempty"`
	MerchantOfRecordName     *string                                        `form:"merchant_of_record_name,omitempty" json:"merchant_of_record_name,omitempty" xml:"merchant_of_record_name,omitempty"`
	PaymentCountryCode       *string                                        `form:"payment_country_code,omitempty" json:"payment_country_code,omitempty" xml:"payment_country_code,omitempty"`
	CardNetworkParameters    []*CardNetworkParametersRequestBodyRequestBody `form:"card_network_parameters,omitempty" json:"card_network_parameters,omitempty" xml:"card_network_parameters,omitempty"`
	AllowedAuthMethods       []string                                       `form:"allowed_auth_methods,omitempty" json:"allowed_auth_methods,omitempty" xml:"allowed_auth_methods,omitempty"`
}

// CardNetworkParametersRequestBodyRequestBody is used to define fields on
// request body types.
type CardNetworkParametersRequestBodyRequestBody struct {
	CardNetwork        *string `form:"card_network,omitempty" json:"card_network,omitempty" xml:"card_network,omitempty"`
	AcquirerBin        *string `form:"acquirer_bin,omitempty" json:"acquirer_bin,omitempty" xml:"acquirer_bin,omitempty"`
	AcquirerMerchantID *string `form:"acquirer_merchant_id,omitempty" json:"acquirer_merchant_id,omitempty" xml:"acquirer_merchant_id,omitempty"`
}

// OrderIdsRequestBodyRequestBody is used to define fields on request body
// types.
type OrderIdsRequestBodyRequestBody struct {
	OrderID []string `form:"order_id,omitempty" json:"order_id,omitempty" xml:"order_id,omitempty"`
}

// NewCheckOrderFulfillabilityResponseBody builds the HTTP response body from
// the result of the "check_order_fulfillability" endpoint of the "order"
// service.
func NewCheckOrderFulfillabilityResponseBody(res *order.CheckOrderFulfillabilityResponse) *CheckOrderFulfillabilityResponseBody {
	body := &CheckOrderFulfillabilityResponseBody{
		CartExpirationSec: res.CartExpirationSec,
	}
	if res.Fulfillability != nil {
		body.Fulfillability = marshalOrderOrderFulfillabilityToOrderFulfillabilityResponseBody(res.Fulfillability)
	}
	if res.FeesAndTaxes != nil {
		body.FeesAndTaxes = marshalOrderPriceToPriceResponseBody(res.FeesAndTaxes)
	}
	if res.Fees != nil {
		body.Fees = marshalOrderFeesToFeesResponseBody(res.Fees)
	}
	return body
}

// NewCreateOrderResponseBody builds the HTTP response body from the result of
// the "create_order" endpoint of the "order" service.
func NewCreateOrderResponseBody(res *order.CreateOrderResponse) *CreateOrderResponseBody {
	body := &CreateOrderResponseBody{}
	if res.Order != nil {
		body.Order = marshalOrderOrderToOrderResponseBody(res.Order)
	}
	if res.OrderFailure != nil {
		body.OrderFailure = marshalOrderOrderFailureToOrderFailureResponseBody(res.OrderFailure)
	}
	return body
}

// NewListOrdersResponseBody builds the HTTP response body from the result of
// the "list_orders" endpoint of the "order" service.
func NewListOrdersResponseBody(res *order.ListOrdersResponse) *ListOrdersResponseBody {
	body := &ListOrdersResponseBody{}
	if res.Order != nil {
		body.Order = make([]*OrderResponseBody, len(res.Order))
		for i, val := range res.Order {
			body.Order[i] = marshalOrderOrderToOrderResponseBody(val)
		}
	}
	return body
}

// NewCheckOrderFulfillabilityBadRequestResponseBody builds the HTTP response
// body from the result of the "check_order_fulfillability" endpoint of the
// "order" service.
func NewCheckOrderFulfillabilityBadRequestResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityBadRequestResponseBody {
	body := &CheckOrderFulfillabilityBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityUnauthorizedResponseBody builds the HTTP response
// body from the result of the "check_order_fulfillability" endpoint of the
// "order" service.
func NewCheckOrderFulfillabilityUnauthorizedResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityUnauthorizedResponseBody {
	body := &CheckOrderFulfillabilityUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityForbiddenResponseBody builds the HTTP response
// body from the result of the "check_order_fulfillability" endpoint of the
// "order" service.
func NewCheckOrderFulfillabilityForbiddenResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityForbiddenResponseBody {
	body := &CheckOrderFulfillabilityForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityNotFoundResponseBody builds the HTTP response
// body from the result of the "check_order_fulfillability" endpoint of the
// "order" service.
func NewCheckOrderFulfillabilityNotFoundResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityNotFoundResponseBody {
	body := &CheckOrderFulfillabilityNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityConflictResponseBody builds the HTTP response
// body from the result of the "check_order_fulfillability" endpoint of the
// "order" service.
func NewCheckOrderFulfillabilityConflictResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityConflictResponseBody {
	body := &CheckOrderFulfillabilityConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityTooManyRequestsResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityTooManyRequestsResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityTooManyRequestsResponseBody {
	body := &CheckOrderFulfillabilityTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityClientClosedRequestResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityClientClosedRequestResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityClientClosedRequestResponseBody {
	body := &CheckOrderFulfillabilityClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityInternalServerErrorResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityInternalServerErrorResponseBody {
	body := &CheckOrderFulfillabilityInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityNotImplementedResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityNotImplementedResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityNotImplementedResponseBody {
	body := &CheckOrderFulfillabilityNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityServiceUnavailableResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityServiceUnavailableResponseBody {
	body := &CheckOrderFulfillabilityServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityGatewayTimeoutResponseBody builds the HTTP
// response body from the result of the "check_order_fulfillability" endpoint
// of the "order" service.
func NewCheckOrderFulfillabilityGatewayTimeoutResponseBody(res *goa.ServiceError) *CheckOrderFulfillabilityGatewayTimeoutResponseBody {
	body := &CheckOrderFulfillabilityGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderBadRequestResponseBody builds the HTTP response body from the
// result of the "create_order" endpoint of the "order" service.
func NewCreateOrderBadRequestResponseBody(res *goa.ServiceError) *CreateOrderBadRequestResponseBody {
	body := &CreateOrderBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderUnauthorizedResponseBody(res *goa.ServiceError) *CreateOrderUnauthorizedResponseBody {
	body := &CreateOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderForbiddenResponseBody builds the HTTP response body from the
// result of the "create_order" endpoint of the "order" service.
func NewCreateOrderForbiddenResponseBody(res *goa.ServiceError) *CreateOrderForbiddenResponseBody {
	body := &CreateOrderForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderNotFoundResponseBody builds the HTTP response body from the
// result of the "create_order" endpoint of the "order" service.
func NewCreateOrderNotFoundResponseBody(res *goa.ServiceError) *CreateOrderNotFoundResponseBody {
	body := &CreateOrderNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderConflictResponseBody builds the HTTP response body from the
// result of the "create_order" endpoint of the "order" service.
func NewCreateOrderConflictResponseBody(res *goa.ServiceError) *CreateOrderConflictResponseBody {
	body := &CreateOrderConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderTooManyRequestsResponseBody builds the HTTP response body from
// the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderTooManyRequestsResponseBody(res *goa.ServiceError) *CreateOrderTooManyRequestsResponseBody {
	body := &CreateOrderTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderClientClosedRequestResponseBody builds the HTTP response body
// from the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderClientClosedRequestResponseBody(res *goa.ServiceError) *CreateOrderClientClosedRequestResponseBody {
	body := &CreateOrderClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderInternalServerErrorResponseBody(res *goa.ServiceError) *CreateOrderInternalServerErrorResponseBody {
	body := &CreateOrderInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderNotImplementedResponseBody builds the HTTP response body from
// the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderNotImplementedResponseBody(res *goa.ServiceError) *CreateOrderNotImplementedResponseBody {
	body := &CreateOrderNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderServiceUnavailableResponseBody(res *goa.ServiceError) *CreateOrderServiceUnavailableResponseBody {
	body := &CreateOrderServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderGatewayTimeoutResponseBody builds the HTTP response body from
// the result of the "create_order" endpoint of the "order" service.
func NewCreateOrderGatewayTimeoutResponseBody(res *goa.ServiceError) *CreateOrderGatewayTimeoutResponseBody {
	body := &CreateOrderGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersBadRequestResponseBody builds the HTTP response body from the
// result of the "list_orders" endpoint of the "order" service.
func NewListOrdersBadRequestResponseBody(res *goa.ServiceError) *ListOrdersBadRequestResponseBody {
	body := &ListOrdersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list_orders" endpoint of the "order" service.
func NewListOrdersUnauthorizedResponseBody(res *goa.ServiceError) *ListOrdersUnauthorizedResponseBody {
	body := &ListOrdersUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersForbiddenResponseBody builds the HTTP response body from the
// result of the "list_orders" endpoint of the "order" service.
func NewListOrdersForbiddenResponseBody(res *goa.ServiceError) *ListOrdersForbiddenResponseBody {
	body := &ListOrdersForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersNotFoundResponseBody builds the HTTP response body from the
// result of the "list_orders" endpoint of the "order" service.
func NewListOrdersNotFoundResponseBody(res *goa.ServiceError) *ListOrdersNotFoundResponseBody {
	body := &ListOrdersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersConflictResponseBody builds the HTTP response body from the
// result of the "list_orders" endpoint of the "order" service.
func NewListOrdersConflictResponseBody(res *goa.ServiceError) *ListOrdersConflictResponseBody {
	body := &ListOrdersConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersTooManyRequestsResponseBody builds the HTTP response body from
// the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersTooManyRequestsResponseBody(res *goa.ServiceError) *ListOrdersTooManyRequestsResponseBody {
	body := &ListOrdersTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersClientClosedRequestResponseBody builds the HTTP response body
// from the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersClientClosedRequestResponseBody(res *goa.ServiceError) *ListOrdersClientClosedRequestResponseBody {
	body := &ListOrdersClientClosedRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersInternalServerErrorResponseBody(res *goa.ServiceError) *ListOrdersInternalServerErrorResponseBody {
	body := &ListOrdersInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersNotImplementedResponseBody builds the HTTP response body from
// the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersNotImplementedResponseBody(res *goa.ServiceError) *ListOrdersNotImplementedResponseBody {
	body := &ListOrdersNotImplementedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersServiceUnavailableResponseBody(res *goa.ServiceError) *ListOrdersServiceUnavailableResponseBody {
	body := &ListOrdersServiceUnavailableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListOrdersGatewayTimeoutResponseBody builds the HTTP response body from
// the result of the "list_orders" endpoint of the "order" service.
func NewListOrdersGatewayTimeoutResponseBody(res *goa.ServiceError) *ListOrdersGatewayTimeoutResponseBody {
	body := &ListOrdersGatewayTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckOrderFulfillabilityPayload builds a order service
// check_order_fulfillability endpoint payload.
func NewCheckOrderFulfillabilityPayload(body *CheckOrderFulfillabilityRequestBody) *order.CheckOrderFulfillabilityPayload {
	v := &order.CheckOrderFulfillabilityRequest{
		MerchantID: *body.MerchantID,
		CartID:     body.CartID,
	}
	v.Item = make([]*order.LineItem, len(body.Item))
	for i, val := range body.Item {
		v.Item[i] = unmarshalLineItemRequestBodyRequestBodyToOrderLineItem(val)
	}
	res := &order.CheckOrderFulfillabilityPayload{
		Body: v,
	}

	return res
}

// NewCreateOrderPayload builds a order service create_order endpoint payload.
func NewCreateOrderPayload(body *CreateOrderRequestBody) *order.CreateOrderPayload {
	v := &order.CreateOrderRequest{
		IdempotencyToken: *body.IdempotencyToken,
	}
	v.Order = unmarshalOrderRequestBodyRequestBodyToOrderOrder(body.Order)
	if body.PaymentProcessingParameters != nil {
		v.PaymentProcessingParameters = unmarshalPaymentProcessingParametersRequestBodyRequestBodyToOrderPaymentProcessingParameters(body.PaymentProcessingParameters)
	}
	res := &order.CreateOrderPayload{
		Body: v,
	}

	return res
}

// NewListOrdersPayload builds a order service list_orders endpoint payload.
func NewListOrdersPayload(body *ListOrdersRequestBody) *order.ListOrdersPayload {
	v := &order.ListOrdersRequest{
		UserID: body.UserID,
	}
	if body.OrderIds != nil {
		v.OrderIds = unmarshalOrderIdsRequestBodyRequestBodyToOrderOrderIds(body.OrderIds)
	}
	res := &order.ListOrdersPayload{
		Body: v,
	}

	return res
}

// ValidateCheckOrderFulfillabilityRequestBody runs the validations defined on
// check_order_fulfillability_request_body
func ValidateCheckOrderFulfillabilityRequestBody(body *CheckOrderFulfillabilityRequestBody) (err error) {
	if body.MerchantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("merchant_id", "body"))
	}
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	for _, e := range body.Item {
		if e != nil {
			if err2 := ValidateLineItemRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateOrderRequestBody runs the validations defined on
// create_order_request_body
func ValidateCreateOrderRequestBody(body *CreateOrderRequestBody) (err error) {
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	if body.IdempotencyToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("idempotency_token", "body"))
	}
	if body.Order != nil {
		if err2 := ValidateOrderRequestBodyRequestBody(body.Order); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessingParameters != nil {
		if err2 := ValidatePaymentProcessingParametersRequestBodyRequestBody(body.PaymentProcessingParameters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLineItemRequestBodyRequestBody runs the validations defined on
// LineItemRequestBodyRequestBody
func ValidateLineItemRequestBodyRequestBody(body *LineItemRequestBodyRequestBody) (err error) {
	if body.ServiceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service_id", "body"))
	}
	if body.StartSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_sec", "body"))
	}
	if body.DurationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration_sec", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	for _, e := range body.Tickets {
		if e != nil {
			if err2 := ValidateOrderedTicketsRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "BOOKING_STATUS_UNSPECIFIED" || *body.Status == "CONFIRMED" || *body.Status == "PENDING_MERCHANT_CONFIRMATION" || *body.Status == "CANCELED" || *body.Status == "NO_SHOW" || *body.Status == "NO_SHOW_PENALIZED" || *body.Status == "FAILED" || *body.Status == "DECLINED_BY_MERCHANT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"BOOKING_STATUS_UNSPECIFIED", "CONFIRMED", "PENDING_MERCHANT_CONFIRMATION", "CANCELED", "NO_SHOW", "NO_SHOW_PENALIZED", "FAILED", "DECLINED_BY_MERCHANT"}))
		}
	}
	if body.IntakeFormAnswers != nil {
		if err2 := ValidateIntakeFormAnswersRequestBodyRequestBody(body.IntakeFormAnswers); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WarningReason != nil {
		if !(*body.WarningReason == "UNSPECIFIED_WARNING_REASON" || *body.WarningReason == "PRICE_INCREASE" || *body.WarningReason == "PRICE_DECREASE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.warning_reason", *body.WarningReason, []interface{}{"UNSPECIFIED_WARNING_REASON", "PRICE_INCREASE", "PRICE_DECREASE"}))
		}
	}
	return
}

// ValidateOrderedTicketsRequestBodyRequestBody runs the validations defined on
// OrderedTicketsRequestBodyRequestBody
func ValidateOrderedTicketsRequestBodyRequestBody(body *OrderedTicketsRequestBodyRequestBody) (err error) {
	if body.TicketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ticket_id", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}

// ValidatePriceRequestBodyRequestBody runs the validations defined on
// PriceRequestBodyRequestBody
func ValidatePriceRequestBodyRequestBody(body *PriceRequestBodyRequestBody) (err error) {
	if body.PriceMicros == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price_micros", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currency_code", "body"))
	}
	return
}

// ValidateIntakeFormAnswersRequestBodyRequestBody runs the validations defined
// on IntakeFormAnswersRequestBodyRequestBody
func ValidateIntakeFormAnswersRequestBodyRequestBody(body *IntakeFormAnswersRequestBodyRequestBody) (err error) {
	for _, e := range body.Answer {
		if e != nil {
			if err2 := ValidateIntakeFormFieldAnswerRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateIntakeFormFieldAnswerRequestBodyRequestBody runs the validations
// defined on IntakeFormFieldAnswerRequestBodyRequestBody
func ValidateIntakeFormFieldAnswerRequestBodyRequestBody(body *IntakeFormFieldAnswerRequestBodyRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Response == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
	}
	return
}

// ValidateOrderRequestBodyRequestBody runs the validations defined on
// OrderRequestBodyRequestBody
func ValidateOrderRequestBodyRequestBody(body *OrderRequestBodyRequestBody) (err error) {
	if body.UserInformation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_information", "body"))
	}
	if body.UserInformation != nil {
		if err2 := ValidateUserInformationRequestBodyRequestBody(body.UserInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentInformation != nil {
		if err2 := ValidatePaymentInformationRequestBodyRequestBody(body.PaymentInformation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Item {
		if e != nil {
			if err2 := ValidateLineItemRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUserInformationRequestBodyRequestBody runs the validations defined
// on UserInformationRequestBodyRequestBody
func ValidateUserInformationRequestBodyRequestBody(body *UserInformationRequestBodyRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.GivenName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("given_name", "body"))
	}
	if body.FamilyName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("family_name", "body"))
	}
	if body.Telephone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("telephone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Address != nil {
		if err2 := ValidatePostalAddressRequestBodyRequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePostalAddressRequestBodyRequestBody runs the validations defined on
// PostalAddressRequestBodyRequestBody
func ValidatePostalAddressRequestBodyRequestBody(body *PostalAddressRequestBodyRequestBody) (err error) {
	if body.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country", "body"))
	}
	if body.Locality == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locality", "body"))
	}
	if body.PostalCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postal_code", "body"))
	}
	if body.StreetAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("street_address", "body"))
	}
	return
}

// ValidatePaymentInformationRequestBodyRequestBody runs the validations
// defined on PaymentInformationRequestBodyRequestBody
func ValidatePaymentInformationRequestBodyRequestBody(body *PaymentInformationRequestBodyRequestBody) (err error) {
	if body.PrepaymentStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("prepayment_status", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.PaymentProcessedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processed_by", "body"))
	}
	if body.PrepaymentStatus != nil {
		if !(*body.PrepaymentStatus == "PREPAYMENT_STATUS_UNSPECIFIED" || *body.PrepaymentStatus == "PREPAYMENT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_NOT_PROVIDED" || *body.PrepaymentStatus == "PREPAYMENT_REFUNDED" || *body.PrepaymentStatus == "PREPAYMENT_CREDITED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.prepayment_status", *body.PrepaymentStatus, []interface{}{"PREPAYMENT_STATUS_UNSPECIFIED", "PREPAYMENT_PROVIDED", "PREPAYMENT_NOT_PROVIDED", "PREPAYMENT_REFUNDED", "PREPAYMENT_CREDITED"}))
		}
	}
	if body.Price != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Price); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.TaxAmount != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.TaxAmount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Fees != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Fees); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeesAndTaxes != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.FeesAndTaxes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deposit != nil {
		if err2 := ValidateDepositRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NoShowFee != nil {
		if err2 := ValidateNoShowFeeRequestBodyRequestBody(body.NoShowFee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.PaymentProcessedBy != nil {
		if !(*body.PaymentProcessedBy == "PAYMENT_PROCESSED_BY_UNSPECIFIED" || *body.PaymentProcessedBy == "PROCESSED_BY_GOOGLE" || *body.PaymentProcessedBy == "PROCESSED_BY_PARTNER") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.payment_processed_by", *body.PaymentProcessedBy, []interface{}{"PAYMENT_PROCESSED_BY_UNSPECIFIED", "PROCESSED_BY_GOOGLE", "PROCESSED_BY_PARTNER"}))
		}
	}
	return
}

// ValidateDepositRequestBodyRequestBody runs the validations defined on
// DepositRequestBodyRequestBody
func ValidateDepositRequestBodyRequestBody(body *DepositRequestBodyRequestBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if body.MinAdvanceCancellationSec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_advance_cancellation_sec", "body"))
	}
	if body.DepositType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit_type", "body"))
	}
	if body.Deposit != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DepositType != nil {
		if !(*body.DepositType == "FIXED_RATE_DEFAULT" || *body.DepositType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit_type", *body.DepositType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidateNoShowFeeRequestBodyRequestBody runs the validations defined on
// NoShowFeeRequestBodyRequestBody
func ValidateNoShowFeeRequestBodyRequestBody(body *NoShowFeeRequestBodyRequestBody) (err error) {
	if body.Fee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee", "body"))
	}
	if body.FeeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fee_type", "body"))
	}
	if body.Fee != nil {
		if err2 := ValidatePriceRequestBodyRequestBody(body.Fee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.FeeType != nil {
		if !(*body.FeeType == "FIXED_RATE_DEFAULT" || *body.FeeType == "PER_PERSON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.fee_type", *body.FeeType, []interface{}{"FIXED_RATE_DEFAULT", "PER_PERSON"}))
		}
	}
	return
}

// ValidatePaymentProcessingParametersRequestBodyRequestBody runs the
// validations defined on PaymentProcessingParametersRequestBodyRequestBody
func ValidatePaymentProcessingParametersRequestBodyRequestBody(body *PaymentProcessingParametersRequestBodyRequestBody) (err error) {
	if body.Processor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("processor", "body"))
	}
	if body.PaymentProcessor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_processor", "body"))
	}
	if body.Processor != nil {
		if !(*body.Processor == "PAYMENT_PROCESSOR_UNSPECIFIED" || *body.Processor == "PROCESSOR_STRIPE" || *body.Processor == "PROCESSOR_BRAINTREE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.processor", *body.Processor, []interface{}{"PAYMENT_PROCESSOR_UNSPECIFIED", "PROCESSOR_STRIPE", "PROCESSOR_BRAINTREE"}))
		}
	}
	if body.TokenizationConfig != nil {
		if err2 := ValidateTokenizationConfigRequestBodyRequestBody(body.TokenizationConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenizationConfigRequestBodyRequestBody runs the validations
// defined on TokenizationConfigRequestBodyRequestBody
func ValidateTokenizationConfigRequestBodyRequestBody(body *TokenizationConfigRequestBodyRequestBody) (err error) {
	if body.TokenizationParameter == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tokenization_parameter", "body"))
	}
	if body.BillingInformationFormat == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("billing_information_format", "body"))
	}
	if body.MerchantOfRecordName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("merchant_of_record_name", "body"))
	}
	if body.PaymentCountryCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payment_country_code", "body"))
	}
	if body.CardNetworkParameters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network_parameters", "body"))
	}
	if body.AllowedAuthMethods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_auth_methods", "body"))
	}
	if body.BillingInformationFormat != nil {
		if !(*body.BillingInformationFormat == "BILLING_INFORMATION_FORMAT_UNSPECIFIED" || *body.BillingInformationFormat == "MIN" || *body.BillingInformationFormat == "FULL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.billing_information_format", *body.BillingInformationFormat, []interface{}{"BILLING_INFORMATION_FORMAT_UNSPECIFIED", "MIN", "FULL"}))
		}
	}
	for _, e := range body.CardNetworkParameters {
		if e != nil {
			if err2 := ValidateCardNetworkParametersRequestBodyRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.AllowedAuthMethods {
		if !(e == "AUTH_METHOD_UNSPECIFIED" || e == "PAN_ONLY" || e == "CRYPTOGRAM_3DS") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.allowed_auth_methods[*]", e, []interface{}{"AUTH_METHOD_UNSPECIFIED", "PAN_ONLY", "CRYPTOGRAM_3DS"}))
		}
	}
	return
}

// ValidateCardNetworkParametersRequestBodyRequestBody runs the validations
// defined on CardNetworkParametersRequestBodyRequestBody
func ValidateCardNetworkParametersRequestBodyRequestBody(body *CardNetworkParametersRequestBodyRequestBody) (err error) {
	if body.CardNetwork == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("card_network", "body"))
	}
	if body.AcquirerBin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acquirer_bin", "body"))
	}
	if body.AcquirerMerchantID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acquirer_merchant_id", "body"))
	}
	if body.CardNetwork != nil {
		if !(*body.CardNetwork == "CREDIT_CARD_TYPE_UNSPECIFIED" || *body.CardNetwork == "VISA" || *body.CardNetwork == "MASTERCARD" || *body.CardNetwork == "AMERICAN_EXPRESS" || *body.CardNetwork == "DISCOVER" || *body.CardNetwork == "JCB") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.card_network", *body.CardNetwork, []interface{}{"CREDIT_CARD_TYPE_UNSPECIFIED", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "JCB"}))
		}
	}
	return
}
