// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package server

import (
	"context"
	"io"
	"net/http"

	order "github.com/tchssk/reserve-with-google-goa/gen/order"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCheckOrderFulfillabilityResponse returns an encoder for responses
// returned by the order check_order_fulfillability endpoint.
func EncodeCheckOrderFulfillabilityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*order.CheckOrderFulfillabilityResponse)
		enc := encoder(ctx, w)
		body := NewCheckOrderFulfillabilityResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCheckOrderFulfillabilityRequest returns a decoder for requests sent to
// the order check_order_fulfillability endpoint.
func DecodeCheckOrderFulfillabilityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CheckOrderFulfillabilityRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCheckOrderFulfillabilityRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCheckOrderFulfillabilityPayload(&body)
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeCheckOrderFulfillabilityError returns an encoder for errors returned
// by the check_order_fulfillability order endpoint.
func EncodeCheckOrderFulfillabilityError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityConflictResponseBody(res)
			}
			w.Header().Set("goa-error", "conflict")
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "too_many_requests":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityTooManyRequestsResponseBody(res)
			}
			w.Header().Set("goa-error", "too_many_requests")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "client_closed_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityClientClosedRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "client_closed_request")
			w.WriteHeader(499)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "service_unavailable":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", "service_unavailable")
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		case "gateway_timeout":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckOrderFulfillabilityGatewayTimeoutResponseBody(res)
			}
			w.Header().Set("goa-error", "gateway_timeout")
			w.WriteHeader(http.StatusGatewayTimeout)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateOrderResponse returns an encoder for responses returned by the
// order create_order endpoint.
func EncodeCreateOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*order.CreateOrderResponse)
		enc := encoder(ctx, w)
		body := NewCreateOrderResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateOrderRequest returns a decoder for requests sent to the order
// create_order endpoint.
func DecodeCreateOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateOrderPayload(&body)
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeCreateOrderError returns an encoder for errors returned by the
// create_order order endpoint.
func EncodeCreateOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderConflictResponseBody(res)
			}
			w.Header().Set("goa-error", "conflict")
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "too_many_requests":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderTooManyRequestsResponseBody(res)
			}
			w.Header().Set("goa-error", "too_many_requests")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "client_closed_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderClientClosedRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "client_closed_request")
			w.WriteHeader(499)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "service_unavailable":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", "service_unavailable")
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		case "gateway_timeout":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderGatewayTimeoutResponseBody(res)
			}
			w.Header().Set("goa-error", "gateway_timeout")
			w.WriteHeader(http.StatusGatewayTimeout)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListOrdersResponse returns an encoder for responses returned by the
// order list_orders endpoint.
func EncodeListOrdersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*order.ListOrdersResponse)
		enc := encoder(ctx, w)
		body := NewListOrdersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListOrdersRequest returns a decoder for requests sent to the order
// list_orders endpoint.
func DecodeListOrdersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListOrdersRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewListOrdersPayload(&body)
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeListOrdersError returns an encoder for errors returned by the
// list_orders order endpoint.
func EncodeListOrdersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "conflict":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersConflictResponseBody(res)
			}
			w.Header().Set("goa-error", "conflict")
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "too_many_requests":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersTooManyRequestsResponseBody(res)
			}
			w.Header().Set("goa-error", "too_many_requests")
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		case "client_closed_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersClientClosedRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "client_closed_request")
			w.WriteHeader(499)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_implemented":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersNotImplementedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_implemented")
			w.WriteHeader(http.StatusNotImplemented)
			return enc.Encode(body)
		case "service_unavailable":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", "service_unavailable")
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		case "gateway_timeout":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListOrdersGatewayTimeoutResponseBody(res)
			}
			w.Header().Set("goa-error", "gateway_timeout")
			w.WriteHeader(http.StatusGatewayTimeout)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalLineItemRequestBodyRequestBodyToOrderLineItem builds a value of
// type *order.LineItem from a value of type *LineItemRequestBodyRequestBody.
func unmarshalLineItemRequestBodyRequestBodyToOrderLineItem(v *LineItemRequestBodyRequestBody) *order.LineItem {
	res := &order.LineItem{
		ServiceID:     *v.ServiceID,
		StartSec:      *v.StartSec,
		DurationSec:   *v.DurationSec,
		Status:        v.Status,
		WarningReason: v.WarningReason,
	}
	if v.Tickets != nil {
		res.Tickets = make([]*order.OrderedTickets, len(v.Tickets))
		for i, val := range v.Tickets {
			res.Tickets[i] = unmarshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets(val)
		}
	}
	res.Price = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.Price)
	if v.IntakeFormAnswers != nil {
		res.IntakeFormAnswers = unmarshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers(v.IntakeFormAnswers)
	}

	return res
}

// unmarshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets builds a
// value of type *order.OrderedTickets from a value of type
// *OrderedTicketsRequestBodyRequestBody.
func unmarshalOrderedTicketsRequestBodyRequestBodyToOrderOrderedTickets(v *OrderedTicketsRequestBodyRequestBody) *order.OrderedTickets {
	if v == nil {
		return nil
	}
	res := &order.OrderedTickets{
		TicketID: *v.TicketID,
		Count:    *v.Count,
	}

	return res
}

// unmarshalPriceRequestBodyRequestBodyToOrderPrice builds a value of type
// *order.Price from a value of type *PriceRequestBodyRequestBody.
func unmarshalPriceRequestBodyRequestBodyToOrderPrice(v *PriceRequestBodyRequestBody) *order.Price {
	res := &order.Price{
		PriceMicros:      *v.PriceMicros,
		CurrencyCode:     *v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// unmarshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers
// builds a value of type *order.IntakeFormAnswers from a value of type
// *IntakeFormAnswersRequestBodyRequestBody.
func unmarshalIntakeFormAnswersRequestBodyRequestBodyToOrderIntakeFormAnswers(v *IntakeFormAnswersRequestBodyRequestBody) *order.IntakeFormAnswers {
	if v == nil {
		return nil
	}
	res := &order.IntakeFormAnswers{}
	res.Answer = make([]*order.IntakeFormFieldAnswer, len(v.Answer))
	for i, val := range v.Answer {
		res.Answer[i] = unmarshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer(val)
	}

	return res
}

// unmarshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer
// builds a value of type *order.IntakeFormFieldAnswer from a value of type
// *IntakeFormFieldAnswerRequestBodyRequestBody.
func unmarshalIntakeFormFieldAnswerRequestBodyRequestBodyToOrderIntakeFormFieldAnswer(v *IntakeFormFieldAnswerRequestBodyRequestBody) *order.IntakeFormFieldAnswer {
	res := &order.IntakeFormFieldAnswer{
		ID: *v.ID,
	}
	res.Response = make([]string, len(v.Response))
	for i, val := range v.Response {
		res.Response[i] = val
	}

	return res
}

// marshalOrderOrderFulfillabilityToOrderFulfillabilityResponseBody builds a
// value of type *OrderFulfillabilityResponseBody from a value of type
// *order.OrderFulfillability.
func marshalOrderOrderFulfillabilityToOrderFulfillabilityResponseBody(v *order.OrderFulfillability) *OrderFulfillabilityResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderFulfillabilityResponseBody{
		Result:              v.Result,
		UnfulfillableReason: v.UnfulfillableReason,
	}
	if v.ItemFulfillability != nil {
		res.ItemFulfillability = make([]*LineItemFulfillabilityResponseBody, len(v.ItemFulfillability))
		for i, val := range v.ItemFulfillability {
			res.ItemFulfillability[i] = marshalOrderLineItemFulfillabilityToLineItemFulfillabilityResponseBody(val)
		}
	}

	return res
}

// marshalOrderLineItemFulfillabilityToLineItemFulfillabilityResponseBody
// builds a value of type *LineItemFulfillabilityResponseBody from a value of
// type *order.LineItemFulfillability.
func marshalOrderLineItemFulfillabilityToLineItemFulfillabilityResponseBody(v *order.LineItemFulfillability) *LineItemFulfillabilityResponseBody {
	res := &LineItemFulfillabilityResponseBody{
		Result:              v.Result,
		UnfulfillableReason: v.UnfulfillableReason,
	}
	if v.Item != nil {
		res.Item = marshalOrderLineItemToLineItemResponseBody(v.Item)
	}
	if v.Availability != nil {
		res.Availability = marshalOrderUpdatedAvailabilityToUpdatedAvailabilityResponseBody(v.Availability)
	}
	if v.TicketType != nil {
		res.TicketType = make([]*TicketTypeResponseBody, len(v.TicketType))
		for i, val := range v.TicketType {
			res.TicketType[i] = marshalOrderTicketTypeToTicketTypeResponseBody(val)
		}
	}
	if v.ViolatedTicketConstraint != nil {
		res.ViolatedTicketConstraint = make([]*ViolatedTicketConstraintResponseBody, len(v.ViolatedTicketConstraint))
		for i, val := range v.ViolatedTicketConstraint {
			res.ViolatedTicketConstraint[i] = marshalOrderViolatedTicketConstraintToViolatedTicketConstraintResponseBody(val)
		}
	}

	return res
}

// marshalOrderLineItemToLineItemResponseBody builds a value of type
// *LineItemResponseBody from a value of type *order.LineItem.
func marshalOrderLineItemToLineItemResponseBody(v *order.LineItem) *LineItemResponseBody {
	res := &LineItemResponseBody{
		ServiceID:     v.ServiceID,
		StartSec:      v.StartSec,
		DurationSec:   v.DurationSec,
		Status:        v.Status,
		WarningReason: v.WarningReason,
	}
	if v.Tickets != nil {
		res.Tickets = make([]*OrderedTicketsResponseBody, len(v.Tickets))
		for i, val := range v.Tickets {
			res.Tickets[i] = marshalOrderOrderedTicketsToOrderedTicketsResponseBody(val)
		}
	}
	if v.Price != nil {
		res.Price = marshalOrderPriceToPriceResponseBody(v.Price)
	}
	if v.IntakeFormAnswers != nil {
		res.IntakeFormAnswers = marshalOrderIntakeFormAnswersToIntakeFormAnswersResponseBody(v.IntakeFormAnswers)
	}

	return res
}

// marshalOrderOrderedTicketsToOrderedTicketsResponseBody builds a value of
// type *OrderedTicketsResponseBody from a value of type *order.OrderedTickets.
func marshalOrderOrderedTicketsToOrderedTicketsResponseBody(v *order.OrderedTickets) *OrderedTicketsResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderedTicketsResponseBody{
		TicketID: v.TicketID,
		Count:    v.Count,
	}

	return res
}

// marshalOrderPriceToPriceResponseBody builds a value of type
// *PriceResponseBody from a value of type *order.Price.
func marshalOrderPriceToPriceResponseBody(v *order.Price) *PriceResponseBody {
	res := &PriceResponseBody{
		PriceMicros:      v.PriceMicros,
		CurrencyCode:     v.CurrencyCode,
		PricingOptionTag: v.PricingOptionTag,
	}

	return res
}

// marshalOrderIntakeFormAnswersToIntakeFormAnswersResponseBody builds a value
// of type *IntakeFormAnswersResponseBody from a value of type
// *order.IntakeFormAnswers.
func marshalOrderIntakeFormAnswersToIntakeFormAnswersResponseBody(v *order.IntakeFormAnswers) *IntakeFormAnswersResponseBody {
	if v == nil {
		return nil
	}
	res := &IntakeFormAnswersResponseBody{}
	if v.Answer != nil {
		res.Answer = make([]*IntakeFormFieldAnswerResponseBody, len(v.Answer))
		for i, val := range v.Answer {
			res.Answer[i] = marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerResponseBody(val)
		}
	}

	return res
}

// marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerResponseBody builds
// a value of type *IntakeFormFieldAnswerResponseBody from a value of type
// *order.IntakeFormFieldAnswer.
func marshalOrderIntakeFormFieldAnswerToIntakeFormFieldAnswerResponseBody(v *order.IntakeFormFieldAnswer) *IntakeFormFieldAnswerResponseBody {
	res := &IntakeFormFieldAnswerResponseBody{
		ID: v.ID,
	}
	if v.Response != nil {
		res.Response = make([]string, len(v.Response))
		for i, val := range v.Response {
			res.Response[i] = val
		}
	}

	return res
}

// marshalOrderUpdatedAvailabilityToUpdatedAvailabilityResponseBody builds a
// value of type *UpdatedAvailabilityResponseBody from a value of type
// *order.UpdatedAvailability.
func marshalOrderUpdatedAvailabilityToUpdatedAvailabilityResponseBody(v *order.UpdatedAvailability) *UpdatedAvailabilityResponseBody {
	if v == nil {
		return nil
	}
	res := &UpdatedAvailabilityResponseBody{
		SpotsOpen: v.SpotsOpen,
	}

	return res
}

// marshalOrderTicketTypeToTicketTypeResponseBody builds a value of type
// *TicketTypeResponseBody from a value of type *order.TicketType.
func marshalOrderTicketTypeToTicketTypeResponseBody(v *order.TicketType) *TicketTypeResponseBody {
	if v == nil {
		return nil
	}
	res := &TicketTypeResponseBody{
		TicketTypeID:      v.TicketTypeID,
		ShortDescription:  v.ShortDescription,
		OptionDescription: v.OptionDescription,
	}
	if v.LocalizedShortDescription != nil {
		res.LocalizedShortDescription = marshalOrderTextToTextResponseBody(v.LocalizedShortDescription)
	}
	if v.Price != nil {
		res.Price = marshalOrderPriceToPriceResponseBody(v.Price)
	}
	if v.PerTicketFee != nil {
		res.PerTicketFee = marshalOrderPerTicketFeeToPerTicketFeeResponseBody(v.PerTicketFee)
	}
	if v.LocalizedOptionDescription != nil {
		res.LocalizedOptionDescription = marshalOrderTextToTextResponseBody(v.LocalizedOptionDescription)
	}

	return res
}

// marshalOrderTextToTextResponseBody builds a value of type *TextResponseBody
// from a value of type *order.Text.
func marshalOrderTextToTextResponseBody(v *order.Text) *TextResponseBody {
	res := &TextResponseBody{
		Value: v.Value,
	}
	if v.LocalizedValue != nil {
		res.LocalizedValue = make([]*LocalizedStringResponseBody, len(v.LocalizedValue))
		for i, val := range v.LocalizedValue {
			res.LocalizedValue[i] = marshalOrderLocalizedStringToLocalizedStringResponseBody(val)
		}
	}

	return res
}

// marshalOrderLocalizedStringToLocalizedStringResponseBody builds a value of
// type *LocalizedStringResponseBody from a value of type
// *order.LocalizedString.
func marshalOrderLocalizedStringToLocalizedStringResponseBody(v *order.LocalizedString) *LocalizedStringResponseBody {
	if v == nil {
		return nil
	}
	res := &LocalizedStringResponseBody{
		Locale: v.Locale,
		Value:  v.Value,
	}

	return res
}

// marshalOrderPerTicketFeeToPerTicketFeeResponseBody builds a value of type
// *PerTicketFeeResponseBody from a value of type *order.PerTicketFee.
func marshalOrderPerTicketFeeToPerTicketFeeResponseBody(v *order.PerTicketFee) *PerTicketFeeResponseBody {
	if v == nil {
		return nil
	}
	res := &PerTicketFeeResponseBody{}
	if v.ServiceCharge != nil {
		res.ServiceCharge = marshalOrderPriceToPriceResponseBody(v.ServiceCharge)
	}
	if v.FacilityFee != nil {
		res.FacilityFee = marshalOrderPriceToPriceResponseBody(v.FacilityFee)
	}
	if v.Taxes != nil {
		res.Taxes = marshalOrderPriceToPriceResponseBody(v.Taxes)
	}

	return res
}

// marshalOrderViolatedTicketConstraintToViolatedTicketConstraintResponseBody
// builds a value of type *ViolatedTicketConstraintResponseBody from a value of
// type *order.ViolatedTicketConstraint.
func marshalOrderViolatedTicketConstraintToViolatedTicketConstraintResponseBody(v *order.ViolatedTicketConstraint) *ViolatedTicketConstraintResponseBody {
	if v == nil {
		return nil
	}
	res := &ViolatedTicketConstraintResponseBody{
		MinTicketCount: v.MinTicketCount,
		MaxTicketCount: v.MaxTicketCount,
		TicketID:       v.TicketID,
	}

	return res
}

// marshalOrderFeesToFeesResponseBody builds a value of type *FeesResponseBody
// from a value of type *order.Fees.
func marshalOrderFeesToFeesResponseBody(v *order.Fees) *FeesResponseBody {
	if v == nil {
		return nil
	}
	res := &FeesResponseBody{}
	if v.PerTicketFee != nil {
		res.PerTicketFee = make([]*SpecificPerTicketFeeResponseBody, len(v.PerTicketFee))
		for i, val := range v.PerTicketFee {
			res.PerTicketFee[i] = marshalOrderSpecificPerTicketFeeToSpecificPerTicketFeeResponseBody(val)
		}
	}
	if v.PerOrderFee != nil {
		res.PerOrderFee = make([]*SpecificPerOrderFeeResponseBody, len(v.PerOrderFee))
		for i, val := range v.PerOrderFee {
			res.PerOrderFee[i] = marshalOrderSpecificPerOrderFeeToSpecificPerOrderFeeResponseBody(val)
		}
	}

	return res
}

// marshalOrderSpecificPerTicketFeeToSpecificPerTicketFeeResponseBody builds a
// value of type *SpecificPerTicketFeeResponseBody from a value of type
// *order.SpecificPerTicketFee.
func marshalOrderSpecificPerTicketFeeToSpecificPerTicketFeeResponseBody(v *order.SpecificPerTicketFee) *SpecificPerTicketFeeResponseBody {
	res := &SpecificPerTicketFeeResponseBody{
		TicketID:  v.TicketID,
		ServiceID: v.ServiceID,
		FeeName:   v.FeeName,
	}
	if v.FeeAmount != nil {
		res.FeeAmount = marshalOrderPriceToPriceResponseBody(v.FeeAmount)
	}

	return res
}

// marshalOrderSpecificPerOrderFeeToSpecificPerOrderFeeResponseBody builds a
// value of type *SpecificPerOrderFeeResponseBody from a value of type
// *order.SpecificPerOrderFee.
func marshalOrderSpecificPerOrderFeeToSpecificPerOrderFeeResponseBody(v *order.SpecificPerOrderFee) *SpecificPerOrderFeeResponseBody {
	res := &SpecificPerOrderFeeResponseBody{
		FeeName: v.FeeName,
	}
	if v.FeeAmount != nil {
		res.FeeAmount = marshalOrderPriceToPriceResponseBody(v.FeeAmount)
	}

	return res
}

// unmarshalOrderRequestBodyRequestBodyToOrderOrder builds a value of type
// *order.Order from a value of type *OrderRequestBodyRequestBody.
func unmarshalOrderRequestBodyRequestBodyToOrderOrder(v *OrderRequestBodyRequestBody) *order.Order {
	res := &order.Order{
		OrderID:    v.OrderID,
		MerchantID: v.MerchantID,
	}
	res.UserInformation = unmarshalUserInformationRequestBodyRequestBodyToOrderUserInformation(v.UserInformation)
	if v.PaymentInformation != nil {
		res.PaymentInformation = unmarshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation(v.PaymentInformation)
	}
	if v.Item != nil {
		res.Item = make([]*order.LineItem, len(v.Item))
		for i, val := range v.Item {
			res.Item[i] = unmarshalLineItemRequestBodyRequestBodyToOrderLineItem(val)
		}
	}

	return res
}

// unmarshalUserInformationRequestBodyRequestBodyToOrderUserInformation builds
// a value of type *order.UserInformation from a value of type
// *UserInformationRequestBodyRequestBody.
func unmarshalUserInformationRequestBodyRequestBodyToOrderUserInformation(v *UserInformationRequestBodyRequestBody) *order.UserInformation {
	res := &order.UserInformation{
		UserID:       *v.UserID,
		GivenName:    *v.GivenName,
		FamilyName:   *v.FamilyName,
		Telephone:    *v.Telephone,
		Email:        *v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = unmarshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress(v.Address)
	}

	return res
}

// unmarshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress builds a
// value of type *order.PostalAddress from a value of type
// *PostalAddressRequestBodyRequestBody.
func unmarshalPostalAddressRequestBodyRequestBodyToOrderPostalAddress(v *PostalAddressRequestBodyRequestBody) *order.PostalAddress {
	if v == nil {
		return nil
	}
	res := &order.PostalAddress{
		Country:       *v.Country,
		Locality:      *v.Locality,
		Region:        v.Region,
		PostalCode:    *v.PostalCode,
		StreetAddress: *v.StreetAddress,
	}

	return res
}

// unmarshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation
// builds a value of type *order.PaymentInformation from a value of type
// *PaymentInformationRequestBodyRequestBody.
func unmarshalPaymentInformationRequestBodyRequestBodyToOrderPaymentInformation(v *PaymentInformationRequestBodyRequestBody) *order.PaymentInformation {
	if v == nil {
		return nil
	}
	res := &order.PaymentInformation{
		PrepaymentStatus:     *v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   *v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	res.Price = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.Price)
	if v.TaxAmount != nil {
		res.TaxAmount = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = unmarshalDepositRequestBodyRequestBodyToOrderDeposit(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = unmarshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee(v.NoShowFee)
	}

	return res
}

// unmarshalDepositRequestBodyRequestBodyToOrderDeposit builds a value of type
// *order.Deposit from a value of type *DepositRequestBodyRequestBody.
func unmarshalDepositRequestBodyRequestBodyToOrderDeposit(v *DepositRequestBodyRequestBody) *order.Deposit {
	if v == nil {
		return nil
	}
	res := &order.Deposit{
		MinAdvanceCancellationSec: *v.MinAdvanceCancellationSec,
		DepositType:               *v.DepositType,
	}
	res.Deposit = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.Deposit)

	return res
}

// unmarshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee builds a value of
// type *order.NoShowFee from a value of type *NoShowFeeRequestBodyRequestBody.
func unmarshalNoShowFeeRequestBodyRequestBodyToOrderNoShowFee(v *NoShowFeeRequestBodyRequestBody) *order.NoShowFee {
	if v == nil {
		return nil
	}
	res := &order.NoShowFee{
		FeeType: *v.FeeType,
	}
	res.Fee = unmarshalPriceRequestBodyRequestBodyToOrderPrice(v.Fee)

	return res
}

// unmarshalPaymentProcessingParametersRequestBodyRequestBodyToOrderPaymentProcessingParameters
// builds a value of type *order.PaymentProcessingParameters from a value of
// type *PaymentProcessingParametersRequestBodyRequestBody.
func unmarshalPaymentProcessingParametersRequestBodyRequestBodyToOrderPaymentProcessingParameters(v *PaymentProcessingParametersRequestBodyRequestBody) *order.PaymentProcessingParameters {
	if v == nil {
		return nil
	}
	res := &order.PaymentProcessingParameters{
		Processor:                  *v.Processor,
		PaymentMethodToken:         v.PaymentMethodToken,
		UnparsedPaymentMethodToken: v.UnparsedPaymentMethodToken,
		Version:                    v.Version,
		PaymentProcessor:           *v.PaymentProcessor,
	}
	if v.TokenizationConfig != nil {
		res.TokenizationConfig = unmarshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig(v.TokenizationConfig)
	}

	return res
}

// unmarshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig
// builds a value of type *order.TokenizationConfig from a value of type
// *TokenizationConfigRequestBodyRequestBody.
func unmarshalTokenizationConfigRequestBodyRequestBodyToOrderTokenizationConfig(v *TokenizationConfigRequestBodyRequestBody) *order.TokenizationConfig {
	if v == nil {
		return nil
	}
	res := &order.TokenizationConfig{
		BillingInformationFormat: *v.BillingInformationFormat,
		MerchantOfRecordName:     *v.MerchantOfRecordName,
		PaymentCountryCode:       *v.PaymentCountryCode,
	}
	res.TokenizationParameter = make(map[string]string, len(v.TokenizationParameter))
	for key, val := range v.TokenizationParameter {
		tk := key
		tv := val
		res.TokenizationParameter[tk] = tv
	}
	res.CardNetworkParameters = make([]*order.CardNetworkParameters, len(v.CardNetworkParameters))
	for i, val := range v.CardNetworkParameters {
		res.CardNetworkParameters[i] = unmarshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters(val)
	}
	res.AllowedAuthMethods = make([]string, len(v.AllowedAuthMethods))
	for i, val := range v.AllowedAuthMethods {
		res.AllowedAuthMethods[i] = val
	}

	return res
}

// unmarshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters
// builds a value of type *order.CardNetworkParameters from a value of type
// *CardNetworkParametersRequestBodyRequestBody.
func unmarshalCardNetworkParametersRequestBodyRequestBodyToOrderCardNetworkParameters(v *CardNetworkParametersRequestBodyRequestBody) *order.CardNetworkParameters {
	res := &order.CardNetworkParameters{
		CardNetwork:        *v.CardNetwork,
		AcquirerBin:        *v.AcquirerBin,
		AcquirerMerchantID: *v.AcquirerMerchantID,
	}

	return res
}

// marshalOrderOrderToOrderResponseBody builds a value of type
// *OrderResponseBody from a value of type *order.Order.
func marshalOrderOrderToOrderResponseBody(v *order.Order) *OrderResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderResponseBody{
		OrderID:    v.OrderID,
		MerchantID: v.MerchantID,
	}
	if v.UserInformation != nil {
		res.UserInformation = marshalOrderUserInformationToUserInformationResponseBody(v.UserInformation)
	}
	if v.PaymentInformation != nil {
		res.PaymentInformation = marshalOrderPaymentInformationToPaymentInformationResponseBody(v.PaymentInformation)
	}
	if v.Item != nil {
		res.Item = make([]*LineItemResponseBody, len(v.Item))
		for i, val := range v.Item {
			res.Item[i] = marshalOrderLineItemToLineItemResponseBody(val)
		}
	}

	return res
}

// marshalOrderUserInformationToUserInformationResponseBody builds a value of
// type *UserInformationResponseBody from a value of type
// *order.UserInformation.
func marshalOrderUserInformationToUserInformationResponseBody(v *order.UserInformation) *UserInformationResponseBody {
	res := &UserInformationResponseBody{
		UserID:       v.UserID,
		GivenName:    v.GivenName,
		FamilyName:   v.FamilyName,
		Telephone:    v.Telephone,
		Email:        v.Email,
		LanguageCode: v.LanguageCode,
	}
	if v.Address != nil {
		res.Address = marshalOrderPostalAddressToPostalAddressResponseBody(v.Address)
	}

	return res
}

// marshalOrderPostalAddressToPostalAddressResponseBody builds a value of type
// *PostalAddressResponseBody from a value of type *order.PostalAddress.
func marshalOrderPostalAddressToPostalAddressResponseBody(v *order.PostalAddress) *PostalAddressResponseBody {
	if v == nil {
		return nil
	}
	res := &PostalAddressResponseBody{
		Country:       v.Country,
		Locality:      v.Locality,
		Region:        v.Region,
		PostalCode:    v.PostalCode,
		StreetAddress: v.StreetAddress,
	}

	return res
}

// marshalOrderPaymentInformationToPaymentInformationResponseBody builds a
// value of type *PaymentInformationResponseBody from a value of type
// *order.PaymentInformation.
func marshalOrderPaymentInformationToPaymentInformationResponseBody(v *order.PaymentInformation) *PaymentInformationResponseBody {
	if v == nil {
		return nil
	}
	res := &PaymentInformationResponseBody{
		PrepaymentStatus:     v.PrepaymentStatus,
		PaymentTransactionID: v.PaymentTransactionID,
		PaymentProcessedBy:   v.PaymentProcessedBy,
		PaymentOptionID:      v.PaymentOptionID,
		UserPaymentOptionID:  v.UserPaymentOptionID,
		FraudSignals:         v.FraudSignals,
		PaResponse:           v.PaResponse,
		MdMerchantData:       v.MdMerchantData,
	}
	if v.Price != nil {
		res.Price = marshalOrderPriceToPriceResponseBody(v.Price)
	}
	if v.TaxAmount != nil {
		res.TaxAmount = marshalOrderPriceToPriceResponseBody(v.TaxAmount)
	}
	if v.Fees != nil {
		res.Fees = marshalOrderPriceToPriceResponseBody(v.Fees)
	}
	if v.FeesAndTaxes != nil {
		res.FeesAndTaxes = marshalOrderPriceToPriceResponseBody(v.FeesAndTaxes)
	}
	if v.Deposit != nil {
		res.Deposit = marshalOrderDepositToDepositResponseBody(v.Deposit)
	}
	if v.NoShowFee != nil {
		res.NoShowFee = marshalOrderNoShowFeeToNoShowFeeResponseBody(v.NoShowFee)
	}

	return res
}

// marshalOrderDepositToDepositResponseBody builds a value of type
// *DepositResponseBody from a value of type *order.Deposit.
func marshalOrderDepositToDepositResponseBody(v *order.Deposit) *DepositResponseBody {
	if v == nil {
		return nil
	}
	res := &DepositResponseBody{
		MinAdvanceCancellationSec: v.MinAdvanceCancellationSec,
		DepositType:               v.DepositType,
	}
	if v.Deposit != nil {
		res.Deposit = marshalOrderPriceToPriceResponseBody(v.Deposit)
	}

	return res
}

// marshalOrderNoShowFeeToNoShowFeeResponseBody builds a value of type
// *NoShowFeeResponseBody from a value of type *order.NoShowFee.
func marshalOrderNoShowFeeToNoShowFeeResponseBody(v *order.NoShowFee) *NoShowFeeResponseBody {
	if v == nil {
		return nil
	}
	res := &NoShowFeeResponseBody{
		FeeType: v.FeeType,
	}
	if v.Fee != nil {
		res.Fee = marshalOrderPriceToPriceResponseBody(v.Fee)
	}

	return res
}

// marshalOrderOrderFailureToOrderFailureResponseBody builds a value of type
// *OrderFailureResponseBody from a value of type *order.OrderFailure.
func marshalOrderOrderFailureToOrderFailureResponseBody(v *order.OrderFailure) *OrderFailureResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderFailureResponseBody{
		Cause:            v.Cause,
		RejectedCardType: v.RejectedCardType,
		Description:      v.Description,
	}
	if v.Fulfillability != nil {
		res.Fulfillability = marshalOrderOrderFulfillabilityToOrderFulfillabilityResponseBody(v.Fulfillability)
	}
	if v.PaymentFailure != nil {
		res.PaymentFailure = marshalOrderPaymentFailureInformationToPaymentFailureInformationResponseBody(v.PaymentFailure)
	}

	return res
}

// marshalOrderPaymentFailureInformationToPaymentFailureInformationResponseBody
// builds a value of type *PaymentFailureInformationResponseBody from a value
// of type *order.PaymentFailureInformation.
func marshalOrderPaymentFailureInformationToPaymentFailureInformationResponseBody(v *order.PaymentFailureInformation) *PaymentFailureInformationResponseBody {
	if v == nil {
		return nil
	}
	res := &PaymentFailureInformationResponseBody{}
	if v.Threeds1Parameters != nil {
		res.Threeds1Parameters = marshalOrderThreeDS1ParametersToThreeDS1ParametersResponseBody(v.Threeds1Parameters)
	}

	return res
}

// marshalOrderThreeDS1ParametersToThreeDS1ParametersResponseBody builds a
// value of type *ThreeDS1ParametersResponseBody from a value of type
// *order.ThreeDS1Parameters.
func marshalOrderThreeDS1ParametersToThreeDS1ParametersResponseBody(v *order.ThreeDS1Parameters) *ThreeDS1ParametersResponseBody {
	res := &ThreeDS1ParametersResponseBody{
		AcsURL:         v.AcsURL,
		PaReq:          v.PaReq,
		TransactionID:  v.TransactionID,
		MdMerchantData: v.MdMerchantData,
	}

	return res
}

// unmarshalOrderIdsRequestBodyRequestBodyToOrderOrderIds builds a value of
// type *order.OrderIds from a value of type *OrderIdsRequestBodyRequestBody.
func unmarshalOrderIdsRequestBodyRequestBodyToOrderOrderIds(v *OrderIdsRequestBodyRequestBody) *order.OrderIds {
	if v == nil {
		return nil
	}
	res := &order.OrderIds{}
	if v.OrderID != nil {
		res.OrderID = make([]string, len(v.OrderID))
		for i, val := range v.OrderID {
			res.OrderID[i] = val
		}
	}

	return res
}
