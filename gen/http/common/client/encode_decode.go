// Code generated by goa v3.2.4, DO NOT EDIT.
//
// common HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	common "github.com/tchssk/reserve-with-google-goa/gen/common"
	goahttp "goa.design/goa/v3/http"
)

// BuildHealthCheckRequest instantiates a HTTP request object with method and
// path set to call the "common" service "health_check" endpoint
func (c *Client) BuildHealthCheckRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HealthCheckCommonPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("common", "health_check", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeHealthCheckRequest returns an encoder for requests sent to the common
// health_check server.
func EncodeHealthCheckRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*common.HealthCheckPayload)
		if !ok {
			return goahttp.ErrInvalidType("common", "health_check", "*common.HealthCheckPayload", v)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeHealthCheckResponse returns a decoder for responses returned by the
// common health_check endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeHealthCheckResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "too_many_requests" (type *goa.ServiceError): http.StatusTooManyRequests
//	- "client_closed_request" (type *goa.ServiceError): 499
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "not_implemented" (type *goa.ServiceError): http.StatusNotImplemented
//	- "service_unavailable" (type *goa.ServiceError): http.StatusServiceUnavailable
//	- "gateway_timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- error: internal error
func DecodeHealthCheckResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body HealthCheckResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			res := NewHealthCheckResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body HealthCheckBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body HealthCheckUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body HealthCheckForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckForbidden(&body)
		case http.StatusNotFound:
			var (
				body HealthCheckNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckNotFound(&body)
		case http.StatusConflict:
			var (
				body HealthCheckConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckConflict(&body)
		case http.StatusTooManyRequests:
			var (
				body HealthCheckTooManyRequestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckTooManyRequestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckTooManyRequests(&body)
		case 499:
			var (
				body HealthCheckClientClosedRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckClientClosedRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckClientClosedRequest(&body)
		case http.StatusInternalServerError:
			var (
				body HealthCheckInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckInternalServerError(&body)
		case http.StatusNotImplemented:
			var (
				body HealthCheckNotImplementedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckNotImplementedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckNotImplemented(&body)
		case http.StatusServiceUnavailable:
			var (
				body HealthCheckServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckServiceUnavailable(&body)
		case http.StatusGatewayTimeout:
			var (
				body HealthCheckGatewayTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("common", "health_check", err)
			}
			err = ValidateHealthCheckGatewayTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("common", "health_check", err)
			}
			return nil, NewHealthCheckGatewayTimeout(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("common", "health_check", resp.StatusCode, string(body))
		}
	}
}
