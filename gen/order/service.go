// Code generated by goa v3.2.4, DO NOT EDIT.
//
// order service
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package order

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the order service interface.
type Service interface {
	// CheckOrderFulfillability implements check_order_fulfillability.
	CheckOrderFulfillability(context.Context, *CheckOrderFulfillabilityPayload) (res *CheckOrderFulfillabilityResponse, err error)
	// CreateOrder implements create_order.
	CreateOrder(context.Context, *CreateOrderPayload) (res *CreateOrderResponse, err error)
	// ListOrders implements list_orders.
	ListOrders(context.Context, *ListOrdersPayload) (res *ListOrdersResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// BasicAuth implements the authorization logic for the Basic security scheme.
	BasicAuth(ctx context.Context, user, pass string, schema *security.BasicScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "order"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"check_order_fulfillability", "create_order", "list_orders"}

// CheckOrderFulfillabilityPayload is the payload type of the order service
// check_order_fulfillability method.
type CheckOrderFulfillabilityPayload struct {
	Username string
	Password string
	Body     *CheckOrderFulfillabilityRequest
}

// CheckOrderFulfillabilityResponse is the result type of the order service
// check_order_fulfillability method.
type CheckOrderFulfillabilityResponse struct {
	Fulfillability    *OrderFulfillability
	FeesAndTaxes      *Price
	Fees              *Fees
	CartExpirationSec *string
}

// CreateOrderPayload is the payload type of the order service create_order
// method.
type CreateOrderPayload struct {
	Username string
	Password string
	Body     *CreateOrderRequest
}

// CreateOrderResponse is the result type of the order service create_order
// method.
type CreateOrderResponse struct {
	Order        *Order
	OrderFailure *OrderFailure
}

// ListOrdersPayload is the payload type of the order service list_orders
// method.
type ListOrdersPayload struct {
	Username string
	Password string
	Body     *ListOrdersRequest
}

// ListOrdersResponse is the result type of the order service list_orders
// method.
type ListOrdersResponse struct {
	Order []*Order
}

type CheckOrderFulfillabilityRequest struct {
	MerchantID string
	Item       []*LineItem
	CartID     *string
}

type LineItem struct {
	ServiceID         string
	StartSec          string
	DurationSec       string
	Tickets           []*OrderedTickets
	Price             *Price
	Status            *string
	IntakeFormAnswers *IntakeFormAnswers
	WarningReason     *string
}

type OrderedTickets struct {
	TicketID string
	Count    int32
}

type Price struct {
	PriceMicros      int64
	CurrencyCode     string
	PricingOptionTag *string
}

type IntakeFormAnswers struct {
	Answer []*IntakeFormFieldAnswer
}

type IntakeFormFieldAnswer struct {
	ID       string
	Response []string
}

type OrderFulfillability struct {
	Result              string
	ItemFulfillability  []*LineItemFulfillability
	UnfulfillableReason *string
}

type LineItemFulfillability struct {
	Item                     *LineItem
	Result                   string
	UnfulfillableReason      *string
	Availability             *UpdatedAvailability
	TicketType               []*TicketType
	ViolatedTicketConstraint []*ViolatedTicketConstraint
}

type UpdatedAvailability struct {
	SpotsOpen int32
}

type TicketType struct {
	TicketTypeID               string
	ShortDescription           string
	LocalizedShortDescription  *Text
	Price                      *Price
	PerTicketFee               *PerTicketFee
	OptionDescription          string
	LocalizedOptionDescription *Text
}

type Text struct {
	Value          *string
	LocalizedValue []*LocalizedString
}

type LocalizedString struct {
	Locale string
	Value  string
}

type PerTicketFee struct {
	ServiceCharge *Price
	FacilityFee   *Price
	Taxes         *Price
}

type ViolatedTicketConstraint struct {
	MinTicketCount int32
	MaxTicketCount int32
	TicketID       string
}

type Fees struct {
	PerTicketFee []*SpecificPerTicketFee
	PerOrderFee  []*SpecificPerOrderFee
}

type SpecificPerTicketFee struct {
	TicketID  string
	ServiceID string
	FeeName   string
	FeeAmount *Price
}

type SpecificPerOrderFee struct {
	FeeName   string
	FeeAmount *Price
}

type CreateOrderRequest struct {
	Order                       *Order
	PaymentProcessingParameters *PaymentProcessingParameters
	IdempotencyToken            string
}

type Order struct {
	OrderID            *string
	UserInformation    *UserInformation
	PaymentInformation *PaymentInformation
	MerchantID         *string
	Item               []*LineItem
}

type UserInformation struct {
	UserID       string
	GivenName    string
	FamilyName   string
	Address      *PostalAddress
	Telephone    string
	Email        string
	LanguageCode *string
}

type PostalAddress struct {
	Country       string
	Locality      string
	Region        *string
	PostalCode    string
	StreetAddress string
}

type PaymentInformation struct {
	PrepaymentStatus     string
	PaymentTransactionID *string
	Price                *Price
	TaxAmount            *Price
	Fees                 *Price
	FeesAndTaxes         *Price
	Deposit              *Deposit
	NoShowFee            *NoShowFee
	PaymentProcessedBy   string
	PaymentOptionID      *string
	UserPaymentOptionID  *string
	FraudSignals         *string
	PaResponse           *string
	MdMerchantData       *string
}

type Deposit struct {
	Deposit                   *Price
	MinAdvanceCancellationSec string
	DepositType               string
}

type NoShowFee struct {
	Fee     *Price
	FeeType string
}

type PaymentProcessingParameters struct {
	Processor                  string
	PaymentMethodToken         *string
	UnparsedPaymentMethodToken *string
	Version                    *string
	PaymentProcessor           string
	TokenizationConfig         *TokenizationConfig
}

type TokenizationConfig struct {
	TokenizationParameter    map[string]string
	BillingInformationFormat string
	MerchantOfRecordName     string
	PaymentCountryCode       string
	CardNetworkParameters    []*CardNetworkParameters
	AllowedAuthMethods       []string
}

type CardNetworkParameters struct {
	CardNetwork        string
	AcquirerBin        string
	AcquirerMerchantID string
}

type OrderFailure struct {
	Cause            string
	Fulfillability   *OrderFulfillability
	RejectedCardType *string
	Description      *string
	PaymentFailure   *PaymentFailureInformation
}

type PaymentFailureInformation struct {
	Threeds1Parameters *ThreeDS1Parameters
}

type ThreeDS1Parameters struct {
	AcsURL         string
	PaReq          string
	TransactionID  string
	MdMerchantData string
}

type ListOrdersRequest struct {
	UserID   *string
	OrderIds *OrderIds
}

type OrderIds struct {
	OrderID []string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "conflict",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeTooManyRequests builds a goa.ServiceError from an error.
func MakeTooManyRequests(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "too_many_requests",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeClientClosedRequest builds a goa.ServiceError from an error.
func MakeClientClosedRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "client_closed_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotImplemented builds a goa.ServiceError from an error.
func MakeNotImplemented(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_implemented",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeServiceUnavailable builds a goa.ServiceError from an error.
func MakeServiceUnavailable(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "service_unavailable",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeGatewayTimeout builds a goa.ServiceError from an error.
func MakeGatewayTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "gateway_timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
