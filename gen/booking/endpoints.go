// Code generated by goa v3.2.4, DO NOT EDIT.
//
// booking endpoints
//
// Command:
// $ goa gen github.com/tchssk/reserve-with-google-goa/design

package booking

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "booking" service endpoints.
type Endpoints struct {
	BatchAvailabilityLookup goa.Endpoint
	CheckAvailability       goa.Endpoint
	CreateBooking           goa.Endpoint
	UpdateBooking           goa.Endpoint
	GetBookingStatus        goa.Endpoint
	ListBookings            goa.Endpoint
}

// NewEndpoints wraps the methods of the "booking" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		BatchAvailabilityLookup: NewBatchAvailabilityLookupEndpoint(s, a.BasicAuth),
		CheckAvailability:       NewCheckAvailabilityEndpoint(s, a.BasicAuth),
		CreateBooking:           NewCreateBookingEndpoint(s, a.BasicAuth),
		UpdateBooking:           NewUpdateBookingEndpoint(s, a.BasicAuth),
		GetBookingStatus:        NewGetBookingStatusEndpoint(s, a.BasicAuth),
		ListBookings:            NewListBookingsEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "booking" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.BatchAvailabilityLookup = m(e.BatchAvailabilityLookup)
	e.CheckAvailability = m(e.CheckAvailability)
	e.CreateBooking = m(e.CreateBooking)
	e.UpdateBooking = m(e.UpdateBooking)
	e.GetBookingStatus = m(e.GetBookingStatus)
	e.ListBookings = m(e.ListBookings)
}

// NewBatchAvailabilityLookupEndpoint returns an endpoint function that calls
// the method "batch_availability_lookup" of service "booking".
func NewBatchAvailabilityLookupEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BatchAvailabilityLookupPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.BatchAvailabilityLookup(ctx, p)
	}
}

// NewCheckAvailabilityEndpoint returns an endpoint function that calls the
// method "check_availability" of service "booking".
func NewCheckAvailabilityEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CheckAvailabilityPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.CheckAvailability(ctx, p)
	}
}

// NewCreateBookingEndpoint returns an endpoint function that calls the method
// "create_booking" of service "booking".
func NewCreateBookingEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateBookingPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateBooking(ctx, p)
	}
}

// NewUpdateBookingEndpoint returns an endpoint function that calls the method
// "update_booking" of service "booking".
func NewUpdateBookingEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateBookingPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateBooking(ctx, p)
	}
}

// NewGetBookingStatusEndpoint returns an endpoint function that calls the
// method "get_booking_status" of service "booking".
func NewGetBookingStatusEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetBookingStatusPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetBookingStatus(ctx, p)
	}
}

// NewListBookingsEndpoint returns an endpoint function that calls the method
// "list_bookings" of service "booking".
func NewListBookingsEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListBookingsPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListBookings(ctx, p)
	}
}
